{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/gcc-compiler-collection/",
            "url": "https://arachnid.cc/gcc-compiler-collection/",
            "title": "GCC 编译器套件说明",
            "date_published": "2023-02-10T15:28:36.577Z",
            "content_html": "<h1 id=\"gcc-简述\"><a class=\"anchor\" href=\"#gcc-简述\">#</a> GCC 简述</h1>\n<p>The GNU Compiler Collection，通常简称 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9nY2MuZ251Lm9yZy8=\">GCC</span> ，是一套由 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy8=\">GNU</span> 开发的编译器集合。</p>\n<p>为什么是编辑器集合而不是编译器呢？</p>\n<p>那是因为 GNU 编译器集合包括 C、C++、Objective-C，Fortran，Ada、Go 和 D 等，以及这些语言的库 （libstdc++,...）。 GCC 最初是作为 GNU 操作系统的编译器编写的。 GNU 系统被开发为 100% 的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9waGlsb3NvcGh5L2ZyZWUtc3cuaHRtbA==\">自由软件</span> ，即从某种意义上说它是自由的，尊重用户的自由。另外 GCC 对硬件平台的支持，可以说无所不在，它不仅支持 x86 处理器架构，还支持 ARM, Motorola 68000, Motorola 8800，AtmelAVR，MIPS 等处理器架构。</p>\n<h1 id=\"gcc-主要构成\"><a class=\"anchor\" href=\"#gcc-主要构成\">#</a> GCC 主要构成</h1>\n<ol>\n<li>gcc-core：顾明之意是 GCC 的核心部分，这部分是只包含 c 的编译器及公共部分，而对其他语言（C++、Ada 等）的支持包需要另外安装，这也是 GCC 为何如此强大的重要原因 。gcc-core 依赖于 Binutils。</li>\n<li>Binutils：它是一组开发工具，包括连接器，汇编器和其他用于目标文件和档案的工具。关于 Binutils 的介绍可以参考官方的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iaW51dGlscy8=\">Binutils</span> 介绍。这个软件包依赖于不同的目标机平台，因为不同目标机的指令集是不一样的，比如 arm 跟 x86 就不一样。<br />\n常用的工具有：\n<ul>\n<li>as：汇编器，把汇编语言代码转换为机器码（目标文件）。</li>\n<li>ld：链接器，把编译生成的多个目标文件组织成最终的可执行程序文件。</li>\n<li>readelf：可用于查看目标文件或可执行程序文件的信息。</li>\n<li>objcopy： 可用于目标文件格式转换，如  <code>.elf</code>  转换成  <code>.bin</code>  。</li>\n<li>objdump：可用于查看目标文件的信息，最主要的作用是反汇编。</li>\n<li>addr2line：可用于将程序指令地址转换为所对应的函数名、以及函数所在的源文件名和行号。</li>\n</ul>\n</li>\n<li>Glibc：包含了主要的 c 库，这个库提供了基本的例程，用于分配内存，搜索目录，读写文件，字符串处理等等。</li>\n</ol>\n<h1 id=\"arm-编译工具链\"><a class=\"anchor\" href=\"#arm-编译工具链\">#</a> ARM 编译工具链</h1>\n<p>编译器主要用来编译源文件，而在编译一个源文件时需要经过以下 4 步：</p>\n<ol>\n<li>预处理：为把头文件的代码、宏之类的内容转换成生成的  <code>.i</code>  文件，还是 C 代码。</li>\n<li>编译：把预处理后的  <code>.i</code>  文件通过编译成  <code>.s</code>  文件，汇编语言。</li>\n<li>汇编：将汇编语言文件生成目标文件  <code>.o</code>  文件，机器码。</li>\n<li>链接：将每个源文件对应的  <code>.o</code>  文件链接起来，就生成一个可执行程序文件。</li>\n</ol>\n<p>交叉编译器：如果我们希望编译器运行在 x86 架构平台上，然后编译生成 ARM 架构的可执行程序，这种编译器和目标程序运行在不同架构的编译过程，被称为 “交叉编译”，而对应使用的编译工具就成为交叉编译器。</p>\n<p>GNU 交叉编译器的命名规则：</p>\n<p><code>arch [-vendor] [-os] [-(gnu)abi] [-language]</code></p>\n<ul>\n<li>arch：体系架构，如  <code>arm</code>  、  <code>aarch64</code>  或者  <code>mips</code>  等；</li>\n<li>vendor：工具链提供商，没有 vendor 时，用  <code>none</code>  代替；</li>\n<li>os：目标操作系统，没有 os 支持时，用  <code>none</code>  代替；</li>\n<li>abi：应用二进制接口（Application Binary Interface），对于嵌入式平台命名为  <code>eabi</code>  ，  <code>e</code>  表示 Embedded；</li>\n<li>language：编译器支持的语言，如： <code>gcc</code>  、  <code>g++</code>  。</li>\n</ul>\n<p>note：如果同时没有 vendor 和 os 支持，则只用一个 none 代替。例如 arm-none-eabi 中的 none 表示既没有 vendor 也没有 os 支持。</p>\n<p><strong>关于 ABI 和 EABI 的区别</strong></p>\n<p>ABI：应用二进制接口（Application Binary Interface）。在计算机中，应用二进制接口描述了应用程序（或者其他类型）和操作系统之间或其他应用程序的低级接口。</p>\n<p>EABI：嵌入式应用二进制接口（Embedded Application Binary Interface）。嵌入式应用二进制接口指定了文件格式、数据类型、寄存器使用、堆积组织优化和在一个嵌入式软件中的参数的标准约定。开发者使用自己的汇编语言也可以使用 EABI 作为与兼容的编译器生成的汇编语言的接口。</p>\n<p>两者主要区别是：ABI 是计算机上的，EABI 是嵌入式平台上（如 ARM，MIPS 等）的；EABI 去掉了用户代码和系统内核之间的抽象，可以让用户代码直接访问硬件，提高了性能。</p>\n<p><strong>关于 gcc 和 g++ 的区别</strong></p>\n<p>实际上，只要是 gcc 编译器支持的语言都可以使用 gcc 编译器完成编译，而 g++ 编译器只会按照 C++ 的风格编译代码。虽然很多情况下我们都认为 C++ 是对 C 语言兼容的，但是实际上在一些具体的语法规则上，C++ 在编译过程中的语法检查会更加严格。此外，C++ 语言本身在编译 过程中也会引入 C++ 的标准库，如果使用 gcc 编译器直接编译 C++ 语言会在编译过程中添加额外的参数，这样会显得编译过程较为繁琐（因为大部分情况下我们希望标准库可以直接引入，而不是再需要手动指定，否则对于初级使用者会带来额外的学习负担）。为了更方便使用编译器，我们选择 g++ 来编译 C++ 代码。总结一下，gcc 可以完成 C++ 语言的编译，但是使用过程会较为繁琐，而 g++ 就是简化后的编译指令。</p>\n<p><strong>与 gnueabi 相关的 gnueabi 和 gnueabihf 的区别</strong></p>\n<p><code>gcc-arm-linux-gnueabi – The GNU C compiler for armel architecture</code></p>\n<p>AND</p>\n<p><code>gcc-arm-linux-gnueabihf – The GNU C compiler for armhf architecture</code></p>\n<p>这两个交叉编译器分别适用于 armel 和 armhf 两个不同的架构，armel 和 armhf 这两种架构在对待浮点运算采取了不同的策略（有 fpu 的 ARM 才能支持这两种浮点运算策略）。</p>\n<p>这两个交叉编译器是 gcc 的选项  <code>-mfloat-abi</code>  的默认值不同；该选项有三种值 soft、softfp、hard（其中后两者都要求 ARM 里有 fpu 浮点运算单元，soft 与后两者是兼容的，但 softfp 和 hard 两种模式互不兼容）：</p>\n<ul>\n<li>\n<p>soft： 不用 fpu 进行浮点计算，即使有 fpu 浮点运算单元也不用，而是使用软件模式。</p>\n</li>\n<li>\n<p>softfp： armel 架构（对应的编译器为 arm-linux-gnueabi-gcc ）采用的默认值，用 fpu 计算，但是传参数用普通寄存器传，这样中断的时候，只需要保存普通寄存器，中断负荷小，但是参数需要转换成浮点的再计算。</p>\n</li>\n<li>\n<p>hard： armhf 架构（对应的编译器 arm-linux-gnueabihf-gcc ）采用的默认值，用 fpu 计算，传参数也用 fpu 中的浮点寄存器传，省去了转换，性能最好，但是中断负荷高。</p>\n</li>\n</ul>\n<p>几种常见的编译 ARM 的交叉编译器：</p>\n<p>arm-none-eabi：用于编译裸机程序或系统，这个是没有操作系统的，不支持那些系统调用等系列接口，可调用  <code>newlib</code>  库，适用于 ARM7/Cortex-M/Cortex-R。</p>\n<p>arm-none-linux-gnueabi：用于编译 ARM 架构的 u-boot、Linux 内核、Linux 应用等，使用  <code>glibc</code>  库，适用于 ARM9/ARM11/Cortex-A。</p>\n<p>arm-eabi： 用于安卓程序编译。</p>\n<p>armcc：早期 Keil 软件公司（现已被 ARM 公司收购）出品的支持<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vZGQv\">相应器件</span>的编译工具，可以编译裸机程序，一般和 ARM 开发工具一起，Keil MDK 内置。</p>\n<h1 id=\"基于-gcc-的-arm-编译工具链提供商\"><a class=\"anchor\" href=\"#基于-gcc-的-arm-编译工具链提供商\">#</a> 基于 GCC 的 ARM 编译工具链提供商</h1>\n<p>目前，为 ARM 平台提供交叉编译工具链的提供商，本人所找到的只有两家：ARM 官方和 Linaro 公司。</p>\n<h2 id=\"arm-gnu-toolchain\"><a class=\"anchor\" href=\"#arm-gnu-toolchain\">#</a> Arm GNU Toolchain</h2>\n<p>ARM 除了有自己的专用编译器之外，还维护了一套基于 GCC 的交叉编译工具链，被称为 Arm GNU Toolchain。截至于 2022 年，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9hcm0tZ251LXRvb2xjaGFpbi1kb3dubG9hZHM=\">Arm GNU Toolchain</span> 被分为了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9nbnUtYQ==\">A family</span>（GNU Toolchain for the Cortex-A Family） 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb3dubG9hZHMvLS9nbnUtcm0=\">R &amp; M family</span>（GNU Arm Embedded Toolchain）两大类，但是自 2022 年开始，ARM 对其进行了统一。</p>\n<h2 id=\"linaro-toolchain\"><a class=\"anchor\" href=\"#linaro-toolchain\">#</a> Linaro Toolchain</h2>\n<p>Linaro 是一间非营利性质的开放源代码软件工程公司，主要的目标在于开发不同半导体公司系统单片机（SoC）平台的共通软件。其维护的工具链下载地址为：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbmFwc2hvdHMubGluYXJvLm9yZy9nbnUtdG9vbGNoYWluLw==\">https://snapshots.linaro.org/gnu-toolchain/</span> 。另外，从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubGluYXJvLm9yZy9kb3dubG9hZHMv\">https://www.linaro.org/downloads/</span> 的描述上看，目前 Linaro 仅针对于 Cortex-A 内核的编译工具链进行维护，而对用于 ARM 嵌入式处理器的 Cortex-R 和 Cortex-M 裸机编译工具链，则需要去 ARM 官网下载！</p>\n<h1 id=\"reference\"><a class=\"anchor\" href=\"#reference\">#</a> Reference</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20veGlhb3RsaWxpL3AvMzMwNjEwMC5odG1s\">https://www.cnblogs.com/xiaotlili/p/3306100.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1pDU2hvdUNTRE4vYXJ0aWNsZS9kZXRhaWxzLzg5NTUzMzIz\">https://blog.csdn.net/ZCShouCSDN/article/details/89553323</span></p>\n",
            "tags": []
        },
        {
            "id": "https://arachnid.cc/linux-routing-table/",
            "url": "https://arachnid.cc/linux-routing-table/",
            "title": "Linux 路由表说明",
            "date_published": "2023-02-05T06:32:47.036Z",
            "content_html": "<h1 id=\"route-命令\"><a class=\"anchor\" href=\"#route-命令\">#</a> route 命令</h1>\n<p>选项：</p>\n<ul>\n<li>\n<p><code>-v</code>  ：显示详细信息。</p>\n</li>\n<li>\n<p><code>-n</code>  ：不执行 DNS 反向查找（即不解析名称），直接显示数字形式的 IP 地址。</p>\n</li>\n<li>\n<p><code>-e</code>  ：netstat 格式显示路由表。</p>\n</li>\n<li>\n<p><code>-C</code>  ：打印 Linux 内核的路由缓存。</p>\n</li>\n<li>\n<p><code>add</code>  ：增加路由记录 /  <code>del</code>  ：删除路由记录</p>\n<ul>\n<li><code>-net</code>  ：目的地址是一个网络。</li>\n<li><code>-host</code>  ：目的地址是一台主机。</li>\n<li><code>netmask</code>  ：目的地址的网络掩码。</li>\n<li><code>gw</code>  ：路由数据包通过的网关。</li>\n<li><code>metric</code>  ：设置路由跃点。</li>\n</ul>\n</li>\n</ul>\n<p>eg：</p>\n<p>1、添加主机路由</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>添加主机路由</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token function\">add</span> <span class=\"token parameter variable\">-net</span> <span class=\"token number\">10.0</span>.0.10 netmask <span class=\"token number\">255.255</span>.255.255 gw <span class=\"token number\">10.139</span>.128.1 dev eth0</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token parameter variable\">-n</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">10.0</span>.0.10       <span class=\"token number\">10.139</span>.128.1    <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> eth0</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>2、添加网络路由</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>添加网络路由</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token function\">add</span> <span class=\"token parameter variable\">-net</span> <span class=\"token number\">10.0</span>.0.0 netmask <span class=\"token number\">255.255</span>.255.0 gw <span class=\"token number\">10.139</span>.128.1 dev eth0</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token parameter variable\">-n</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">10.0</span>.0.0        <span class=\"token number\">10.139</span>.128.1    <span class=\"token number\">255.255</span>.255.0   UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> eth0</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>3、添加设置默认网关跃点为 80</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>添加设置默认网关</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token function\">add</span> default gw <span class=\"token number\">192.168</span>.1.1 metric <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token parameter variable\">-n</span></pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">192.168</span>.1.1     <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> eth0</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token punctuation\">..</span>.</pre></td></tr></table></figure><p>4、删除路由</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>删除路由</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route del default gw <span class=\"token number\">192.168</span>.1.1 metric <span class=\"token number\">80</span></pre></td></tr></table></figure><h1 id=\"字段分析\"><a class=\"anchor\" href=\"#字段分析\">#</a> 字段分析</h1>\n<p>使用  <code>route</code>  or  <code>route -n</code>  命令查看内核路由表：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>命令行提示符</span></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route</pre></td></tr><tr><td data-num=\"2\"></td><td data-command=\"\"></td><td><pre>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"\"></td><td><pre>default         _gateway        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"\"></td><td><pre>default         _gateway        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">1000</span>   <span class=\"token number\">0</span>        <span class=\"token number\">0</span> br0</pre></td></tr><tr><td data-num=\"5\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">192.168</span>.10.0    <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> br0</pre></td></tr><tr><td data-num=\"6\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">192.168</span>.29.0    <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr><tr><td data-num=\"7\"></td><td data-command=\"\"></td><td><pre>_gateway        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr><tr><td data-num=\"8\"></td><td data-command=\"[root@localhost] $\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td data-command=\"[root@localhost] $\"></td><td><pre>route <span class=\"token parameter variable\">-n</span></pre></td></tr><tr><td data-num=\"10\"></td><td data-command=\"\"></td><td><pre>Destination     Gateway         Genmask         Flags Metric Ref    Use Iface</pre></td></tr><tr><td data-num=\"11\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">192.168</span>.29.2    <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr><tr><td data-num=\"12\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">192.168</span>.10.1    <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">1000</span>   <span class=\"token number\">0</span>        <span class=\"token number\">0</span> br0</pre></td></tr><tr><td data-num=\"13\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">192.168</span>.10.0    <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> br0</pre></td></tr><tr><td data-num=\"14\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">192.168</span>.29.0    <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr><tr><td data-num=\"15\"></td><td data-command=\"\"></td><td><pre><span class=\"token number\">192.168</span>.29.2    <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens33</pre></td></tr></table></figure><p>字段分类说明：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">字段</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Destination</td>\n<td style=\"text-align:left\">目标网络或目标主机。Destination 为 default（ <code>0.0.0.0</code> ）时，表示这个是默认网关，所有数据都发到这个网关（这里是  <code>10.139.128.1</code> ）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Gateway</td>\n<td style=\"text-align:left\">网关地址， <code>0.0.0.0</code>  表示当前记录对应的 Destination 跟本机在同一个网段，通信时不需要经过网关（同一个局域网内 2 台主机通信不需要经过网关）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Genmask</td>\n<td style=\"text-align:left\">Destination 字段的网络掩码，Destination 是主机时需要设置为  <code>255.255.255.255</code>  ，是默认路由时会设置为  <code>0.0.0.0</code>  。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Flags</td>\n<td style=\"text-align:left\">见下文说明。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Metric</td>\n<td style=\"text-align:left\">跃点，指到达指定网络所需的中转数，是大型局域网和广域网设置所必需的 （不在 Linux 内核中使用）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Ref</td>\n<td style=\"text-align:left\">路由项引用次数 （不在 Linux 内核中使用）。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Use</td>\n<td style=\"text-align:left\">此路由项被路由软件查找的次数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Iface</td>\n<td style=\"text-align:left\">网卡名字，例如  <code>eth0</code>  ；要去往这个网段需要使用哪一个网络接口。也就是  <code>eth0</code>  这张网卡。</td>\n</tr>\n</tbody>\n</table>\n<p>可以看到 Flags 下面有许多字母组合，他们分别的含义是：</p>\n<ul>\n<li>\n<p><strong>U (route is up)</strong> ：该路由处于活跃；</p>\n</li>\n<li>\n<p><strong>H (target is a host)</strong> ：目标是一部主机 (IP) 而非网域（子网掩码是 255.255.255.255）；</p>\n</li>\n<li>\n<p><strong>G (use gateway)</strong> ：需要透过外部的主机 (gateway) 来转递封包（一般指向默认网关）；</p>\n</li>\n<li>\n<p><strong>R (reinstate route for dynamic routing)</strong> ：使用动态路由时，恢复路由资讯的旗标；</p>\n</li>\n<li>\n<p><strong>D (dynamically installed by daemon or redirect)</strong> ：已经由服务或转 port 功能设定为动态路由</p>\n</li>\n<li>\n<p><strong>M (modified from routing daemon or redirect)</strong> ：路由已经被修改了；</p>\n</li>\n<li>\n<p><strong>! (reject route)</strong> ：这个路由将不会被接受（用来抵挡不安全的网域）。</p>\n</li>\n</ul>\n<h1 id=\"路由种类\"><a class=\"anchor\" href=\"#路由种类\">#</a> 路由种类</h1>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">路由类型</th>\n<th style=\"text-align:left\">子网掩码</th>\n<th style=\"text-align:left\">Flag 字段</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">主机路由</td>\n<td style=\"text-align:left\">255.255.255.255</td>\n<td style=\"text-align:left\">UH</td>\n<td style=\"text-align:left\">指向单个 IP 地址或主机名的路由记录</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">网络路由</td>\n<td style=\"text-align:left\">255.255.255.0</td>\n<td style=\"text-align:left\">U</td>\n<td style=\"text-align:left\">代表主机可以到达的网络，比如说目的地址是  <code>192.168.10.xxx</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">默认路由</td>\n<td style=\"text-align:left\">0.0.0.0</td>\n<td style=\"text-align:left\">UG</td>\n<td style=\"text-align:left\">当主机不能在路由表中查找到目标主机的 IP 时，数据包就发到默认路由上</td>\n</tr>\n</tbody>\n</table>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://arachnid.cc/aqlite-summarize/",
            "url": "https://arachnid.cc/aqlite-summarize/",
            "title": "SQLite 知识整理",
            "date_published": "2023-02-03T12:44:39.504Z",
            "content_html": "<h1 id=\"sqlite-类型\"><a class=\"anchor\" href=\"#sqlite-类型\">#</a> SQLite 类型</h1>\n<p><strong>1、存储类</strong></p>\n<p>SQLite 存储类属性划分为以下几种类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NULL</td>\n<td>表示该值为 NULL 值。</td>\n</tr>\n<tr>\n<td>INTEGER</td>\n<td>无符号整型值，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td>\n</tr>\n<tr>\n<td>REAL</td>\n<td>浮点值，存储为 8 字节的 IEEE 浮点数字。</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>文本字符串，使用 UTF-8、UTF-16BE 或 UTF-16LE 编码方式存储。</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>存储 Blob 数据，该类型数据和输入数据完全相同。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>2、数据类型</strong></p>\n<ul>\n<li>\n<p>布尔数据类型：<br />\nSQLite 并没有提供专门的布尔存储类型，取而代之的是存储整型 1 表示 true，0 表示 false。</p>\n</li>\n<li>\n<p>日期和时间数据类型：<br />\n和布尔类型一样，SQLite 也同样没有提供专门的日期时间存储类型，而是以 TEXT、REAL 和 INTEGER 类型分别不同的格式表示该类型，如：<br />\n<strong>TEXT</strong> : &quot;YYYY-MM-DD HH:MM:SS.SSS&quot;。<br />\n<strong>REAL</strong> ：以 Julian 日期格式存储。<br />\n<strong>INTEGER</strong> ：以 Unix 时间形式保存数据值，即从 1970-01-01 00:00:00 到当前时间所流经的秒数。</p>\n</li>\n</ul>\n<p><strong>3、类型亲缘性（Type Affinity）</strong></p>\n<p>为了最大限度地提高 SQLite 和其他数据库引擎之间的兼容性，SQLite 支持 “类型亲缘性” 的概念。使其它 SQL 数据库引擎能在 SQLite 上运行；在表字段被声明之后，SQLite 都会根据该字段声明时的类型为其选择一种亲缘类型，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式，除非亲缘类型不匹配或无法转换当前数据到该亲缘类型，这样 SQLite 才会考虑其它更适合该值的类型存储该值。</p>\n<p>SQLite 3 数据库中支持分配的类型关联：</p>\n<ul>\n<li>TEXT</li>\n<li>NUMERIC</li>\n<li>INTEGER</li>\n<li>REAL</li>\n<li>BLOB</li>\n</ul>\n<p>决定规则：</p>\n<ol>\n<li>如果声明的类型包含字符串 “INT”，则它分配为  <code>INTEGER</code>  。</li>\n<li>如果声明的类型包含任意字符串 “CHAR”、“CLOB” 或 “TEXT” 的关键字，则被分配为  <code>TEXT</code>  。请注意，VARCHAR 类型包含字符串 “CHAR”，因此被分配为  <code>TEXT</code>  。</li>\n<li>如果声明的类型包含字符串 “BLOB”，或者如果未指定类型，则被分配为  <code>BLOB</code>  。</li>\n<li>如果声明的类型包含任意字符串 “REAL”、“FLOA” 或 “DOUB” 的关键字，则被分配为  <code>REAL</code>  。</li>\n<li>其余情况下，归类为  <code>NUMERIC</code>  。</li>\n</ol>\n<p>note：请注意，确定类型亲缘性的规则顺序很重要。声明类型为 “CHARINT” 的字段将同时匹配规则 1 和 2，但第一条规则采用优先权，所以会被分配为  <code>INTEGER</code>  。</p>\n<p>示例：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">声明的类型</th>\n<th style=\"text-align:left\">类型亲缘性</th>\n<th>规则优先级</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INT &lt;br/&gt;INTEGER &lt;br/&gt;TINYINT &lt;br/&gt;SMALLINT &lt;br/&gt;MEDIUMINT &lt;br/&gt;BIGINT &lt;br/&gt;UNSIGNED &lt;br/&gt;BIG &lt;br/&gt;INT &lt;br/&gt;INT2 &lt;br/&gt;INT8</td>\n<td style=\"text-align:left\">INTEGER</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CHARACTER(20) &lt;br/&gt;VARCHAR(255) &lt;br/&gt;VARYING &lt;br/&gt;CHARACTER(255) &lt;br/&gt;NCHAR(55) &lt;br/&gt;NATIVE &lt;br/&gt;CHARACTER(70) &lt;br/&gt;NVARCHAR(100) &lt;br/&gt;TEXT &lt;br/&gt;CLOB</td>\n<td style=\"text-align:left\">TEXT</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BLOB &lt;br/&gt;<em>no datatype specified</em></td>\n<td style=\"text-align:left\">BLOB</td>\n<td>3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REAL &lt;br/&gt;DOUBLE &lt;br/&gt;DOUBLE &lt;br/&gt;PRECISION &lt;br/&gt;FLOAT</td>\n<td style=\"text-align:left\">REAL</td>\n<td>4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NUMERIC &lt;br/&gt;DECIMAL(10,5) &lt;br/&gt;BOOLEAN &lt;br/&gt;DATE &lt;br/&gt;DATETIME</td>\n<td style=\"text-align:left\">NUMERIC</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据表查询\"><a class=\"anchor\" href=\"#数据表查询\">#</a> 数据表查询</h1>\n<p><strong>1、查看所有表名</strong></p>\n<p><code>SELECT * FROM sqlite_master WHERE type='table' ORDER BY name;</code></p>\n<p>sqlite_master 是一个特殊表，属于系统表；存放在根页中，每一个数据库的  <code>.db</code>  文件都有一个 sqlite_master 表。该表存放了  <code>.db</code>  中所有表的相关信息，并只有只读权限，写操作由系统自动执行，使用者没有写的执行权限；其结构如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE <span class=\"token function\">sqlite_master</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    type TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目的类型，如：表 (table), 索引 (index), 视图 (view), 触发器 (trigger)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目的名称，如表名、索引名等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    tbl_name TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rootpage INTEGER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目在数据库页中存储的编号。对于视图和触发器，该列值为 0 或者 NULL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sql TEXT <span class=\"token comment\">// 记录创建该项目的 SQL 语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>2、查看表的字段</strong></p>\n<p><code>PRAGMA table_info(table_name);</code></p>\n<p>其中 [table_name] 为待查数据表名。</p>\n<p><strong>3、查看整表数据</strong></p>\n<p><code>SELECT * FROM table_name;</code></p>\n<p>其中 [table_name] 为待查数据表名。</p>\n<p>note：参数传入，字符串用单引号包括。</p>\n<h1 id=\"c-c-接口函数\"><a class=\"anchor\" href=\"#c-c-接口函数\">#</a> C / C++ 接口函数</h1>\n<h2 id=\"errors-码\"><a class=\"anchor\" href=\"#errors-码\">#</a> Errors 码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_OK</span>           <span class=\"token expression\"><span class=\"token number\">0</span>   </span><span class=\"token comment\">/* 成功 */</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 错误码 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ERROR</span>        <span class=\"token expression\"><span class=\"token number\">1</span>   </span><span class=\"token comment\">/* sql 错误或丢失的数据库，SQL error or missing database */</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_INTERNAL</span>     <span class=\"token expression\"><span class=\"token number\">2</span>   </span><span class=\"token comment\">/* sqlite 内部逻辑错误，Internal logic error in SQLite */</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_PERM</span>         <span class=\"token expression\"><span class=\"token number\">3</span>   </span><span class=\"token comment\">/* 拒绝访问，Access permission denied */</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ABORT</span>        <span class=\"token expression\"><span class=\"token number\">4</span>   </span><span class=\"token comment\">/* 回调函数请求取消操作，Callback routine requested an abort */</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_BUSY</span>         <span class=\"token expression\"><span class=\"token number\">5</span>   </span><span class=\"token comment\">/* 数据库文件被锁定，The database file is locked */</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_LOCKED</span>       <span class=\"token expression\"><span class=\"token number\">6</span>   </span><span class=\"token comment\">/* 数据库的一个表被锁定，A table in the database is locked */</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOMEM</span>        <span class=\"token expression\"><span class=\"token number\">7</span>   </span><span class=\"token comment\">/* 某次 malloc 函数调用失败，A malloc () failed */</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_READONLY</span>     <span class=\"token expression\"><span class=\"token number\">8</span>   </span><span class=\"token comment\">/* 尝试写入一个只读数据库，Attempt to write a readonly database */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_INTERRUPT</span>    <span class=\"token expression\"><span class=\"token number\">9</span>   </span><span class=\"token comment\">/* 操作 sqlite3_interrupt 函数被中断，Operation terminated by sqlite3_interrupt ()*/</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_IOERR</span>       <span class=\"token expression\"><span class=\"token number\">10</span>   </span><span class=\"token comment\">/* 发生磁盘 I/O 错误，Some kind of disk I/O error occurred */</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CORRUPT</span>     <span class=\"token expression\"><span class=\"token number\">11</span>   </span><span class=\"token comment\">/* 数据库磁盘映像不正确，The database disk image is malformed */</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTFOUND</span>    <span class=\"token expression\"><span class=\"token number\">12</span>   </span><span class=\"token comment\">/* 找不到表或记录，NOT USED. Table or record not found */</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_FULL</span>        <span class=\"token expression\"><span class=\"token number\">13</span>   </span><span class=\"token comment\">/* 数据库满而插入失败，Insertion failed because database is full */</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CANTOPEN</span>    <span class=\"token expression\"><span class=\"token number\">14</span>   </span><span class=\"token comment\">/* 无法打开数据库，Unable to open the database file */</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_PROTOCOL</span>    <span class=\"token expression\"><span class=\"token number\">15</span>   </span><span class=\"token comment\">/* 数据库锁定协议错误，NOT USED. Database lock protocol error */</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_EMPTY</span>       <span class=\"token expression\"><span class=\"token number\">16</span>   </span><span class=\"token comment\">/* 数据库为空，Database is empty */</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_SCHEMA</span>      <span class=\"token expression\"><span class=\"token number\">17</span>   </span><span class=\"token comment\">/* 数据库结构发生改变，The database schema changed */</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_TOOBIG</span>      <span class=\"token expression\"><span class=\"token number\">18</span>   </span><span class=\"token comment\">/* 数据大小超限，String or BLOB exceeds size limit */</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CONSTRAINT</span>  <span class=\"token expression\"><span class=\"token number\">19</span>   </span><span class=\"token comment\">/* 约束违反，Abort due to constraint violation */</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_MISMATCH</span>    <span class=\"token expression\"><span class=\"token number\">20</span>   </span><span class=\"token comment\">/* 数据类型不匹配，Data type mismatch */</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_MISUSE</span>      <span class=\"token expression\"><span class=\"token number\">21</span>   </span><span class=\"token comment\">/* 库使用不正确，Library used incorrectly */</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOLFS</span>       <span class=\"token expression\"><span class=\"token number\">22</span>   </span><span class=\"token comment\">/* 使用了操作系统不支持的功能，Uses OS features not supported on host */</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_AUTH</span>        <span class=\"token expression\"><span class=\"token number\">23</span>   </span><span class=\"token comment\">/* 授权失败，Authorization denied */</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_FORMAT</span>      <span class=\"token expression\"><span class=\"token number\">24</span>   </span><span class=\"token comment\">/* 附加数据库格式错误，Auxiliary database format error */</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_RANGE</span>       <span class=\"token expression\"><span class=\"token number\">25</span>   </span><span class=\"token comment\">/* sqlite3_bind 的第 2 给参数超出范围，2nd parameter to sqlite3_bind out of range */</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTADB</span>      <span class=\"token expression\"><span class=\"token number\">26</span>   </span><span class=\"token comment\">/* 不是数据库文件，File opened that is not a database file */</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTICE</span>      <span class=\"token expression\"><span class=\"token number\">27</span>   </span><span class=\"token comment\">/* Notifications from sqlite3_log() */</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_WARNING</span>     <span class=\"token expression\"><span class=\"token number\">28</span>   </span><span class=\"token comment\">/* Warnings from sqlite3_log() */</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ROW</span>         <span class=\"token expression\"><span class=\"token number\">100</span>  </span><span class=\"token comment\">/* sqlite3_step 产生一个就绪行，sqlite3_step () has another row ready */</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_DONE</span>        <span class=\"token expression\"><span class=\"token number\">101</span>  </span><span class=\"token comment\">/* sqlite3_step 执行完成，sqlite3_step () has finished executing */</span></span></pre></td></tr></table></figure><h2 id=\"api-函数\"><a class=\"anchor\" href=\"#api-函数\">#</a> API 函数</h2>\n<p>以下只列举嵌入式环境下常用的 API：</p>\n<h3 id=\"sqlite3_open\"><a class=\"anchor\" href=\"#sqlite3_open\">#</a> sqlite3_open</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_open</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span>   <span class=\"token comment\">/* Database filename (UTF-8) */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppDb          <span class=\"token comment\">/* OUT: SQLite db handle */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数用于打开由  <code>filename</code>  参数指定的 SQLite 数据库文件，并返回一个  <code>*ppDb</code>  数据库连接句柄，即使发生错误； <code>filename</code>  为 UTF-8 编码，如果 SQLite 无法分配内存来保存 sqlite3 对象，则会在  <code>*ppDb</code>  中写入一个 NULL，而不是指向 sqlite3 对象的指针。如果数据库成功打开，则返回 SQLITE_OK。否则返回错误代码。sqlite3_errmsg () 可用于获取任何 sqlite3_open () 执行失败后错误的英文描述。</p>\n<p>如果  <code>filename</code>  参数是  <code>':memory:'</code>  ，那么 sqlite3_open () 将会在 RAM 中创建一个内存数据库，这只会在数据库连接关闭前持续。</p>\n<p>如果  <code>filename</code>  参数是  <code>''</code>  （空字符串），则将创建一个专用的临时磁盘数据库；一旦数据库连接关闭，此专用数据库将被自动删除。</p>\n<h3 id=\"sqlite3_close\"><a class=\"anchor\" href=\"#sqlite3_close\">#</a> sqlite3_close</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>sqlite3<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数与 sqlite3_open 函数相对应，用于关闭之前调用 sqlite3_open () 打开的数据库连接，此时所有与连接相关的语句都应在连接关闭之前完成。</p>\n<p>如果还有查询没有完成，sqlite3_close () 将返回 SQLITE_BUSY 禁止关闭的错误消息；当成功执行，将销毁 sqlite3 对象并释放所有关联资源时返回 SQLITE_OK。</p>\n<h3 id=\"sqlite3_exec\"><a class=\"anchor\" href=\"#sqlite3_exec\">#</a> sqlite3_exec</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_exec</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">/* An open database */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">,</span>                           <span class=\"token comment\">/* SQL to be evaluated */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Callback function */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>                                    <span class=\"token comment\">/* 1st argument to callback */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>errmsg                              <span class=\"token comment\">/* Error msg written here */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>sqlite3_exec () 提供了一个执行 SQL 命令的快捷方式，SQL 命令由  <code>*sql</code>  参数提供；它是 sqlite3_prepare_v2 () 、sqlite3_step () 和 sqlite3_finalize () 的包装函数，允许应用程序运行多个 SQL 语句，而无需编写大量 C 代码。</p>\n<p>sqlite3_exec () 程序解析并执行由  <code>*sql</code>  参数所给的每个命令，直到字符串结束或者遇到错误为止。此参数等同于使用 shell 实现所有的 sqlite 功能命令，所以这个  <code>*sql</code>  就是对应 sqlite 功能命令的 “字符串”。</p>\n<p><code>callback</code>  是执行  <code>*sql</code>  对应的功能命令后，所调取的函数，即回调函数；用于将执行结果进行分析处理。其原型如下：</p>\n<p><code>typedef int (*sqlite3_callback)(void *data, int argc, char **argv, char **azColName);</code></p>\n<p><strong>sqlite3_callback</strong> 参数：</p>\n<ul>\n<li>data：由 sqlite3_exec 传入的参数  <code>void*</code>  ，或者说是指针参数。</li>\n<li>argc：查询到的这一条记录由多少个字段（多少列）。</li>\n<li>argv：该参数是双指针，查询出来的数据都保存在这里，它是一个一维数组，每一个元素都是一个  <code>char*</code>   , 是一个字段内容，所以这个参数就可以不是单字节，而是可以为字符串等不定长度的数值，用字符串表示，以  <code>'\\0'</code>  结尾。</li>\n<li>azColName：该参数是双指针，与  <code>argv</code>  是对应的，表示这个字段的字段名称。</li>\n</ul>\n<p>note：除  <code>data</code>  传入参数外，回调函数的其它参数一定是 SQL 命令执行结果的进一步处理；此外，需要特别注意的是：回调函数多数时候不是执行 1 次，而是会循环执行 n 次，例如当我们执行 SELECT 命令时，往往输出的结果会是多行，假设有 n 行，那么就会执行 n 次回调函数。</p>\n<p>实例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sqlite3.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>NotUsed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>azColName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = %s\\n\"</span><span class=\"token punctuation\">,</span> azColName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zErrMsg <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc<span class=\"token operator\">!=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Usage: %s DATABASE SQL-STATEMENT\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  rc <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open database: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqlite3_errmsg</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  rc <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_exec</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rc<span class=\"token operator\">!=</span>SQLITE_OK <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SQL error: %s\\n\"</span><span class=\"token punctuation\">,</span> zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">sqlite3_free</span><span class=\"token punctuation\">(</span>zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sqlite3_get_table\"><a class=\"anchor\" href=\"#sqlite3_get_table\">#</a> sqlite3_get_table</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_get_table</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>          <span class=\"token comment\">/* An open database */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zSql<span class=\"token punctuation\">,</span>     <span class=\"token comment\">/* SQL to be evaluated */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>pazResult<span class=\"token punctuation\">,</span>    <span class=\"token comment\">/* Results of the query */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pnRow<span class=\"token punctuation\">,</span>           <span class=\"token comment\">/* Number of result rows written here */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pnColumn<span class=\"token punctuation\">,</span>        <span class=\"token comment\">/* Number of result columns written here */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pzErrmsg       <span class=\"token comment\">/* Error msg written here */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在最新的文档中，表明这该函数是一个传统的 API，保留该 API 是为了向后兼容；因此，不建议使用此接口。</p>\n<p>输入参数：</p>\n<ul>\n<li>\n<p>db：打开数据库文件后返回的句柄。</p>\n</li>\n<li>\n<p>zSql：需要执行的 SQL 命令字符串。</p>\n</li>\n<li>\n<p>pazResult：对字符串数组的引用。使用此引用传回查询结果。传回的值必须通过调用  <code>sqlite3_free_table()</code>  。</p>\n</li>\n<li>\n<p>pnRow：查询返回的行数，不包括列名。</p>\n</li>\n<li>\n<p>pnColumn：查询返回的列数。</p>\n</li>\n<li>\n<p>pzErrmsg：对字符串的可选引用。如果发生错误，引用将被设置为一条错误消息。该应用程序负责 释放的消息  <code>sqlite3_free()</code>  。如果没有错误发生，引用将被设置为 NULL。引用可能为 NULL。</p>\n</li>\n</ul>\n<p>和 sqlite3_exec () 这种使用回调函数的方式不同，sqlite3_get_table () 的功能要显得更加简便。它通过控制语句的传入，直接将参数赋值给指针传出。</p>\n<p>note：虽然 sqlite3_get_table () 的使用较于 sqlite3_exec () 更为简便，但官方不推荐使用的，在实际当中它更趋于用作测试 API，并且根据官方建议，推荐使用 sqlite3_prepare_v2 ()、sqlite3_column_xxx () 这些 API 组合。</p>\n<h3 id=\"sqlite3_free_table\"><a class=\"anchor\" href=\"#sqlite3_free_table\">#</a> sqlite3_free_table</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">void</span> <span class=\"token function\">sqlite3_free_table</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数与 sqlite3_get_table 函数相对应，在应用程序完成 sqlite3_get_table 的结果使用后，它必须将查询结果的指针  <code>pazResult</code>  传递给 sqlite3_free_table () 以释放分配的内存。</p>\n<h3 id=\"sqlite3_prepare_v2\"><a class=\"anchor\" href=\"#sqlite3_prepare_v2\">#</a> sqlite3_prepare_v2</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_prepare_v2</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>            <span class=\"token comment\">/* Database handle */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zSql<span class=\"token punctuation\">,</span>       <span class=\"token comment\">/* SQL statement, UTF-8 encoded */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> nByte<span class=\"token punctuation\">,</span>              <span class=\"token comment\">/* Maximum length of zSql in bytes. */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  sqlite3_stmt <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppStmt<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* OUT: Statement handle */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pzTail     <span class=\"token comment\">/* OUT: Pointer to unused portion of zSql */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输入参数：</p>\n<ul>\n<li>db：从先前成功调用 sqlite3_open（）、sqlite3_open v2（）或 sqlite3_open16（）获得的 SQLite 数据库。</li>\n<li>zSql：要执行的 SQL 语句（可以包含未赋值的变量）</li>\n<li>nByte：如果  <code>nByte</code>  参数为负，则  <code>zSql</code>  被读取到第一个空结束终止符。如果  <code>nByte</code>  为正，则它是从  <code>zSql</code>  读取的字节数。</li>\n<li>ppStmt：解析编译出的 SQL 语句实例。</li>\n<li>pzTail：如果  <code>pzTail</code>  不为空，那么  <code>*pzTail</code>  将指向  <code>zSql</code>  中第一个 SQL 语句结束后的第一个字节。</li>\n</ul>\n<h3 id=\"sqlite3_bind_xxx\"><a class=\"anchor\" href=\"#sqlite3_bind_xxx\">#</a> sqlite3_bind_xxx</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_blob</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_blob64</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> sqlite3_uint64 bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_double</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span>               val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_int</span><span class=\"token punctuation\">(</span>       sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>                  val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_int64</span><span class=\"token punctuation\">(</span>     sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> sqlite3_int64        val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_null</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text16</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text64</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> sqlite3_uint64 bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_value</span><span class=\"token punctuation\">(</span>     sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sqlite3_value<span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// SQLITE_API int sqlite3_bind_pointer(   sqlite3_stmt*, int, void*, const char*,void(*)(void*));</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_zeroblob</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span>                           <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_zeroblob64</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span>                           sqlite3_uint64 bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mem_callback</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于绑定任何参数值。</p>\n<ul>\n<li>stmt：指向一个被 sqlite3_prepare_v2 () 等接口编译的语句句柄，它可被 sqlite3_step () 执行。最后用 sqlite3_finalize () 来释放它。</li>\n<li>pidx：SQL 参数（每列元素）的索引值，参数索引值从 1 开始。</li>\n<li>val：要绑定的数据值。</li>\n<li>bytes：数据值的大小，以字节（不是字符）为单位。通常，长度不包括任何空结束符。如果  <code>val</code>  是一个以空结束的字符串，把该值设为为负值（-1），则会自动计算长度。</li>\n<li>mem_callback：一个指向内存释放函数的函数指针。此函数用于在 SQLite 处理完 BLOB 或 string 之后对其进行处理，主要用来释放  <code>val</code>  的内存缓冲区；如果缓冲区是用 sqlite3_malloc () 分配的，则可以直接传递对 sqlite3_free () 的引用。也可以使用特殊标志  <code>SQLITE_STATIC</code>  和  <code>SQLITE_TRANSIENT</code>  ； <code>SQLITE_STATIC</code>  说明数据值为常量，位于静态的非托管空间中，不需要释放，而  <code>SQLITE_TRANSIENT</code>  会使得对   <code>val</code>  数据做一份拷贝。</li>\n</ul>\n<h3 id=\"sqlite3_step\"><a class=\"anchor\" href=\"#sqlite3_step\">#</a> sqlite3_step</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_step</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在调用 sqlite3_prepare_v2 () 等接口编译的语句句柄后，必须调用此函数一次或多次以计算语句。</p>\n<p>返回值：</p>\n<ul>\n<li>\n<p>SQLITE_BUSY：忙碌，数据库引擎无法锁定数据去完成其工作。可以重试该语句。</p>\n</li>\n<li>\n<p>SQLITE_DONE：意味着 SQL 语句执行完成且成功。一旦执行成功后，sqlite3_step () 就不应该被再次调用执行，除非我们使用 sqlite3_reset () 重置  <code>sqlite3_stmt</code>  数据。</p>\n</li>\n<li>\n<p>SQLITE_ROW：当返回的行数据较多时会出现，代表获得了一条有效数据行，此时可以通过 sqlite3_column_xxx 函数来取得数据；再次调用 sqlite3_step () 可取得下一条查询结果，直至返回  <code>SQLITE_DONE</code>  。</p>\n</li>\n<li>\n<p>SQLITE_ERROR：表示发生了运行时错误（例如约束冲突），此时可以通过 sqlite3_errmmsg () 取得相关的错误信息，并且不应再次调用 sqlite3_step () 。</p>\n</li>\n<li>\n<p>SQLITE_MISUSE：意味着这个例程被不适当地调用。可能是在已完成的准备好的语句上调用的，也可能是在以前返回  <code>SQLITE_ERROR</code>  或  <code>SQLITE_DONE</code>  的语句上调用的。或者可能是同一数据库连接同时被两个或多个线程使用。</p>\n</li>\n</ul>\n<h3 id=\"sqlite3_column_xxx\"><a class=\"anchor\" href=\"#sqlite3_column_xxx\">#</a> sqlite3_column_xxx</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          <span class=\"token function\">sqlite3_column_blob</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SQLITE_API <span class=\"token keyword\">double</span>               <span class=\"token function\">sqlite3_column_double</span><span class=\"token punctuation\">(</span> sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_int</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SQLITE_API sqlite3_int64        <span class=\"token function\">sqlite3_column_int64</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">sqlite3_column_text</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          <span class=\"token function\">sqlite3_column_text16</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SQLITE_API sqlite3_value<span class=\"token operator\">*</span>       <span class=\"token function\">sqlite3_column_value</span><span class=\"token punctuation\">(</span> sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_bytes</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_bytes16</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_type</span><span class=\"token punctuation\">(</span>   sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于从当前结果行中提取列值。</p>\n<ul>\n<li>stmt：指向一个被 sqlite3_prepare_v2 () 等接口编译的语句句柄，它可被 sqlite3_step () 执行。最后用 sqlite3_finalize () 来释放它。</li>\n<li>cidx：SQL 参数（每列元素）的索引值，参数索引值从 0 开始。</li>\n</ul>\n<p>返回结果：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">API 函数</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\">结果值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_blob</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">BLOB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_double</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">REAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_int</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">32 位 INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_int64</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">64 位 INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_text</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-8 TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_text16</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-16 TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_value</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">作为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9jM3JlZi92YWx1ZS5odG1s\">未受保护的 sqlite3_value</span> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_bytes</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">BLOB 或 UTF-8 TEXT 的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_bytes16</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-16 TEXT 的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_type</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">默认数据的类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sqlite3_reset\"><a class=\"anchor\" href=\"#sqlite3_reset\">#</a> sqlite3_reset</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_reset</span><span class=\"token punctuation\">(</span>sqlite3_stmt <span class=\"token operator\">*</span>pStmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于重置  <code>sqlite3_stmt</code>  数据，然后准备被重新执行。任何使用 sqlite3_bind_xxx 函数将值绑定到它们的 SQL 语句变量都将保留它们的值。使用 sqlite3_clear_bindings () 重置绑定。</p>\n<p>返回值：</p>\n<ul>\n<li>SQLITE_BUSY</li>\n<li>SQLITE_DONE</li>\n<li>SQLITE_ROW</li>\n</ul>\n<h2 id=\"操作流程\"><a class=\"anchor\" href=\"#操作流程\">#</a> 操作流程</h2>\n<p>使用 SQLite 数据库，最典型的函数操作流程（伪代码）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>伪代码</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* create a statement from an SQL string */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sqlite3_stmt <span class=\"token operator\">*</span>stmt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sqlite3_prepare_v2</span><span class=\"token punctuation\">(</span> db<span class=\"token punctuation\">,</span> sql_str<span class=\"token punctuation\">,</span> sql_str_len<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stmt<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SQLITE_OK <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* use the statement as many times as required */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* bind any parameter values */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">sqlite3_bind_xxx</span><span class=\"token punctuation\">(</span> stmt<span class=\"token punctuation\">,</span> param_idx<span class=\"token punctuation\">,</span> param_value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/* execute statement and step over each row of the result set */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sqlite3_step</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SQLITE_ROW <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">/* extract column values from the current result row */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            col_val <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_column_xxx</span><span class=\"token punctuation\">(</span> stmt<span class=\"token punctuation\">,</span> col_index <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* reset the statement so it may be used again */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">sqlite3_reset</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">sqlite3_clear_bindings</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* optional */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* destroy and release the statement */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">sqlite3_finalize</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>a、sqlite3_prepare 创建一个预处理对象。</p>\n<p>b、sqlite3_bind_xxx 绑定参数。</p>\n<p>c、循环执行 sqlite3_step 获取数据。</p>\n<p>d、sqlite3_column 从数据中取出每一段。</p>\n<p>e、释放 sqlite3_finalize 。</p>\n<p><strong>1、插入</strong></p>\n<p>sqlite3_open -&gt; sqlite3_prepare_v2 -&gt; sqlite3_bind_xxx -&gt; sqlite3_step -&gt; sqlite3_reset -&gt; sqlite3_finalize -&gt; sqlite3_close</p>\n<p><strong>2、查询</strong></p>\n<p>sqlite3_open -&gt; sqlite3_prepare_v2 -&gt; sqlite3_step -&gt; sqlite3_column_xxx -&gt; sqlite3_finalize -&gt; sqlite3_close</p>\n<p><strong>3、例子</strong></p>\n<p>略略略</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL2NpbnRyby5odG1s\">An Introduction To The SQLite C/C++ Interface</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL2NhcGkzcmVmLmh0bWw=\">C-language Interface Specification for SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9kYXRhdHlwZTMuaHRtbA==\">Datatypes In SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L3VzaW5nLXNxbGl0ZS85NzgxNDQ5Mzk0NTkyL3JlMjI5Lmh0bWw=\">Using sqlite3_bind_xxx()</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L3VzaW5nLXNxbGl0ZS85NzgxNDQ5Mzk0NTkyL3JlMjQ0Lmh0bWw=\">Using sqlite3_column_xxx()</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL3F1aWNrc3RhcnQuaHRtbA==\">Write Programs That Use SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTEyNjk5NjEzODEyMDk3MDMxI2hlYWRpbmctMjE=\">SQLite 常用 API (C)</span></p>\n",
            "tags": [
                "SQL"
            ]
        },
        {
            "id": "https://arachnid.cc/linux-system-constitute/",
            "url": "https://arachnid.cc/linux-system-constitute/",
            "title": "Linux 系统构成：bootloader、kernel、rootfs",
            "date_published": "2023-02-02T11:34:26.713Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>完整的 linux 系統需要以下部分：</p>\n<ul>\n<li>Bootloader\n<ul>\n<li>Device tree blob</li>\n<li>boot.img</li>\n</ul>\n</li>\n<li>Linux Kernel（Linux 内核）</li>\n<li>Root Filesystem（根目录文件系統）</li>\n</ul>\n<h1 id=\"bootloader\"><a class=\"anchor\" href=\"#bootloader\">#</a> bootloader</h1>\n<p>bootloader（引导装载程序）就是在操作系统内核运行之前运行的一段小程序。通过这段小程序，我们可以初始化硬件设备、建立内存空间的映射图，从而将系统的软硬件环境设置成一个合适的状态，以便为最终调用操作系统内核准备好正确的环境。</p>\n<p>常见的 bootloader 有 PC 平台的 Grub；嵌入式平台的 vivi, RedBoot, u-boot 等，其中 u-boot 在使用上最广泛，因此在嵌入式中又常称 linux 系统构成为 u-boot、kernel、rootfs。</p>\n<p>bootloader 是严重地依赖于硬件而实现的，特别是在嵌入式系统。因此，在嵌入式系统里建立一个通用的 bootloader 几乎是不可能的。尽管如此，我们仍然可以对 bootloader 归纳出一些通用的概念来，以指导用户进行特定的 bootloader 设计与实现。</p>\n<p>在嵌入式系统中，bootloader 的意义与作用相当于 PC 平台中的 BIOS + Grub，它对开发板上的主要部件如 CPU、SDRAM、FLASH、串口等进行了初始化，可以使用 bootloader 下载文件到开发板，可以浏览目录，可以烧录 flash，可以启动系统等，实际上，一个功能比较强大的 bootloader 已经相当于一个微型的操作系统了。</p>\n<p>总体上 bootloader 需要完成以下工作：</p>\n<ul>\n<li>\n<p>初始化 CPU 速度；</p>\n</li>\n<li>\n<p>初始化内存，包括初始化内存配置寄存器等；</p>\n</li>\n<li>\n<p>初始化中断控制器，在系统启动时，关闭中断，关闭看门狗；</p>\n</li>\n<li>\n<p>初始化串行端口（如果在目标上有的话）；</p>\n</li>\n<li>\n<p>启用指令 / 数据高速缓存；</p>\n</li>\n<li>\n<p>设置堆栈指针；</p>\n</li>\n<li>\n<p>设置参数区域并构造参数结构和标记（这是重要的一步，因为内核在标识根设备、页面大小、内存大小以及更多内容时可能需要使用引导参数）；</p>\n</li>\n<li>\n<p>执行 POST（加电自检）来标识存在的设备并报告有何问题；</p>\n</li>\n<li>\n<p>为电源管理提供挂起 / 恢复支持；</p>\n</li>\n<li>\n<p>传输操作系统内核镜像文件到目标机。也可以将操作系统内核镜像文件事先存放在 Flash 中，这样就不需要 bootLoader 和主机传输操作系统内核镜像文件，这通常是在做成产品的情况下使用。而一般在开发过程中，为了调试内核的方便，不将操作系统内核镜像文件固化在 Flash 中，这就需要主机和目标机进行文件传输；</p>\n</li>\n<li>\n<p>跳转到内核的开始，在此又分为 ROM 启动和 RAM 启动。所谓 ROM 启动就是用 XIP 技术直接在 Flash 中执行操作系统镜像文件；所谓 RAM 启动就是指把内核镜像从 Flash 复制到 RAM 中，然后再将 PC 指针跳转到 RAM 中的操作系统启动地址。</p>\n</li>\n</ul>\n<p>目前使用的主流<strong>嵌入式平台</strong>，几乎都是用 u-boot 作为启动引导，u-boot 有哪些突出的优点呢？</p>\n<p>① 开放源码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3UtYm9vdC91LWJvb3QlRUYlQkMlOUI=\">https://github.com/u-boot/u-boot；</span></p>\n<p>② 支持多种嵌入式操作系统内核，如 Linux、NetBSD, VxWorks, QNX, RTEMS, ARTOS, LynxOS, android；</p>\n<p>③ 支持多个处理器系列，如 PowerPC、ARM、x86、MIPS；</p>\n<p>④ 较高的可靠性和稳定性；</p>\n<p>⑤ 高度灵活的功能设置，适合 u-boot 调试、操作系统不同引导要求、产品发布等；</p>\n<p>⑥ 丰富的设备驱动源码，如串口、以太网、SDRAM、FLASH、LCD、NVRAM、EEPROM、RTC、键盘等；</p>\n<p>⑦ 较为丰富的开发调试文档与强大的网络技术支持。</p>\n<h1 id=\"kernel\"><a class=\"anchor\" href=\"#kernel\">#</a> kernel</h1>\n<p>kernel 即 linux 内核。内核源代码可以免费从<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VybmVsLm9yZy8=\">官网</span>获取，这是一个通用的内核，里面包含着内核支持的所有的硬件平台及驱动的所有代码，是一个大而全的内核源代码。</p>\n<p>在使用层面上，当嵌入式平台使用 linux 系统，那么最重要的就是 kernel 中驱动的移植；一般都不会从一个纯净的 kernel 中去进行移植操作，而是根据芯片厂商提供的 kernel 对特定的硬件平台及设备进行各种外设驱动相关的适配工作。</p>\n<h2 id=\"device-tree\"><a class=\"anchor\" href=\"#device-tree\">#</a> Device Tree</h2>\n<p>设备树（Device Tree）是描述计算机的特定硬件设备信息的数据结构，以便于操作系统的内核可以管理和使用这些硬件，包括 CPU 或 CPU，内存，总线和其他一些外设。</p>\n<p>老版本的 linux kernel 是没有设备树概念的，后来因为 SOC 的发展，kernel 中需要对这些新增的 SOC 进行支持，而这些代码都会编译到 kernel 中，会导致 kernel 日渐臃肿，于是后面就引入了在 PowerPC 等架构就已经采用的设备树。</p>\n<p><strong>1、dts (device tree source 设备树源文件)</strong><br />\n dts 文件是一种 ASCII 文本格式的设备树描述文件，此文件适合人类阅读主要是给用户看的。一个  <code>.dts</code>  文件对应一个 ARM 的设备，一般放置在  <code>arch/arm/boot/dts/</code>  中。</p>\n<p><strong>2、dtsi (device tree source include 设备树头文件)</strong><br />\n 由于  <code>.dts</code>  中包含了很多公共部分，linux 内核为了简化，将 Soc 公共部分提炼为  <code>.dtsi</code>  文件，类似 c 语言中的  <code>.h</code>  文件。当然，和 C 语言的头文件类似，.dtsi 也可以 include 其他的  <code>.dtsi</code>  ，譬如几乎所有的 ARM SoC 的  <code>.dtsi</code>  都引用了 <code>skeleton.dtsi</code>  。对于同一个节点的设置情况， <code>.dts</code>  中的配置会覆盖  <code>.dtsi</code>  中的配置；因此， <code>.dtsi</code>  一般写 Soc 共性部分，而  <code>.dts</code>  一般写目标单板特性部分，所以一般  <code>.dts</code>  包含并重写部分  <code>.dtsi</code> 。</p>\n<p><strong>3、dtb (device tree blob 设备树二进制文件)</strong><br />\n <code>.dts</code>  通过 dtc 编译工具编译成  <code>.dtb</code>  文件，被编译后的设备树文件与内核一同放入到存储介质中，当内核启动时读取设备树文件，就可以动态的将板级信息写入到内核中。</p>\n<h1 id=\"rootfs\"><a class=\"anchor\" href=\"#rootfs\">#</a> rootfs</h1>\n<p>rootfs（Root Filesystem）即根目录文件系统，是 kernel 启动后挂载的第一个文件系统。rootfs 和 kernel 是分开的，但单独的 kernel 没有 rootfs 是没法正常工作的。在系统终端执行  <code>cd /</code>  即可看到当前的文件系统内容了。</p>\n<p>现在有许多制作 rootfs 的工具，如 busybox，buildroot，Yocto 等。其中 buildroot 中包含了 busybox 的功能，只需要简单的操作就可以生成一个 rootfs 了。</p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9xMjQ4MjY5NjczLnBpeG5ldC5uZXQvYmxvZy9wb3N0LzY5NTcwMjc5\">完整的 linux 系統：bootloader、linux kernel（linux 內核）、rootfile（根文件系統）</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5lbWJlZGRlZGxpbnV4Lm9yZy5jbi9lbWJsaW51eGFwcGRldi8=\">嵌入式 linux 应用开发</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9oYWNrbWQuaW8vQGEyOTY1NDA2OC9ISjF1VVlFOHI=\">Linux 筆記 2</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDg0MjAxMjYvd2hhdC1pcy10aGUtZGlmZmVyZW5jZS1iZXR3ZWVuLWR0cy1maWxlLWFuZC1kdHNpLWZpbGU=\">What is the difference between .dts file and .dtsi file?</span></p>\n",
            "tags": [
                "Linux"
            ]
        },
        {
            "id": "https://arachnid.cc/ubuntu-ftp-create/",
            "url": "https://arachnid.cc/ubuntu-ftp-create/",
            "title": "Ubuntu下 FTP的搭建配置",
            "date_published": "2022-11-03T13:13:57.653Z",
            "content_html": "<blockquote>\n<p>平台：Ubuntu 18.04.6</p>\n<p>vsftpd 官网：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWN1cml0eS5hcHBzcG90LmNvbS92c2Z0cGQuaHRtbA==\">https://security.appspot.com/vsftpd.html</span></p>\n</blockquote>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<p>安装 FTP 服务，命令行输入：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> vsftpd</pre></td></tr></table></figure><h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<p>先备份配置文件：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/vsftpd.conf /etc/vsftpd.conf.back</pre></td></tr></table></figure><p>vim 进入编辑信息：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">vim</span> /etc/vsftpd.conf</pre></td></tr></table></figure><p>然后增加或修改以下信息：</p>\n<figure class=\"highlight makefile\"><figcaption data-lang=\"makefile\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Example config file /etc/vsftpd.conf</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># The default compiled in settings are fairly paranoid. This sample file</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># loosens things up a bit, to make the ftp daemon more usable.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># Please see vsftpd.conf.5 for all compiled in defaults.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\"># capabilities.</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># Run standalone?  vsftpd can run either from an inetd or as a standalone</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\"># daemon started from an initscript.</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>listen<span class=\"token operator\">=</span>NO <span class=\"token comment\">#是否开启侦听状态</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\"># This directive enables listening on IPv6 sockets. By default, listening</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\"># on the IPv6 \"any\" address (::) will accept connections from both IPv6</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\"># and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\"># sockets. If you want that (perhaps because you want to listen on specific</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\"># addresses) then you must run two copies of vsftpd with two configuration</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\"># files.</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>listen_ipv6<span class=\"token operator\">=</span>YES <span class=\"token comment\">#如果能使用 ipv6 的可以打开使用；只能用 ipv4 的必须注释掉，不然重启不了</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\"># Allow anonymous FTP? (Disabled by default).</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>anonymous_enable<span class=\"token operator\">=</span>YES <span class=\"token comment\">#允许匿名用户登录</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\"># Uncomment this to allow local users to log in.</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>local_enable<span class=\"token operator\">=</span>YES <span class=\"token comment\">#允许实名登录</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># Uncomment this to enable any form of FTP write command.</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>write_enable<span class=\"token operator\">=</span>YES <span class=\"token comment\">#允许实名用户进行写操作</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\"># Default umask for local users is 077. You may wish to change this to 022,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token comment\"># if your users expect that (022 is used by most other ftpd's)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">#local_umask=022</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\"># Uncomment this to allow the anonymous FTP user to upload files. This only</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token comment\"># has an effect if the above global write enable is activated. Also, you will</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token comment\"># obviously need to create a directory writable by the FTP user.</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>anon_upload_enable<span class=\"token operator\">=</span>YES <span class=\"token comment\">#允许匿名用户上传文件</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token comment\"># Uncomment this if you want the anonymous FTP user to be able to create</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token comment\"># new directories.</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>anon_mkdir_write_enable<span class=\"token operator\">=</span>YES <span class=\"token comment\">#允许匿名用户创建目录</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\"># Activate directory messages - messages given to remote users when they</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\"># go into a certain directory.</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>dirmessage_enable<span class=\"token operator\">=</span>YES</pre></td></tr><tr><td data-num=\"49\"></td><td><pre></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token comment\"># If enabled, vsftpd will display directory listings with the time</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token comment\"># in  your  local  time  zone.  The default is to display GMT. The</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token comment\"># times returned by the MDTM FTP command are also affected by this</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\"># option.</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>use_localtime<span class=\"token operator\">=</span>YES</pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\"># Activate logging of uploads/downloads.</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>xferlog_enable<span class=\"token operator\">=</span>YES</pre></td></tr><tr><td data-num=\"58\"></td><td><pre></pre></td></tr><tr><td data-num=\"59\"></td><td><pre><span class=\"token comment\"># Make sure PORT transfer connections originate from port 20 (ftp-data).</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>connect_from_port_20<span class=\"token operator\">=</span>YES</pre></td></tr><tr><td data-num=\"61\"></td><td><pre></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token comment\"># If you want, you can arrange for uploaded anonymous files to be owned by</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token comment\"># a different user. Note! Using \"root\" for uploaded files is not</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre><span class=\"token comment\"># recommended!</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">#chown_uploads=YES</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre><span class=\"token comment\">#chown_username=whoever</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre></pre></td></tr><tr><td data-num=\"68\"></td><td><pre><span class=\"token comment\"># You may override where the log file goes if you like. The default is shown</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre><span class=\"token comment\"># below.</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre><span class=\"token comment\">#xferlog_file=/var/log/vsftpd.log</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre></pre></td></tr><tr><td data-num=\"72\"></td><td><pre><span class=\"token comment\"># If you want, you can have your log file in standard ftpd xferlog format.</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre><span class=\"token comment\"># Note that the default log file location is /var/log/xferlog in this case.</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token comment\">#xferlog_std_format=YES</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token comment\"># You may change the default value for timing out an idle session.</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre><span class=\"token comment\">#idle_session_timeout=600</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre><span class=\"token comment\"># You may change the default value for timing out a data connection.</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token comment\">#data_connection_timeout=120</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre></pre></td></tr><tr><td data-num=\"82\"></td><td><pre><span class=\"token comment\"># It is recommended that you define on your system a unique user which the</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre><span class=\"token comment\"># ftp server can use as a totally isolated and unprivileged user.</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre><span class=\"token comment\">#nopriv_user=ftpsecure</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre></pre></td></tr><tr><td data-num=\"86\"></td><td><pre><span class=\"token comment\"># Enable this and the server will recognise asynchronous ABOR requests. Not</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre><span class=\"token comment\"># recommended for security (the code is non-trivial). Not enabling it,</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre><span class=\"token comment\"># however, may confuse older FTP clients.</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token comment\">#async_abor_enable=YES</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre></pre></td></tr><tr><td data-num=\"91\"></td><td><pre><span class=\"token comment\"># By default the server will pretend to allow ASCII mode but in fact ignore</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre><span class=\"token comment\"># the request. Turn on the below options to have the server actually do ASCII</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre><span class=\"token comment\"># mangling on files when in ASCII mode.</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre><span class=\"token comment\"># Beware that on some FTP servers, ASCII support allows a denial of service</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre><span class=\"token comment\"># attack (DoS) via the command \"SIZE /big/file\" in ASCII mode. vsftpd</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token comment\"># predicted this attack and has always been safe, reporting the size of the</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre><span class=\"token comment\"># raw file.</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre><span class=\"token comment\"># ASCII mangling is a horrible feature of the protocol.</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre><span class=\"token comment\">#ascii_upload_enable=YES</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre><span class=\"token comment\">#ascii_download_enable=YES</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre></pre></td></tr><tr><td data-num=\"102\"></td><td><pre><span class=\"token comment\"># You may fully customise the login banner string:</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre><span class=\"token comment\">#ftpd_banner=Welcome to blah FTP service.</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre></pre></td></tr><tr><td data-num=\"105\"></td><td><pre><span class=\"token comment\"># You may specify a file of disallowed anonymous e-mail addresses. Apparently</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre><span class=\"token comment\"># useful for combatting certain DoS attacks.</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token comment\">#deny_email_enable=YES</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre><span class=\"token comment\"># (default follows)</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre><span class=\"token comment\">#banned_email_file=/etc/vsftpd.banned_emails</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token comment\"># You may restrict local users to their home directories.  See the FAQ for</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token comment\"># the possible risks in this before using chroot_local_user or</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre><span class=\"token comment\"># chroot_list_enable below.</span></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>chroot_local_user<span class=\"token operator\">=</span>YES <span class=\"token comment\">#用户访问将被限制在当前目录</span></pre></td></tr><tr><td data-num=\"115\"></td><td><pre></pre></td></tr><tr><td data-num=\"116\"></td><td><pre><span class=\"token comment\"># You may specify an explicit list of local users to chroot() to their home</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre><span class=\"token comment\"># directory. If chroot_local_user is YES, then this list becomes a list of</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre><span class=\"token comment\"># users to NOT chroot().</span></pre></td></tr><tr><td data-num=\"119\"></td><td><pre><span class=\"token comment\"># (Warning! chroot'ing can be very dangerous. If using chroot, make sure that</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre><span class=\"token comment\"># the user does not have write access to the top level directory within the</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token comment\"># chroot)</span></pre></td></tr><tr><td data-num=\"122\"></td><td><pre><span class=\"token comment\">#chroot_local_user=YES</span></pre></td></tr><tr><td data-num=\"123\"></td><td><pre><span class=\"token comment\">#chroot_list_enable=YES</span></pre></td></tr><tr><td data-num=\"124\"></td><td><pre><span class=\"token comment\"># (default follows)</span></pre></td></tr><tr><td data-num=\"125\"></td><td><pre><span class=\"token comment\">#chroot_list_file=/etc/vsftpd.chroot_list</span></pre></td></tr><tr><td data-num=\"126\"></td><td><pre></pre></td></tr><tr><td data-num=\"127\"></td><td><pre><span class=\"token comment\"># You may activate the \"-R\" option to the builtin ls. This is disabled by</span></pre></td></tr><tr><td data-num=\"128\"></td><td><pre><span class=\"token comment\"># default to avoid remote users being able to cause excessive I/O on large</span></pre></td></tr><tr><td data-num=\"129\"></td><td><pre><span class=\"token comment\"># sites. However, some broken FTP clients such as \"ncftp\" and \"mirror\" assume</span></pre></td></tr><tr><td data-num=\"130\"></td><td><pre><span class=\"token comment\"># the presence of the \"-R\" option, so there is a strong case for enabling it.</span></pre></td></tr><tr><td data-num=\"131\"></td><td><pre><span class=\"token comment\">#ls_recurse_enable=YES</span></pre></td></tr><tr><td data-num=\"132\"></td><td><pre></pre></td></tr><tr><td data-num=\"133\"></td><td><pre><span class=\"token comment\"># Customization</span></pre></td></tr><tr><td data-num=\"134\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"135\"></td><td><pre><span class=\"token comment\"># Some of vsftpd's settings don't fit the filesystem layout by</span></pre></td></tr><tr><td data-num=\"136\"></td><td><pre><span class=\"token comment\"># default.</span></pre></td></tr><tr><td data-num=\"137\"></td><td><pre><span class=\"token comment\">#</span></pre></td></tr><tr><td data-num=\"138\"></td><td><pre><span class=\"token comment\"># This option should be the name of a directory which is empty.  Also, the</span></pre></td></tr><tr><td data-num=\"139\"></td><td><pre><span class=\"token comment\"># directory should not be writable by the ftp user. This directory is used</span></pre></td></tr><tr><td data-num=\"140\"></td><td><pre><span class=\"token comment\"># as a secure chroot() jail at times vsftpd does not require filesystem</span></pre></td></tr><tr><td data-num=\"141\"></td><td><pre><span class=\"token comment\"># access.</span></pre></td></tr><tr><td data-num=\"142\"></td><td><pre>secure_chroot_dir<span class=\"token operator\">=</span>/var/run/vsftpd/empty</pre></td></tr><tr><td data-num=\"143\"></td><td><pre></pre></td></tr><tr><td data-num=\"144\"></td><td><pre><span class=\"token comment\"># This string is the name of the PAM service vsftpd will use.</span></pre></td></tr><tr><td data-num=\"145\"></td><td><pre>pam_service_name<span class=\"token operator\">=</span>vsftpd</pre></td></tr><tr><td data-num=\"146\"></td><td><pre></pre></td></tr><tr><td data-num=\"147\"></td><td><pre><span class=\"token comment\"># This option specifies the location of the RSA certificate to use for SSL</span></pre></td></tr><tr><td data-num=\"148\"></td><td><pre><span class=\"token comment\"># encrypted connections.</span></pre></td></tr><tr><td data-num=\"149\"></td><td><pre>rsa_cert_file<span class=\"token operator\">=</span>/etc/ssl/certs/ssl-cert-snakeoil.pem</pre></td></tr><tr><td data-num=\"150\"></td><td><pre>rsa_private_key_file<span class=\"token operator\">=</span>/etc/ssl/<span class=\"token keyword\">private</span>/ssl-cert-snakeoil.key</pre></td></tr><tr><td data-num=\"151\"></td><td><pre>ssl_enable<span class=\"token operator\">=</span>NO</pre></td></tr><tr><td data-num=\"152\"></td><td><pre></pre></td></tr><tr><td data-num=\"153\"></td><td><pre></pre></td></tr><tr><td data-num=\"154\"></td><td><pre><span class=\"token comment\"># Uncomment this to indicate that vsftpd use a utf8 filesystem.</span></pre></td></tr><tr><td data-num=\"155\"></td><td><pre>utf8_filesystem<span class=\"token operator\">=</span>YES</pre></td></tr><tr><td data-num=\"156\"></td><td><pre></pre></td></tr><tr><td data-num=\"157\"></td><td><pre></pre></td></tr><tr><td data-num=\"158\"></td><td><pre>no_anon_password<span class=\"token operator\">=</span>YES <span class=\"token comment\">#匿名登录是否需要密码</span></pre></td></tr><tr><td data-num=\"159\"></td><td><pre>anon_root<span class=\"token operator\">=</span>/home/frd_lzy <span class=\"token comment\">#匿名登录访问的文件路径</span></pre></td></tr><tr><td data-num=\"160\"></td><td><pre></pre></td></tr><tr><td data-num=\"161\"></td><td><pre>local_root<span class=\"token operator\">=</span>/projects <span class=\"token comment\">#实名登录访问的文件路径</span></pre></td></tr><tr><td data-num=\"162\"></td><td><pre></pre></td></tr><tr><td data-num=\"163\"></td><td><pre>allow_writeable_chroot<span class=\"token operator\">=</span>YES</pre></td></tr></table></figure><p>编辑完成后， <code>:wq</code>  保存退出。</p>\n<h1 id=\"重新加载配置文件\"><a class=\"anchor\" href=\"#重新加载配置文件\">#</a> 重新加载配置文件</h1>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> /etc/init.d/vsftpd restart</pre></td></tr></table></figure><h1 id=\"启动服务\"><a class=\"anchor\" href=\"#启动服务\">#</a> 启动服务</h1>\n<p>在加载完后，重启服务器：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl restart vsftpd</pre></td></tr></table></figure><p>查看服务启动状态：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl status vsftpd</pre></td></tr></table></figure><p><img data-src=\"image-20221106152005206.png\" alt=\"image-20221106152005206\" /></p>\n<p>设置开机启动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> vsftpd</pre></td></tr></table></figure><p>如果想关闭开机启动：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl disable vsftpd</pre></td></tr></table></figure><h1 id=\"ftp连接\"><a class=\"anchor\" href=\"#ftp连接\">#</a> FTP 连接</h1>\n<p>本机连接：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ftp</span> <span class=\"token number\">127.0</span>.0.1</pre></td></tr></table></figure><p>其它电脑连接：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">ftp</span> <span class=\"token function\">ip</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># eg:ftp 192.168.0.3</span></pre></td></tr></table></figure><p>1、输入用户名：（1）匿名：anonymous 或 ftp （2）主机用户名：即你当前主机名。</p>\n<p>2、回车。</p>\n<p>3、如果需要密码则进行相应输入，这里上面配置设了匿名登录不需要密码，所以以匿名登录时没有提示输入密码。</p>\n<p>4、进入到相应的用户访问根目录里（ps：即进入到配置文件中设置的登录访问的文件路径，可以用  <code>ls</code>  查看是否对应上访问的文件目录），这样就可以愉快的玩耍了；输入：  <code>quit</code>  退出。</p>\n<p>eg：本地连接并退出，如下图：</p>\n<p><img data-src=\"image-20221106164252568.png\" alt=\"image-20221106164252568\" /></p>\n<p>windows 下可视化文件访问：按  <code>Win</code>  +  <code>E</code>  快捷键，调用文件资源管理器，输入访问地址，回车：</p>\n<p><img data-src=\"image-20221106160826118.png\" alt=\"image-20221106160826118\" /></p>\n<p>windows 下命令行文件访问：同样按  <code>Win</code>  +  <code>E</code>  快捷键，调用文件资源管理器，然后在输写框跟上面 linux 访问连接一样输入  <code>ftp ip</code>  ，即可跳到 ftp 操作控制台中：</p>\n<p><img data-src=\"image-20221106161411644.png\" alt=\"image-20221106161411644\" /></p>\n<h1 id=\"ftp客户端常用命令\"><a class=\"anchor\" href=\"#ftp客户端常用命令\">#</a> FTP 客户端常用命令</h1>\n<p>在登录进入 ftp 后，可以使用  <code>help</code>  查看可以使用哪些指令操作：</p>\n<p><img data-src=\"image-20221106163512272.png\" alt=\"image-20221106163512272\" /></p>\n<ul>\n<li>\n<p>ls：和 linux 上的 ls 命令类似</p>\n</li>\n<li>\n<p>Ctrl+Shift + L：清屏</p>\n</li>\n<li>\n<p>put：使用  <code>put [本地文件路径+名称]</code>  上传</p>\n</li>\n<li>\n<p>get：使用  <code>get [远程文件路径+名称]</code>  下载</p>\n</li>\n<li>\n<p>mput：批量上传多个文件  <code>mput 文件名1 文件名2</code></p>\n</li>\n<li>\n<p>mget：批量获取多个文件  <code>mget 文件名1 文件名2</code></p>\n</li>\n<li>\n<p>prompt：屏蔽批量输出信息，批量上传下载文件就不需要一直回车确认了</p>\n</li>\n<li>\n<p>quit：退出 ftp 访问</p>\n</li>\n</ul>\n",
            "tags": [
                "history",
                "Linux",
                "Ubuntu"
            ]
        },
        {
            "id": "https://arachnid.cc/using-wireshark/",
            "url": "https://arachnid.cc/using-wireshark/",
            "title": "wireshark 使用",
            "date_published": "2022-10-05T07:55:39.000Z",
            "content_html": "<p>官方说明：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvSG9tZQ==\">https://wiki.wireshark.org/Home</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkLw==\">https://www.wireshark.org/docs/wsug_html_chunked/</span></p>\n<h1 id=\"着色规则\"><a class=\"anchor\" href=\"#着色规则\">#</a> 着色规则</h1>\n<p>在 wireshark 监控界面上，不同的报文会显示不一样样的颜色，它们分别表示不同的含义；而这些颜色，都是是由着色规则设置的：</p>\n<p><img data-src=\"image-20221006162351042.png\" alt=\"image-20221006162351042\" /></p>\n<p>在默认的着色规则中，一般黑色背景代表报文的各类错误，红色背景代表各类异常情景，其它颜色代表正常。</p>\n<p>官方的说明可以看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQ3VzdENvbG9yaXphdGlvblNlY3Rpb24uaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChCustColorizationSection.html</span></p>\n<p>着色规则分析：</p>\n<p><strong>1、Bad TCP：</strong> tcp.analysis.flags &amp;&amp; !tcp.analysis.window_update &amp;&amp; !tcp.analysis.keep_alive &amp;&amp; !tcp.analysis.keep_alive_ack</p>\n<p>即 TCP 包损坏，通常表示为重传，乱序，丢包，重复响应等都在此条规则的范围内。具体看第三大点。</p>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2VENQQW5hbHlzaXMuaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html</span></p>\n<p><strong>2、HSRP State Change：</strong> hsrp.state != 8 &amp;&amp; hsrp.state != 16</p>\n<p>HSRP 即热备份路由协议（Hot Standby Router Protocol），这条规则表明当前报文状态非 Standby 和 Active。</p>\n<p>HSRP 的状态值可以是以下几种：</p>\n<ul>\n<li>0 - Initial</li>\n<li>1 - Learn</li>\n<li>2 - Listen</li>\n<li>4 - Speak</li>\n<li>8 - Standby</li>\n<li>16 - Active</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzIyODE=\">https://www.rfc-editor.org/rfc/rfc2281</span></p>\n<p><strong>3、Spanning Tree Topology  Change：</strong> stp.type == 0x80</p>\n<p>当生成树协议的状态标记为  <code>0x80</code> ，表示着生成树拓扑发生变化。即 STP 协议数据单元 (BPDU) 的  <code>flag</code>  字段发生变化（使用 IEEE-802.1d）：</p>\n<p><img data-src=\"bpdu.png\" alt=\"img\" /></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoaHViLmhwZS5jb20vZWdpbmZvbGliL25ldHdvcmtpbmcvZG9jcy9zd2l0Y2hlcy81OTgwLzUyMDAtMzkyMV9sMi1sYW5fY2cvY29udGVudC80OTkwMzY2NzIuaHRt\">https://techhub.hpe.com/eginfolib/networking/docs/switches/5980/5200-3921_l2-lan_cg/content/499036672.htm</span></p>\n<p><strong>4、OSPF State Change：</strong> ospf.msg != 1</p>\n<p>OSPF（Open Shortest Path First，开放式最短路径优先协议）的 msg 类型不是 Hello 报文。</p>\n<p>OSPF 报文的类型，有下面几种类型：</p>\n<ul>\n<li>1：Hello 报文；</li>\n<li>2：DD 报文；</li>\n<li>3：LSR 报文；</li>\n<li>4：LSU 报文；</li>\n<li>5：LSAck 报文。</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4wMjN3Zy5jb20vbWVzc2FnZS9tZXNzYWdlL2NkX2ZlYXR1cmVfb3NwZl9tZXNzYWdlLmh0bWw=\">http://www.023wg.com/message/message/cd_feature_ospf_message.html</span></p>\n<p><strong>5、ICMP errors：</strong> icmp.type eq 3 || icmp.type eq 4 || icmp.type eq 5 || icmp.type eq 11 || icmpv6.type eq 1 || icmpv6.type eq 2 || icmpv6.type eq 3 || icmpv6.type eq 4</p>\n<p>ICMP 协议错误，协议的 type 字段值错误。</p>\n<p><strong>6、ARP：</strong> arp</p>\n<p>即 ARP 协议。</p>\n<p><strong>7、ICMP：</strong> icmp || icmpv6</p>\n<p>即 ICMP 协议。</p>\n<p><strong>8、TCP RST：</strong> tcp.flags.reset eq 1</p>\n<p>TCP 流产生 reset。</p>\n<p><strong>9、SCTP ABORT：</strong> sctp.chunk_type eq ABORT</p>\n<p>SCTP（即流控制传输协议）发生中止。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzQ5NjAjc2VjdGlvbi0zLjMuNw==\">https://www.rfc-editor.org/rfc/rfc4960#section-3.3.7</span></p>\n<p><strong>10、TTL low or unexpected：</strong> ( ! ip.dst == 224.0.0.0/4 &amp;&amp; ip.ttl &lt; 5 &amp;&amp; !pim &amp;&amp; !ospf) || (ip.dst == 224.0.0.0/24 &amp;&amp; ip.dst != 224.0.0.251 &amp;&amp; ip.ttl != 1 &amp;&amp; !(vrrp || carp))</p>\n<p>TTL (Time-To-Live) 指解析记录在本地 DNS 服务器中的缓存时间。该规则表示 TTL 产生异常。</p>\n<p>在 IP 组播中，通过 TTL 控件来管理转发数据包的范围，按照惯例：</p>\n<ul>\n<li>0 - 仅限于同一主机上</li>\n<li>1 - 被限制在同一个子网内</li>\n<li>32 仅限于同一站点</li>\n<li>64 - 仅限于同一区域</li>\n<li>128 - 仅限于同一大陆</li>\n<li>255 - 不受限制</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3RpbWUtdG8tbGl2ZQ==\">https://www.techtarget.com/searchnetworking/definition/time-to-live</span></p>\n<p><strong>11、Checksum Errors：</strong> eth.fcs.status == &quot;Bad&quot; || ip.checksum.status == &quot;Bad&quot; || tcp.checksum.status == &quot;Bad&quot; || udp.checksum.status == &quot;Bad&quot; || sctp.checksum.status == &quot;Bad&quot; || mstp.checksum.status == &quot;Bad&quot; || cdp.checksum.status == &quot;Bad&quot; || edp.checksum.status == &quot;Bad&quot; || wlan.fcs.status == &quot;Bad&quot; || stt.checksum.status == &quot;Bad&quot;</p>\n<p>条件中的各类协议的 checksum 出现异常。</p>\n<p><strong>12、SMB：</strong> smb || nbss || nbns || netbios</p>\n<p>Server Message Block 类协议。</p>\n<p><strong>13、HTTP：</strong> http || tcp.port == 80 || http2</p>\n<p>Hyper Text Transfer Protocol（超文本传输协议），这是很简陋的识别方法。</p>\n<p><strong>14、DCERPC：</strong> dcerpc</p>\n<p>即 DCE/RPC，分散式运算环境 / 远端过程调用（Distributed Computing Environment / Remote Procedure Calls）协议。</p>\n<p><strong>15、Routing：</strong> hsrp || eigrp || ospf || bgp || cdp || vrrp || carp || gvrp || igmp || ismp</p>\n<p>路由类协议。</p>\n<p>**16、TCP SYN/FIN： ** tcp.flags &amp; 0x02 || tcp.flags.fin == 1</p>\n<p>TCP 连接的起始和关闭。</p>\n<p><strong>17、TCP：</strong> tcp</p>\n<p>TCP 协议。</p>\n<p><strong>18、UDP：</strong> udp</p>\n<p>UDP 协议。</p>\n<p><strong>19、Broadcast：</strong> eth[0] &amp; 1</p>\n<p>广播数据。</p>\n<p><strong>20、System Event：</strong> systemd_journal || sysdig</p>\n<p>系统调用及系统事件等系统活动。</p>\n<h1 id=\"专家信息\"><a class=\"anchor\" href=\"#专家信息\">#</a> 专家信息</h1>\n<p>在报文的信息栏中，通常也有颜色限定，如下图：</p>\n<p><img data-src=\"image-20221006185352059.png\" alt=\"image-20221006185352059\" /></p>\n<p>而这次的颜色区别是属于对应的信息条目的：</p>\n<p><img data-src=\"image-20221006185105048.png\" alt=\"image-20221006185105048\" /></p>\n<p>每个专家信息项都有一个严重性级别。使用以下级别，从最低到最高。Wireshark 使用不同的颜色标记它们：</p>\n<ul>\n<li>\n<p>聊天（蓝色）</p>\n<p>有关常用的工作流程信息，例如设置了 SYN 标志的 TCP 数据包；数据包都符合常规流量的特征，包括 SYN、FIN、RST 以及各种状态码的 HTTP 事件。</p>\n</li>\n<li>\n<p>注意（青色）</p>\n<p>值得注意的事件，例如应用程序返回了一个常见的错误代码，例如 HTTP 404；数据包中有可能会引发故障的异常现象，例如 TCP 重传、重复确认、快速重传等现象。</p>\n</li>\n<li>\n<p>警告（黄色）</p>\n<p>警告，例如应用程序返回异常错误代码，如连接问题。</p>\n<p>与 TCP 窗口有关的事件 TCP window full 或 TCP zero window，一般是连接设备忙不过来所致。</p>\n<p>与 TCP 报文段丢失或失序有关的事件，丢失是因为未抓全某个 TCP 数据流的所有 TCP 报文段；失序是因其感知到了 TCP 报文段未按发出的顺序到达接收主机。</p>\n</li>\n<li>\n<p>错误（红色）</p>\n<p>严重的问题。</p>\n<p>校验和错误：Ethernet 及 IP 校验和错误。</p>\n<p>伪造的数据包：一般涉及具体的应用层协议。</p>\n</li>\n</ul>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2RXhwZXJ0Lmh0bWw=\">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvExpert.html</span></p>\n<h1 id=\"tcp-info\"><a class=\"anchor\" href=\"#tcp-info\">#</a> TCP Info</h1>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvVENQX0FuYWx5emVfU2VxdWVuY2VfTnVtYmVycw==\">https://wiki.wireshark.org/TCP_Analyze_Sequence_Numbers</span></p>\n<h2 id=\"a-ack信息\"><a class=\"anchor\" href=\"#a-ack信息\">#</a> A、ACK 信息</h2>\n<p><strong>1、TCP ACKed unseen segment</strong></p>\n<p>表示 Wireshark 发现该条 ACK 在整个网络包中找不到所对应的 Seq（排除了乱序），就会提示。</p>\n<p><img data-src=\"image-20221012210009741.png\" alt=\"image-20221012210009741\" /></p>\n<p>如图，在这组网络中，第 296 号包出现这种情况，然后在上面的包中是找不到它所对应的 Seq 的。</p>\n<p><strong>2、TCP Dup ACK <em>&lt;frame&gt;</em> #<em>&lt;acknowledgement number&gt;</em></strong></p>\n<p>重复 ACK 包，当收发不稳定时，会出现重复响应的情况；而这种情况就是响应端会向请求端回复重复 ACK。 <code>#</code>  符号前面的数字表示对应的重复包号，后面的数字表示确认次数，也可以说是出现的次数。</p>\n<p><img data-src=\"image-20221012221850769.png\" alt=\"image-20221012221850769\" /></p>\n<p>如图，在第 31191 号包的信息中可以看到提示是说跟第 31188 号包出现重复，通过查看第 31188 号包，而这一包其实是为了响应第 31187 号的。</p>\n<p><strong>3、TCP Fast Retransmission</strong></p>\n<p>标志着前面接收到重复的 ACK 包（即出现了 [TCP Dup ACK] ）达 3 个或 3 个以上，进而触发了 TCP 的快速重传（这是 RFC 的规定）。</p>\n<p><img data-src=\"image-20221012224854822.png\" alt=\"image-20221012224854822\" /></p>\n<p>如图， [TCP Dup ACK] 出现了 3 次，而且都是对应第 1309 号包，因此触发快速重传包第 1330 号包，重传了第 1309 号包所响应的请求包第 1245 号包，如下图：</p>\n<p><img data-src=\"image-20221012230828693.png\" alt=\"image-20221012230828693\" /></p>\n<p>然后通过对比原包第 1245 号包和快速重传包第 1330 号包，你会发现并不相同，实际上原始数据应该是相同的，只不过数据加密了，才出现不同的现象。</p>\n<h2 id=\"b-保活探测\"><a class=\"anchor\" href=\"#b-保活探测\">#</a> B、保活探测</h2>\n<p><strong>4、TCP Keep-Alive</strong></p>\n<p>这个应该不陌生，一般 TCP 长链接时，如果启用保活功能，则在特定时间段没有数据交互，那么将会传输一条保活字段，如下图：</p>\n<p><img data-src=\"image-20221012233735152.png\" alt=\"image-20221012233735152\" /></p>\n<p><strong>5、TCP Keep-Alive ACK</strong></p>\n<p>作为上一点 [TCP Keep-Alive] 的响应包，例图看上一张。</p>\n<h2 id=\"c-乱序-or-丢包\"><a class=\"anchor\" href=\"#c-乱序-or-丢包\">#</a> C、乱序 or 丢包</h2>\n<p><strong>6、TCP Out-Of-Order</strong></p>\n<p>标志着 TCP 传输出现乱序。</p>\n<p><img data-src=\"image-20221013201521709.png\" alt=\"image-20221013201521709\" /></p>\n<p>如图，在 TCP 传输过程中（不包括三次握手和四次挥手），同一台主机发出的数据包应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len；也可以说，后一个包的 Seq 会大于或等于前一个包的 Seq。当 Wireshark 发现后一个包的 Seq 值小于前一个包的 Seq + Len 时，就会认为是乱序了，因此标志 [TCP Out-of-Order]。</p>\n<p>在连续传输数据过程中，可以看到从第 330 号包一直到第 337 包被标志为乱序这几个包，应当是连续的，但是可以发现第 336 号包跟第 337 号包调转了，因此第 336 号包被标志为上一包未捕获，而第 337 号包则被标志为乱序。</p>\n<p>然后来分析一下，例如第 337 号包的 Seq = 83518，Len = 1380，那么 Seq + Len = 84898，可以发现其实该包列栏中  <code>Sequence Number</code>  的  <code>83518</code>  数据对应 Seq， <code>NextSequence Number</code>  的  <code>84898</code>  数据对应 Seq + Len。根据上面的结论，在发生错误前的第 335 号包它的  <code>NextSequence Number</code>  表明下一包第 336 号包的 Seq 值应当是  <code>83518</code>  ，但是实际上第 336 号包的 Seq 值为  <code>84898</code>  ，当到了第 337 号包的时候，才出现理应对应的值  <code>83518</code>  ，这时 Wireshark 通过对比在发生错误前的第 335 号包至理论连续的第 337 号包之间看是否有出现调转包，有则标志 [TCP Out-of-Order]。一般出现 [TCP Out-of-Order] 时都会伴随出现 [TCP Previous segment not captured] 。</p>\n<p><strong>7、TCP Previous segment not captured</strong></p>\n<p>在 TCP 传输过程中，同一台主机发出的数据段应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len（三次握手和四次挥手是例外）。如果 Wireshark 发现后一个包的 Seq 值大于前一个包的 Seq + Len，就知道中间缺失了一段数据。</p>\n<p>依然沿用上一张图，在发生错误前的第 335 号包 Seq + Len 值为  <code>83518</code>  ，但下一包的 Seq 值为  <code>84898</code>  ，因此出现后一个包的 Seq 值大于前一个包的 Seq + Len，而非等于，所以预示着该数据包的上一个包未捕获到，但后面我们也有发现虽然显示上一个包未捕获到，实际紧随它的后一个包就是它们之间的数据包，只是调转了包而已。</p>\n<h2 id=\"d-端口\"><a class=\"anchor\" href=\"#d-端口\">#</a> D、端口</h2>\n<p><strong>8、TCP Port numbers reused</strong></p>\n<p>这个死活没捕捉出来，就简单说一下吧。</p>\n<p>当发送 SYN 标志时（不是 SYN + ACK），如果已经存在一个使用相同地址和端口的现有会话，那么将会被 Wireshark 标记 [TCP Port numbers reused]。</p>\n<h2 id=\"e-重传\"><a class=\"anchor\" href=\"#e-重传\">#</a> E、重传</h2>\n<p><strong>9、TCP Spurious Retransmission</strong></p>\n<p>TCP 虚假重传，意味着发送端认为发送的包已经丢失了，然后就重传了，尽管此时接收端已经发送了对这些包的确认（确认还没收到或者已经丢失了）。</p>\n<p><img data-src=\"image-20221013232224434.png\" alt=\"image-20221013232224434\" /></p>\n<p>如图，第 459 号包出现虚拟重传现象，实际为第 453 号包的重传，可从显示来看第 453 号包是已经是得到接收端的 ACK 响应了，理论来讲是不会重传的，但前面也有说到了，可能会出现接收端确认了请求（已经发出去了），发送端却还没收到或者已经丢失了，那么发送端将会重传数据，而由于这时这段数据包在初包发送后接收端有回一次请求，这次重传相当于接收端又回了一次请求（即重复了两次响应，可以看到第 460 号包标志为 [TCP Dup ACK] 了），所以对于这种有回 ACK 还重传的数据包将被标志为 [TCP Spurious Retransmission] 。然后至于为什么是重传了第 453 号包，可以看到第 460 号包的信息提示，这是 ACK 响应第 459 号包的，但同时也是跟第 454 号包重复，而第 454 号包对应响应第 453 号包的，那自然而然地得到第 459 号包为第 453 号包的重传。</p>\n<p><strong>10、TCP Retransmission</strong></p>\n<p>TCP 重传，与上面不同的是如果一个包不确定是否丢了，但它又没有像上面 [TCP Spurious Retransmission] 那样得到接收端的 ACK 响应，那它大概率就是丢包了，就不会快速重传；而针对这种情况，发送方也就只好等到超时了再重传，此类重传包就会被 Wireshark 标志 [TCP Retransmission] 。</p>\n<p><img data-src=\"image-20221014221501852.png\" alt=\"image-20221014221501852\" /></p>\n<p>如图，第 33 号包被标志为 [TCP Previous segment not captured]，预示着有可能出现丢包，并且在后面一段时间内也没有像前面那样有标志 [TCP Out-Of-Order] 提示的包，排除了乱序情况，最终等待超时，重传数据包，于是第 33 号重传包就有了 [TCP Retransmission] 标志。TCP 重传是 TCP 通讯中常有的事情，有时候看到一大堆黑漆漆一片的 error 事件，可能就是这种情况。</p>\n<h2 id=\"f-tcp-window\"><a class=\"anchor\" href=\"#f-tcp-window\">#</a> F、TCP Window</h2>\n<p><strong>11、TCP Window Full</strong></p>\n<p>顾名思义，就是窗口已满，指的发送端发送的数据已经达到的接受窗口的上限；那么发送端暂停发送，等待新的接收窗口的通告。</p>\n<p><img data-src=\"image-20221014235639055.png\" alt=\"image-20221014235639055\" /></p>\n<p>如图，在这组数据中，从第 526323 号包开始，出现了 [TCP Window Full] 表明发送数据达到上限了，同时还有另一个 [TCP Spurious Retransmission] 表明了虚假重传，但可惜的是接收端后续都没有响应，最终导致在发送 RST 报文后，关闭 TCP 连接。</p>\n<p><strong>12、TCP Window Update</strong></p>\n<p>TCP 协议允许随时改变窗口的大小，并且通过发送标识有 WindowUpdate 的报文通知对端；或者当接收端的应用程序消耗完了已经从 RX 缓冲区接收到的数据时，也会发生 WindowUpdate，以指示缓冲区中现在有更多可用空间；以上这些数据包将被标志 [TCP Window Update]。[TCP Window Update] 是 TCP 通信中的一个状态，它可以发生的原因还有有很多，通常在 TCP ZeroWindow 条件发生后看到。</p>\n<p><img data-src=\"image-20221014234941548.png\" alt=\"image-20221014234941548\" /></p>\n<p><strong>13、TCP ZeroWindow</strong></p>\n<p>如图，当接收窗口值大小为零（Win = 0）且非 SYN、FIN 或 RST 数据时设置。</p>\n<p><img data-src=\"image-20221014223515008.png\" alt=\"image-20221014223515008\" /></p>\n<p>在每个 TCP 报头中的窗口字段表明着接收端可以接受的数据量大小；如果接收端不能接受任何数据，它将把窗口值设置为零，这告诉发送端暂停其传输。在某些特定情况下，这是正常的，例如，打印机可能会在加载或翻转一张纸时使用零窗口暂停打印作业的传输；然而，在大多数情况下，这表明接收端存在性能或容量问题。恢复暂停的连接可能需要很长时间 (有时需要几分钟)，即使导致零窗口的底层条件很快就会清除。</p>\n<p><strong>14、TCP ZeroWindowProbe</strong></p>\n<p>当通信的一方接收到 TCP ZeroWindow 报文后，会定时发送 TCP ZeroWindowProbe 报文进行探测；探测报文是需要发送下一字节数据，然后通过接收端的响应，由此来判断接收端窗口值是否仍然为 0，如果接收方回复窗口大小仍然为零，则发送端继续探测。ZeroWindowProbe 它有助于证明发送端已经确认到接收端其 TCP 窗口大小为零，但仍试图让数据继续交互而非关闭通讯。</p>\n<p><img data-src=\"windows-3.png\" alt=\"img\" /></p>\n<p><strong>15、TCP ZeroWindowProbeAck</strong></p>\n<p>作为 [TCP ZeroWindowProbe] 的 ACK 应答，结合 TCP ZeroWindowProbe 理解。ZeroWindowProbeAck 数据包的存在也表明网络正在传递数据包并且设备没有关闭。</p>\n<h2 id=\"g-交互\"><a class=\"anchor\" href=\"#g-交互\">#</a> G、交互</h2>\n<p><strong>16、TCP Conversation Completeness</strong></p>\n<ul>\n<li>SYN</li>\n<li>SYN-ACK</li>\n<li>ACK</li>\n<li>DATA</li>\n<li>FIN</li>\n<li>RST</li>\n</ul>\n<p><img data-src=\"0.jpg\" alt=\"img\" /></p>\n<h1 id=\"常见表达式\"><a class=\"anchor\" href=\"#常见表达式\">#</a> 常见表达式</h1>\n<p><strong>1、运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">英文写法</th>\n<th style=\"text-align:center\">别名</th>\n<th style=\"text-align:center\">C-like</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">eq</td>\n<td style=\"text-align:center\">any_eq</td>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">相等（如果超过一个）</td>\n<td style=\"text-align:center\"><code>ip.src == 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ne</td>\n<td style=\"text-align:center\">all_ne</td>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不相等（如果多于一个，则全部）</td>\n<td style=\"text-align:center\"><code>ip.src != 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">all_eq</td>\n<td style=\"text-align:center\">===</td>\n<td style=\"text-align:center\">相等（如果多于一个，则全部）</td>\n<td style=\"text-align:center\"><code>ip.src === 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">any_ne</td>\n<td style=\"text-align:center\">!==</td>\n<td style=\"text-align:center\">不相等（如果多于一个，则任意）</td>\n<td style=\"text-align:center\"><code>ip.src !== 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gt</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于</td>\n<td style=\"text-align:center\"><code>frame.len &gt; 10</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lt</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于</td>\n<td style=\"text-align:center\"><code>frame.len &lt; 128</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ge</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于或等于</td>\n<td style=\"text-align:center\"><code>frame.len ge 0x100</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">le</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于或等于</td>\n<td style=\"text-align:center\"><code>frame.len &lt;= 0x20</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>2、逻辑符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">英文写法</th>\n<th style=\"text-align:center\">C-like</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:center\">逻辑与</td>\n<td style=\"text-align:center\"><code>ip.src==10.0.0.5 and tcp.flags.fin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\" rowspan=\"2\">||</td>\n<td style=\"text-align:center\">逻辑或</td>\n<td style=\"text-align:center\"><code>ip.src==10.0.0.5 or ip.src==192.1.1.1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xor</td>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:center\"><code>tr.dst[0:3] == 0.6.29 xor tr.src[0:3] == 0.6.29</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:center\">逻辑非</td>\n<td style=\"text-align:center\"><code>not llc</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>3、协议过滤</strong></p>\n<pre><code>ip.proto == xxx\n\nnote: xxx表示为对应的协议，如 TCP：ip.proto == TCP\n</code></pre>\n<ul>\n<li><strong>TCP：</strong> 只显示 TCP 协议的数据流</li>\n<li><strong>UDP：</strong> 只显示 UDP 协议的数据流</li>\n<li><strong>HTTP：</strong> 只显示 HTTP 协议的数据流</li>\n<li><strong>ICMP：</strong> 只显示 ICMP 协议的数据流</li>\n<li><strong>ARP：</strong> 只显示 ARP 协议的数据流</li>\n<li><strong>DNS：</strong> 只显示 DNS 协议的数据流</li>\n</ul>\n<p><strong>4、IP 过滤</strong></p>\n<ul>\n<li><code>ip.addr == 192.168.116.138</code>  ，只显示 <strong>IP 地址</strong>为  <code>192.168.116.138</code>  有关的数据流</li>\n<li><code>ip.src == 192.168.116.138</code>  ，只显示<strong>源 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li>\n<li><code>ip.dst == 192.168.116.138</code>  ，只显示<strong>目标 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li>\n</ul>\n<p><strong>5、端口过滤</strong></p>\n<ul>\n<li><code>tcp.port == 80</code>  ，只显示 80 端口 TCP 数据流</li>\n<li><code>udp.prot == 67</code>  ，只显示 67 端口 UDP 数据流</li>\n<li><code>tcp.srcport == 80</code>  , 只显示源地址的 80 端口数据流</li>\n<li><code>tcp.dstport == 80</code>  ，只显示目的地址 80 端口数据流</li>\n</ul>\n<p><strong>6、过滤 HTTP 协议</strong></p>\n<ul>\n<li><code>http.request.method == &quot;GET&quot;</code>  ，显示 GET 请求</li>\n<li><code>http.request.method == &quot;POST&quot;</code>  ，显示 POST 请求</li>\n<li><code>http.request.code == 404</code>  ，显示状态码为 404</li>\n</ul>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoV29ya0J1aWxkRGlzcGxheUZpbHRlclNlY3Rpb24uaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html</span></p>\n<h1 id=\"列信息增删\"><a class=\"anchor\" href=\"#列信息增删\">#</a> 列信息增删</h1>\n<p><strong>1、增加列信息</strong></p>\n<p>在报文的信息栏，选着想要显示的信息，右键点击添加：</p>\n<p><img data-src=\"image-20221006221325561.png\" alt=\"image-20221006221325561\" /></p>\n<p><strong>2、删除列信息</strong></p>\n<p>在监控报文栏，选择不需要的列，右键选中：</p>\n<p><img data-src=\"image-20221006221434994.png\" alt=\"image-20221006221434994\" /></p>\n<p><strong>3、隐藏列信息</strong></p>\n<p>同样在监控报文栏操作，随便选择一列，右键选中，然后把想要隐藏的列去掉勾选，这里就不放图了。</p>\n",
            "tags": [
                "history",
                "工具"
            ]
        },
        {
            "id": "https://arachnid.cc/shoka-function-expansion/",
            "url": "https://arachnid.cc/shoka-function-expansion/",
            "title": "博客搭建笔记之功能扩展",
            "date_published": "2022-05-25T15:23:42.722Z",
            "content_html": "<h1 id=\"搜索功能\"><a class=\"anchor\" href=\"#搜索功能\">#</a> 搜索功能</h1>\n<h2 id=\"algolia搜索功能\"><a class=\"anchor\" href=\"#algolia搜索功能\">#</a> algolia 搜索功能</h2>\n<p><div class=\"links\"><div class=\"item\" title=\"algolia 官网\" style=\"--block-color:#5468FF;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v\" data-background-image=\"https://www.algolia.com/assets/auth/algolia-logo-light-9d5a83fff4752711153b4c8a6fbf830787e5c538a3475edba9f1c8aaffa79a54.svg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93d3cuYWxnb2xpYS5jb20v\">algolia 官网</span>\n          <p class=\"desc\">algolia官方地址</p>\n          </div></div></div></p>\n<p><strong>需要安装  <code>hexo-algoliasearch</code>  插件。</strong></p>\n<ol>\n<li>\n<p>注册 algolia，创建 Index：</p>\n<p><img data-src=\"image-20220530210920658.png\" alt=\"image-20220530210920658\" /></p>\n</li>\n<li>\n<p>获取 Key，修改站点配置：</p>\n<ul>\n<li>\n<p>新建 API Key：<img data-src=\"image-20220530212532566.png\" alt=\"image-20220530212532566\" /></p>\n</li>\n<li>\n<p>获取相应的 Key，并填入配置信息：</p>\n<p><img data-src=\"image-20220530212807371.png\" alt=\"image-20220530212807371\" /></p>\n</li>\n</ul>\n</li>\n<li>\n<p>在配置完 Key 后，回到终端控制台，键入以下命令上传数据到  <code>algolia</code>  ：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo algolia</pre></td></tr></table></figure></li>\n</ol>\n<p>配置参考：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">algolia</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token key atrule\">appId</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Application ID对应码\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token key atrule\">apiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"API Keys页面的All API Keys中刚刚新建的API key的对应码\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token key atrule\">adminApiKey</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"Admin API Key对应码\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token key atrule\">chunkSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">5000</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   <span class=\"token key atrule\">indexName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你填写的Indices部分\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>   <span class=\"token key atrule\">fields</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token punctuation\">-</span> title <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     <span class=\"token punctuation\">-</span> path <span class=\"token comment\">#必须配置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token punctuation\">-</span> categories <span class=\"token comment\">#推荐配置</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token punctuation\">-</span> content<span class=\"token punctuation\">:</span>strip<span class=\"token punctuation\">:</span>truncate<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4000</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     <span class=\"token punctuation\">-</span> gallery</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     <span class=\"token punctuation\">-</span> photos</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     <span class=\"token punctuation\">-</span> tags</pre></td></tr></table></figure><p>注：每次更新修改文章后还需要执行  <code>hexo algolia</code>  的指令，否则，搜索数据没有或者对不上。</p>\n<h2 id=\"本地搜索功能\"><a class=\"anchor\" href=\"#本地搜索功能\">#</a> 本地搜索功能</h2>\n<h1 id=\"valine-评价功能\"><a class=\"anchor\" href=\"#valine-评价功能\">#</a> valine 评价功能</h1>\n<h1 id=\"字数及阅读时间统计\"><a class=\"anchor\" href=\"#字数及阅读时间统计\">#</a> 字数及阅读时间统计</h1>\n<p><strong>需要安装  <code>hexo-symbols-count-time</code>  插件。</strong></p>\n<p>安装后不需要修改站点配置文件，直接使用插件默认配置就行，如需进行配置，可参考：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># hexo-symbols-count-time</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## shoka 主题默认采取了默认的配置，所以覆盖相应配置就行了</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">symbols_count_time</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">symbols</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">time</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">total_symbols</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">total_time</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">exclude_codeblock</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">awl</span><span class=\"token punctuation\">:</span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">wpm</span><span class=\"token punctuation\">:</span> <span class=\"token number\">245</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">suffix</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"mins.\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">#exclude_codeblock: 是否排除代码块区域的字数统计</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">#awl: 平均字符长度 (多少符字算一个中文或英文) 中文约是 2，英文约是 5，其他约是 6</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">#wpm: 每分钟阅读字数  正常值约为 275 字，较小值约为 200 字，较快值约 350 字</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">#suffix: 当总字数小于每分钟阅读字数时，默认采取的时间类型，不填写默认类型采取 \"mins.\"</span></pre></td></tr></table></figure><p>启用则需要找到  <code>footer</code>  和  <code>post</code>  的两处  <code>count</code>  ，修改为  <code>true</code>  ：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 页尾全站统计</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">footer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">since</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2010</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 文章界面统计</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">post</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">count</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><h1 id=\"访问及阅读统计\"><a class=\"anchor\" href=\"#访问及阅读统计\">#</a> 访问及阅读统计</h1>\n<p>LeanCloud 评价里面是有阅读访问统计，但是，目前由于 LeanCloud 国际版不对国内用户提供服务了，因此改用其它记录统计，这里可以使用简单的<span class=\"exturl\" data-url=\"aHR0cDovL2J1c3VhbnppLmlicnVjZS5pbmZvLw==\">不蒜子</span>计数，操作更改也比较简单： <strong>引脚本 + 写标签</strong></p>\n<p>1、调用不蒜子的官方脚本，这个比较简单，在你需要的地方调用如下代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre># 引脚本</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>script <span class=\"token keyword\">async</span> src<span class=\"token operator\">=</span><span class=\"token string\">\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre># 写标签</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"busuanzi_value_page_pv\"</span><span class=\"token operator\">></span> # 当前访问页面次数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"busuanzi_container_site_uv\"</span><span class=\"token operator\">></span> # 站点访客次数</pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"busuanzi_container_site_pv\"</span><span class=\"token operator\">></span> # 站点访问总量</pre></td></tr></table></figure><p>2、静态部署调用，这个需要在  <code>&lt;root&gt;/source/js</code>  路径下创建  <code>busuanzi.pure.min.js</code>  文件，如果  <code>js</code>  目录不存在则自己新建，并且把如下代码添加进去，并保存：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> bszCaller<span class=\"token punctuation\">,</span>bszTag<span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token function-variable function\">ready</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">c</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> a<span class=\"token operator\">||</span><span class=\"token string\">\"interactive\"</span><span class=\"token operator\">===</span>document<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">||</span><span class=\"token string\">\"complete\"</span><span class=\"token operator\">===</span>document<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">?</span><span class=\"token function\">c</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token function\">c</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">d</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>c<span class=\"token operator\">></span>a<span class=\"token punctuation\">;</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">e</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token function\">d</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span>removeEventListener<span class=\"token operator\">?</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>document<span class=\"token punctuation\">.</span>attachEvent<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">detachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onreadystatechange\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>window<span class=\"token operator\">==</span>window<span class=\"token punctuation\">.</span>top<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span>addEventListener<span class=\"token operator\">?</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DOMContentLoaded\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span><span class=\"token operator\">!</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>document<span class=\"token punctuation\">.</span>attachEvent<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">attachEvent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"onreadystatechange\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">loaded|complete</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>readyState<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>window<span class=\"token operator\">==</span>window<span class=\"token punctuation\">.</span>top<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">||</span>document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span><span class=\"token function\">doScroll</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"left\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">&#125;</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bszCaller<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">fetch</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"BusuanziCallback_\"</span><span class=\"token operator\">+</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1099511627776</span><span class=\"token operator\">*</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>window<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">evalCall</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=BusuanziCallback\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"=\"</span><span class=\"token operator\">+</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>scriptTag<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SCRIPT\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>scriptTag<span class=\"token punctuation\">.</span>type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token punctuation\">,</span>scriptTag<span class=\"token punctuation\">.</span>defer<span class=\"token operator\">=</span><span class=\"token operator\">!</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>scriptTag<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span>a<span class=\"token punctuation\">,</span>scriptTag<span class=\"token punctuation\">.</span>referrerPolicy<span class=\"token operator\">=</span><span class=\"token string\">\"no-referrer-when-downgrade\"</span><span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HEAD\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>scriptTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">evalCall</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">a</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>scriptTag<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>scriptTag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>bszTag<span class=\"token punctuation\">.</span><span class=\"token function\">hides</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>bszCaller<span class=\"token punctuation\">.</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"//busuanzi.ibruce.info/busuanzi?jsonpCallback=BusuanziCallback\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>bszTag<span class=\"token punctuation\">.</span><span class=\"token function\">texts</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bszTag<span class=\"token punctuation\">.</span><span class=\"token function\">shows</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bszTag<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">bszs</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"site_pv\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"page_pv\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"site_uv\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">texts</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bszs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> c<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"busuanzi_value_\"</span><span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">hides</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bszs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"busuanzi_container_\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"none\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token function-variable function\">shows</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bszs<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">var</span> b<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"busuanzi_container_\"</span><span class=\"token operator\">+</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>b<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>display<span class=\"token operator\">=</span><span class=\"token string\">\"inline\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后更改上面第一条代码的引用路径为本地路径，例如： <code>&lt;script async src=&quot;https://xxx.example.com/js/busuanzi.pure.min.js&quot;&gt;&lt;/script&gt;</code>  ， <code>xxx.example.com</code>  为你的部署网站。后面三行的代码的  <code>&lt;span id=&quot;xxx&quot;&gt;</code>  不用变动，只需在合适的地方调用想用的计数代码即可。</p>\n<p>3、举个例子，替换 shoka 主题原有的页面访问计数。在  <code>&lt;root&gt;/themes/shoka/layout/_partials/post/footer.njk</code>  文件中，添加并替换即可。如下图：</p>\n<p><img data-src=\"image-20221115121446459.png\" alt=\"image-20221115121446459\" /></p>\n<h1 id=\"rss订阅\"><a class=\"anchor\" href=\"#rss订阅\">#</a> RSS 订阅</h1>\n<p><strong>需要安装  <code>hexo-generator-feed</code>  插件。</strong></p>\n<p>安装完成后，需要在  <code>&lt;root&gt;/_config.yml</code>  配置中添加如下信息，并填写自己需要的信息：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">feed</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> atom</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> atom.xml</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">hub</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">content</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">content_limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">140</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">content_limit_delim</span><span class=\"token punctuation\">:</span> <span class=\"token string\">' '</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">order_by</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">-</span>date</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">icon</span><span class=\"token punctuation\">:</span> icon.png</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">autodiscovery</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  template<span class=\"token punctuation\">:</span></pre></td></tr></table></figure><p>具体内容可参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvLWdlbmVyYXRvci1mZWVk\">https://github.com/hexojs/hexo-generator-feed</span></p>\n<p>当然，如果有能力的，可以自建 rss 模板，shoka 主题上也有提供，只需要如下调用模板即可：</p>\n<p><img data-src=\"image-20221115164425176.png\" alt=\"image-20221115164425176\" /></p>\n<p>最后，在需要获取 RSS 链接的地方添加  <code>/atom.xml</code>  即可。</p>\n<h1 id=\"站点运行时间\"><a class=\"anchor\" href=\"#站点运行时间\">#</a> 站点运行时间</h1>\n<p>在配置站点页脚的  <code>&lt;root&gt;/themes/shoka/layout/_partials/footer.njk</code>  文件上，选择合适的地方添加如下代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"create_time\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"timeDate\"</span><span class=\"token operator\">></span>加载日期<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"times\"</span><span class=\"token operator\">></span>加载时间<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">createtime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> grt <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        now<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        days <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> grt<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        dnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>days<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        hours <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> grt<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        hnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>hours<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          hnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> hnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        minutes <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> grt<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">/</span> <span class=\"token number\">60</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        mnum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>minutes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          mnum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> mnum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        seconds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> grt<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">24</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> dnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> hnum<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token number\">60</span> <span class=\"token operator\">*</span> mnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        snum <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>seconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>snum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>          snum <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span> <span class=\"token operator\">+</span> snum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"timeDate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\" 本站存活 \"</span> <span class=\"token operator\">+</span> dnum <span class=\"token operator\">+</span> <span class=\"token string\">\" 天 \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"times\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> hnum <span class=\"token operator\">+</span> <span class=\"token string\">\" 小时 \"</span> <span class=\"token operator\">+</span> mnum <span class=\"token operator\">+</span> <span class=\"token string\">\" 分 \"</span> <span class=\"token operator\">+</span> snum <span class=\"token operator\">+</span> <span class=\"token string\">\" 秒\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>      <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"createtime()\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">3</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure><p>再在主题配置文件  <code>&lt;root&gt;/themes/shoka/_config.yml</code>  中添加：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Runing Time</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">running_time</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">create_time</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"01/01/1945 19:00:00\"</span> <span class=\"token comment\">#此处修改你的建站时间或者网站上线时间</span></pre></td></tr></table></figure><h1 id=\"seo-优化及站点收录\"><a class=\"anchor\" href=\"#seo-优化及站点收录\">#</a> SEO 优化及站点收录</h1>\n<p>辛辛苦苦搭好网站，当然是想跟其他人一起分享博文啦；但是，对于个人博客，如果没有被搜索引擎收录的话，别人在搜索引擎基本上是看不到的。那么如何查看个人博客网站是否被收录？只需要在对应的搜索引擎搜索框上输入：</p>\n<figure class=\"highlight http\"><figcaption data-lang=\"HTTP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token header\"><span class=\"token header-name keyword\">site</span><span class=\"token punctuation\">:</span><span class=\"token header-value\">your_website</span></span></pre></td></tr></table></figure><p>eg:</p>\n<p><img data-src=\"image-20221126231952585.png\" alt=\"image-20221126231952585\" /></p>\n<h2 id=\"google收录\"><a class=\"anchor\" href=\"#google收录\">#</a> Google 收录</h2>\n<p>谷歌收录相对简单，只需要准备一个谷歌账号，然后访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWFyY2guZ29vZ2xlLmNvbS9zZWFyY2gtY29uc29sZS93ZWxjb21l\">Google Search Console</span> 如下图：</p>\n<p><img data-src=\"image-20221126232456573.png\" alt=\"image-20221126232456573\" /></p>\n<p>先登录账号，然后再输入个人博客网站域名。然后弹出验证网站所有权窗口，这里一般选择  <code>CNAME验证</code>  ，接着根据提示操作即可，这里就不贴图，并且在你的网站管理那里添加给出来的 DNS 解析；最后等 DNS 更改生效，验证通过即可。完成后进入配置，添加站点地图链接，可能添加完后刷新会显示  <code>无法获取</code>  的状态，但其实是已经配置完成了。</p>\n<h2 id=\"bing收录\"><a class=\"anchor\" href=\"#bing收录\">#</a> Bing 收录</h2>\n<p>进入 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmluZy5jb20vd2VibWFzdGVycy9hYm91dA==\">Bing Webmaster Tools</span> ，这个可以选择使用 GSC 导入网站，只需要授权一下即可；或者手动添加通过  <code>CNAME验证</code>  添加，如下图：</p>\n<p><img data-src=\"image-20221126234903144.png\" alt=\"image-20221126234903144\" /></p>\n<p>通过后，同样的添加站点地图链接。</p>\n<h2 id=\"baidu收录\"><a class=\"anchor\" href=\"#baidu收录\">#</a> Baidu 收录</h2>\n<p>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aXl1YW4uYmFpZHUuY29tLw==\">百度搜索资源平台</span> ，点击  <code>用户中心</code>  -&gt;  <code>站点管理</code>  ，然后添加网站，一路到验证通过，这里同样的使用  <code>CNAME验证</code>  即可，当然选择其他的也行，哪种方便用哪种：</p>\n<p><img data-src=\"image-20221127000022983.png\" alt=\"image-20221127000022983\" /></p>\n<p>验证完毕后，找到  <code>普通收录</code>  ，选择  <code>sitemap</code>  ，接着添加站点地图链接：</p>\n<p><img data-src=\"image-20221127000321081.png\" alt=\"image-20221127000321081\" /></p>\n<h1 id=\"看板卡通模型\"><a class=\"anchor\" href=\"#看板卡通模型\">#</a> 看板卡通模型</h1>\n<p>这里使用  <code>live2d模块</code>  ，比较简单。</p>\n<p>安装插件  <code>npm install --save hexo-helper-live2d</code>  ，选则安装所需的卡通模型：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3hpYXpleXUvbGl2ZTJkLXdpZGdldC1tb2RlbHM=\">https://github.com/xiazeyu/live2d-widget-models</span> ，例如，安装名为 <strong>unitychan</strong> 的模型：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> live2d-widget-model-unitychan</pre></td></tr></table></figure><p>配置插件，在  <code>&lt;root&gt;/_config.yml</code>  中添加及更改如下信息：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">live2d</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">scriptFrom</span><span class=\"token punctuation\">:</span> local <span class=\"token comment\"># 默认</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">pluginRootPath</span><span class=\"token punctuation\">:</span> live2dw/ <span class=\"token comment\"># 插件在站点上的根目录 (相对路径)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">pluginJsPath</span><span class=\"token punctuation\">:</span> lib/ <span class=\"token comment\"># 脚本文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">pluginModelPath</span><span class=\"token punctuation\">:</span> assets/ <span class=\"token comment\"># 模型文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">tagMode</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 标签模式，是否仅替换 live2d tag 标签而非插入到所有页面中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">debug</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 调试，是否在控制台输出日志</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">model</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">use</span><span class=\"token punctuation\">:</span> live2d<span class=\"token punctuation\">-</span>widget<span class=\"token punctuation\">-</span>model<span class=\"token punctuation\">-</span>unitychan</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">display</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> right <span class=\"token comment\">#动画位置</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">210</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">380</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 位置配置，这个在左侧边栏位置很居中</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">hOffset</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>  <span class=\"token comment\"># 调节水平位置</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">vOffset</span><span class=\"token punctuation\">:</span> <span class=\"token number\">-25</span>  <span class=\"token comment\"># 调节垂直位置</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token key atrule\">mobile</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 是否在移动设备上显示</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token key atrule\">scale</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.5</span> <span class=\"token comment\"># 移动设备上的缩放</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">react</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">opacityDefault</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.7</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">opacityOnHover</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span></pre></td></tr></table></figure>",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://arachnid.cc/shoka-config/",
            "url": "https://arachnid.cc/shoka-config/",
            "title": "博客搭建笔记之 shoka 配置",
            "date_published": "2022-05-25T12:38:40.634Z",
            "content_html": "<blockquote>\n<p>以下配置皆在文件   <code>&lt;root&gt;/_config.shoka.yml</code>  修改。大部分摘录自：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/config/</span></p>\n</blockquote>\n<h1 id=\"站点名称\"><a class=\"anchor\" href=\"#站点名称\">#</a> 站点名称</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">alternate</span><span class=\"token punctuation\">:</span> Yume Shoka</pre></td></tr></table></figure><p>这里设置的名称代替 Logo，显示在页面顶部，以及页尾 ©️ 处。</p>\n<h1 id=\"资源文件\"><a class=\"anchor\" href=\"#资源文件\">#</a> 资源文件</h1>\n<p>支持本地静态文件跟 cdn 加速，默认值是  <code>/</code>  ，指使用本地静态文件。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># local static</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> /</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>or</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># jsdelivr cdn</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">statics</span><span class=\"token punctuation\">:</span> //cdn.jsdelivr.net/gh/Arachnid<span class=\"token punctuation\">-</span>97/arachnid@latest/</pre></td></tr></table></figure><p>当然，也可以修改成  <code>//cdn.jsdelivr.net/gh/您的github用户名/您的项目名@latest/</code>  这种形式，以使用 jsDelivr 进行加速。</p>\n<p>PS：jsDelivr 并不是实时更新，重新生成文件后需要耐心等待（更新于 2022.05.25），目前 jsDelivr 对于大陆已经失效，部署后需要使用魔法才能访问，至于为啥，就不多说了。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span> css</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span> js</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">images</span><span class=\"token punctuation\">:</span> images</pre></td></tr></table></figure><p>静态文件所处目录的实际目录名，这些一般不改。</p>\n<h1 id=\"夜间模式\"><a class=\"anchor\" href=\"#夜间模式\">#</a> 夜间模式</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">darkmode</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># true</span></pre></td></tr></table></figure><p>默认情况下，是否开启夜间模式取决于（优先级从高到低）：</p>\n<ol>\n<li>访客点击页面头部切换按钮的自行选择</li>\n<li>访客切换了浏览设备的主题色调</li>\n<li>您的  <code>darkmode</code>  配置项</li>\n</ol>\n<h1 id=\"自动定位\"><a class=\"anchor\" href=\"#自动定位\">#</a> 自动定位</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">auto_scroll</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>默认情况下，再次打开页面时，会自动滚动到上次浏览的位置。<br />\n这个选项设为  <code>false</code>  时将停用此功能。</p>\n<h1 id=\"加载动画\"><a class=\"anchor\" href=\"#加载动画\">#</a> 加载动画</h1>\n<pre><code># 是否显示页面加载动画 loading-cat\nloader:\n  start: true # 当初次打开页面时，显示加载动画\n  switch: true # tab 切换到其他页面时，显示加载动画\n</code></pre>\n<p>注：tab 切换后只是显示 loading 动画，实际并未重新加载页面。</p>\n<h2 id=\"动画替换\"><a class=\"anchor\" href=\"#动画替换\">#</a> 动画替换</h2>\n<p>CSS 样式对应修改的文件位置：  <code>&lt;root&gt;/themes/shoka/source/css/_common/components/third-party</code>  中的  <code>loading.styl</code>  文件。</p>\n<figure class=\"highlight stylus\"><figcaption data-lang=\"stylus\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\"><span class=\"token comment\">//css</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//\\themes\\shoka\\source\\css\\_common\\components\\third-party\\loading.styl</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 保留下面这几行，其余删除后写入新样式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>#loading <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token atrule-declaration\"><span class=\"token atrule\">@extend</span> $fix-fullscreen<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property-declaration\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token func\"><span class=\"token function\">var</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token color\">grey</span><span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token func\"><span class=\"token function\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hexo-config<span class=\"token punctuation\">(</span><span class=\"token string\">'loader.start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token property-declaration\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token selector\"><span class=\"token comment\">//</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t你的CSS样式代码</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//</span></pre></td></tr></table></figure><p>html 对应修改的文件位置：  <code>&lt;root&gt;/themes/shoka/layout/_partials</code>  中的  <code>layout.njk</code>  文件。</p>\n<pre><code class=\"language-nunjucks\">//HTML\n//\\themes\\shoka\\layout\\_partials\\layout.njk\n&lt;body itemscope itemtype=&quot;https://schema.org/WebPage&quot;&gt;\n  &lt;div id=&quot;loading&quot;&gt;\n\t\t//此处删除并重新写入css样式对应的html代码\n  &lt;/div&gt;\n  &lt;div id=&quot;container&quot;&gt;\n</code></pre>\n<h1 id=\"烟花效果\"><a class=\"anchor\" href=\"#烟花效果\">#</a> 烟花效果</h1>\n<p>单击页面的烟花效果配置如下：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">fireworks</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 是否启用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">color</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 烟花颜色</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(255,182,185,.9)\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(250,227,217,.9)\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(187,222,214,.9)\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"rgba(138,198,209,.9)\"</span></pre></td></tr></table></figure><h1 id=\"加载谷歌字体\"><a class=\"anchor\" href=\"#加载谷歌字体\">#</a> 加载谷歌字体</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">font</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># Font options:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\"># `external: true` will load this font family from `host` above.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># `family: Times New Roman`. Without any quotes.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\"># `size: x.x`. Use `em` as unit. Default: 1 (16px)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\"># Global font settings used for all elements inside &lt;body>.</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">global</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Mulish</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\"># Font settings for alternate title.</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token key atrule\">logo</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Fredericka the Great</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.5</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\"># Font settings for site title.</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif JP</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span> <span class=\"token number\">2.5</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\"># Font settings for headlines (&lt;h1> to &lt;h6>).</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token key atrule\">headings</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Noto Serif SC</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token key atrule\">size</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token comment\"># Font settings for posts.</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  <span class=\"token comment\"># Font settings for &lt;code> and code blocks.</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  <span class=\"token key atrule\">codes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token key atrule\">family</span><span class=\"token punctuation\">:</span> Inconsolata</pre></td></tr></table></figure><p>此功能基本参考 NexT。<br />\n加粗标题的字体总是使用  <code>Noto Serif</code>  ，为了正确友好的显示日文中的汉字，会先后加载  <code>headings</code>  和  <code>title</code>  的字体设置。</p>\n<h1 id=\"iconfont-图标\"><a class=\"anchor\" href=\"#iconfont-图标\">#</a> iconfont 图标</h1>\n<p>对应文件位置：  <code>&lt;root&gt;/themes/shoka/source/css</code>  中的  <code>_iconfont.styl</code>  文件。</p>\n<p><code>font-family</code>  设为  <code>ic</code>  ，所有字体样式前缀为  <code>i-</code>  ；具体参见  <code>&lt;root&gt;/themes/shoka/source/css/_iconfont.styl</code>  。</p>\n<h2 id=\"自定义图标\"><a class=\"anchor\" href=\"#自定义图标\">#</a> 自定义图标</h2>\n<p>如果需要添加或修改，需要找 shoka 主题的博主姐姐添加您的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWNvbmZvbnQuY24v\"> Iconfont</span> 用户名到项目中，此后您可以任意全选项目文件，批量保存到购物车中，添加至您自己的项目里，并将主题配置文件中的  <code>iconfont</code>  值改为您的项目。</p>\n<p>注意，您的项目应设置  <code>FontClass/Symbol</code>  前缀 为  <code>i-</code>  。</p>\n<p>在  <code>&lt;root&gt;/source/_data/</code>  目录新建文件  <code>iconfont.styl</code>  ，把新增或修改的图标样式复制到这个文件中。</p>\n<blockquote>\n<p>自定义  <code>iconfont.styl</code>  文件将覆盖主题默认样式，为了避免出错，请保证原有样式名均存在，在原有样式基础上进行增删改。</p>\n</blockquote>\n<p>最后，在配置文件中更改你的  <code>iconfont</code>  项目名：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># project of https://www.iconfont.cn/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># //at.alicdn.com/t/font_1832207_c8i9n1ulxlt.css => 1832207_c8i9n1ulxlt</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">iconfont</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1832207_igi8uaupcus\"</span></pre></td></tr></table></figure><h1 id=\"菜单\"><a class=\"anchor\" href=\"#菜单\">#</a> 菜单</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">menu</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">home</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> home</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">posts</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span> / <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> feather</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">archives</span><span class=\"token punctuation\">:</span> /archives/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> list<span class=\"token punctuation\">-</span>alt</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">categories</span><span class=\"token punctuation\">:</span> /categories/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> th</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">tags</span><span class=\"token punctuation\">:</span> /tags/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> tags</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">friends</span><span class=\"token punctuation\">:</span> /friends/ <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> heart</pre></td></tr></table></figure><p><code>menu</code>  支持一级子目录，子目录设置中的第一项必须为  <code>default</code>  ，用来定义父级按钮的样式。</p>\n<h1 id=\"社交按钮\"><a class=\"anchor\" href=\"#社交按钮\">#</a> 社交按钮</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Social Links</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># Usage: `Key: permalink || icon || color`</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># Key is the link label showing to end users.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Value before `||` delimiter is the target permalink,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># secend value is the name of Font icon.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">social</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">github</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> github <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#191717\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">#google: https://plus.google.com/yourname || google</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">twitter</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//twitter.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> twitter <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#00aff0\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token key atrule\">zhihu</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.zhihu.com/people/rurismzk <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> zhihu <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#1e88e5\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token key atrule\">music</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/user/home?id=12886823 || cloud-music || \"#e60026\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">weibo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//weibo.com/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> weibo <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#ea716e\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token key atrule\">about</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//about.me/amehime <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> address<span class=\"token punctuation\">-</span>card <span class=\"token punctuation\">|</span><span class=\"token punctuation\">|</span> \"<span class=\"token comment\">#3b5998\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token comment\">#email: mailto:yourname@mail.com || envelope || \"#55acd5\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token comment\">#facebook: https://www.facebook.com/yourname || facebook</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">#stackoverflow: https://stackoverflow.com/yourname || stack-overflow</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">#youtube: https://youtube.com/yourname || youtube</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token comment\">#instagram: https://instagram.com/yourname || instagram</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">#skype: skype:yourname?call|chat || skype</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">#douban: https://www.douban.com/people/yourname/ || douban</span></pre></td></tr></table></figure><p>如上，使用  <code>||</code>  作为分隔符，依次为  <code>链接 || 图标 || 颜色</code>  。<br />\n注意，只需要写图标名称，如  <code>github</code>  ，则会自动转换为  <code>ic i-github</code>  。<br />\n十六进制颜色码需要  <code>&quot;&quot;</code>  包绕。</p>\n<h1 id=\"边栏配置\"><a class=\"anchor\" href=\"#边栏配置\">#</a> 边栏配置</h1>\n<p>边栏可以选择在左侧，或右侧。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">sidebar</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\"># Sidebar Position.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">position</span><span class=\"token punctuation\">:</span> left</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">#position: right</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># Replace the default avatar image and set the url here.</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">avatar</span><span class=\"token punctuation\">:</span> avatar.jpg</pre></td></tr></table></figure><p>修改头像文件的地址，相对于静态文件目录  <code>images</code>  中配置的路径。</p>\n<p>可以将自己的图片放在  <code>&lt;root&gt;/source/_data/images/</code>  目录下并保持同名，甚至以同名覆盖主题内默认的头像图片。</p>\n<h1 id=\"底部-widgets\"><a class=\"anchor\" href=\"#底部-widgets\">#</a> 底部 widgets</h1>\n<p>目前页面底部可以显示两个小部件，即  <code>随机文章</code>  和  <code>最近评论</code>  。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">widgets</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">random_posts</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 显示随机文章</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">recent_comments</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 显示最近评论</span></pre></td></tr></table></figure><h1 id=\"打赏功能\"><a class=\"anchor\" href=\"#打赏功能\">#</a> 打赏功能</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Reward (Donate)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">reward</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># If true, reward will be displayed in every article by default.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">account</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">wechatpay</span><span class=\"token punctuation\">:</span> /wechatpay.png</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">alipay</span><span class=\"token punctuation\">:</span> /alipay.png</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\"># paypal: /paypal.png</span></pre></td></tr></table></figure><p>默认打开，对应的奖赏图片在  <code>&lt;root&gt;/themes/shoka/source/images</code>  中找到对应的名称图片。</p>\n<h1 id=\"标签显示\"><a class=\"anchor\" href=\"#标签显示\">#</a> 标签显示</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># TagCloud settings for tags page.</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">tagcloud</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\"># All values below are same as default, change them by yourself.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">min</span><span class=\"token punctuation\">:</span> <span class=\"token number\">16</span> <span class=\"token comment\"># Minimun font size in px</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">max</span><span class=\"token punctuation\">:</span> <span class=\"token number\">22</span> <span class=\"token comment\"># Maxium font size in px</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">start</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#72cecf\"</span> <span class=\"token comment\"># Start color (hex, rgba, hsla or color keywords)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token key atrule\">end</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"#ffbac3\"</span> <span class=\"token comment\"># End color (hex, rgba, hsla or color keywords)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">amount</span><span class=\"token punctuation\">:</span> <span class=\"token number\">200</span> <span class=\"token comment\"># Amount of tags, change it if you have more than 200 tags</span></pre></td></tr></table></figure><h1 id=\"背景音乐\"><a class=\"anchor\" href=\"#背景音乐\">#</a> 背景音乐</h1>\n<p>在主题配置文件中，设置全局播放列表。<br />\n在文章的 Front Matter 中，设置文章专有播放列表，访问该文章页面时，将覆盖全局配置。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/song<span class=\"token punctuation\">?</span>id=1387098940</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2088001742</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//www.xiami.com/collect/250830668</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//y.qq.com/n/yqq/playsquare/3535982902.html</pre></td></tr></table></figure><p>如上，可以直接使用网易云、虾米、QQ 音乐的播放列表、单曲，可以同时填写多个。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2943811283</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2297706586</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr></table></figure><p>如果需要自定义媒体文件，可以按照以下格式填写：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目1\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目2\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表1</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目1\"</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>          <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"曲目2\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"播放地址\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token key atrule\">artist</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"艺术家\"</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>          <span class=\"token key atrule\">cover</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"封面\"</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>          <span class=\"token key atrule\">lrc</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"歌词\"</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 列表2</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token key atrule\">list</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//music.163.com/<span class=\"token comment\">#/playlist?id=2031842656</span></pre></td></tr></table></figure><p>如果要关闭当前页面的背景音乐播放器，则在文章 Front Matter 中配置：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 关闭背景音乐</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></span></pre></td></tr></table></figure><h1 id=\"随机图库\"><a class=\"anchor\" href=\"#随机图库\">#</a> 随机图库</h1>\n<ul>\n<li>\n<p>默认的图片列表位于  <code>&lt;root&gt;/themes/shoka/_images.yml</code>  中。<br />\n使用了渣浪图库，使用一些上传工具，比如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waWMuZ2ltaG95LmNvbS8=\">这里</span><br />\n上传后图片的链接是  <code>http://wx4.sinaimg.cn/large/6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code>  。<br />\n只需要新一行写上  <code>- 6833939bly1gicmnywqgpj20zk0m8dwx.jpg</code>  。</p>\n<p>如果想要自定义，则在  <code>&lt;root&gt;/source/_data/</code>  目录新建一个  <code>images.yml</code>  文件，这个文件中的图片至少 6 枚，将完全覆盖默认的图片列表。</p>\n</li>\n<li>\n<p>也可以直接在图片列表 yml 文件中，写上任意外链图片地址</p>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/qAMYEFXxJcKRsiG.gif</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/rjdhcSgEN8COBPA.jpg</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/HKyzSd7NI3mlBpt.jpg</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/Y1CBXqgeokEs457.jpg</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">-</span> https<span class=\"token punctuation\">:</span>//i.loli.net/2020/10/30/Z5W6r2BSoiThHG1.jpg</pre></td></tr></table></figure><ul>\n<li>也可以在主题配置文件中，设置图床 API：</li>\n</ul>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">image_server</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"https://acg.xydwz.cn/api/api.php\"</span></pre></td></tr></table></figure><h1 id=\"网页标题栏签名\"><a class=\"anchor\" href=\"#网页标题栏签名\">#</a> 网页标题栏签名</h1>\n<p>原样式：</p>\n<ul>\n<li>\n<p><strong>（●´3｀●）やれやれだぜ</strong></p>\n</li>\n<li>\n<p><strong>（´Д｀）大変だ！</strong></p>\n</li>\n</ul>\n<p>对应修改文件位置：  <code>&lt;root&gt;\\themes\\shoka\\languages</code>  中对应语言中的  <code>favicon</code>  元素：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">favicon</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">show</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 切换回来的提示语</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token key atrule\">hide</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 退出页面的签名</span></pre></td></tr></table></figure><h1 id=\"加载第三方组件\"><a class=\"anchor\" href=\"#加载第三方组件\">#</a> 加载第三方组件</h1>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">vendors</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\"># 略略略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\"># 略略略</span></pre></td></tr></table></figure><p>包括：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"><code>pace</code></th>\n<th style=\"text-align:left\">加载进度条</th>\n<th style=\"text-align:left\">全局</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><code>pjax</code></td>\n<td style=\"text-align:left\">页面无刷新加载</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>anime</code></td>\n<td style=\"text-align:left\">js 动画效果</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>algolia</code>   <code>instantsearch</code></td>\n<td style=\"text-align:left\">基于 algolia 的站内搜索</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>lazyload</code></td>\n<td style=\"text-align:left\">图片懒加载</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>quicklink</code></td>\n<td style=\"text-align:left\">链接资源预加载</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fetch</code></td>\n<td style=\"text-align:left\">获取播放列表</td>\n<td style=\"text-align:left\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>katex</code>   <code>copy_tex</code></td>\n<td style=\"text-align:left\">数学公式显示及复制</td>\n<td style=\"text-align:left\">按需</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>fancybox</code></td>\n<td style=\"text-align:left\">图片放大显示及排列</td>\n<td style=\"text-align:left\">按需</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>valine</code></td>\n<td style=\"text-align:left\">基于 LeanCloud 的评论系统及文章阅读次数统计</td>\n<td style=\"text-align:left\">按需</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><code>chart</code></td>\n<td style=\"text-align:left\">图表显示</td>\n<td style=\"text-align:left\">按需</td>\n</tr>\n</tbody>\n</table>\n<p>以上文件加载全部基于 jsDelivr，并对全局加载的组件进行了文件合并。<br />\n如果不明白啥意思，则不要轻易修改。</p>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://arachnid.cc/hexo-shoka-create/",
            "url": "https://arachnid.cc/hexo-shoka-create/",
            "title": "博客搭建笔记之 Hexo-shoka",
            "date_published": "2022-05-03T05:16:58.610Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<ol>\n<li>\n<p>欢迎访问 “ <strong>Arachnid's blog</strong> ”：<a href=\"https://arachnid.cc\">https://arachnid.cc</a></p>\n</li>\n<li>\n<p>本系列专属于记录个人博客搭建过程，使用 Hexo 框架 + shoka 主题 + Github pages 服务；你说有啥好？那就是：gayhub 不倒博客继续跑。</p>\n</li>\n<li>\n<p>目前功能效果：分类、标签、评论、搜索、背景音乐、赞赏、字数统计、阅读量统计、随机图库、社交外链、页面特效等等。</p>\n</li>\n</ol>\n<h1 id=\"准备工作\"><a class=\"anchor\" href=\"#准备工作\">#</a> 准备工作</h1>\n<p>此处开始之前，默认你已经实现了以下操作：</p>\n<ul>\n<li>拥有一个 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">Github</span> 账号，没有的话去注册一个；</li>\n<li>安装了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ub2RlanMub3JnL2VuLw==\">Node.js</span> （注意 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvI05vZGUtanMtJUU3JTg5JTg4JUU2JTlDJUFDJUU5JTk5JTkwJUU1JTg4JUI2\">Hexo 版本限制</span>），并了解相关 npm 的基础知识；</li>\n<li>安装了 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS8=\">git</span>（或者其它终端），以下默认你的终端服务为 git 。</li>\n</ul>\n<p>然后其他的 git 绑定 Github、生成 ssh 这些操作也默认你准备完成了，实在不懂就网上搜一下吧。</p>\n<h1 id=\"网站建立\"><a class=\"anchor\" href=\"#网站建立\">#</a> 网站建立</h1>\n<h2 id=\"本地建站\"><a class=\"anchor\" href=\"#本地建站\">#</a> 本地建站</h2>\n<p><strong>1、安装 Hexo</strong></p>\n<p>打开 git 终端，输入安装命令并回车：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli</pre></td></tr></table></figure><p>然后拓展一下 npm 常规命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">ls</span> <span class=\"token parameter variable\">-dept</span> <span class=\"token number\">0</span> <span class=\"token comment\">#查看已安装插件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> Plugin_name <span class=\"token parameter variable\">--save</span> <span class=\"token comment\">#安装名为 Plugin_name 的插件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> uninstall Plugin_name <span class=\"token comment\">#卸载名为 Plugin_name 的插件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> outdated <span class=\"token comment\">#检查插件更新</span></pre></td></tr></table></figure><p><strong>2、建立本地存储</strong></p>\n<p><strong>创建</strong>并<strong>打开</strong>你需要存放 blog 网站代码的文件夹，例如 “<em>blog_dir</em>” ：</p>\n<pre><code>mkdir &quot;blog_dir&quot;\ncd &quot;blog_dir&quot;\n</code></pre>\n<p>初始化 Hexo，输入命令并回车：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo init</pre></td></tr></table></figure><p>然后启动本地服务查看，此处为动态访问，非静态网页：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>最后根据输出提示，浏览器打开链接 <span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo0MDAwLw==\">http://localhost:4000/</span>，你将会访问到 Hello World；至此，你已经完成本地博客搭建了，请为自己欢呼 &quot;tada&quot;</p>\n<p><strong>note：</strong> 可能有些在启动本地服务查看时会出现端口被占用的情况，那么可以通过更改端口来实现访问，具体命令看下一点。</p>\n<p><strong>3、hexo 常用命令</strong></p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new &quot;postName&quot; #新建文章</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo new page &quot;pageName&quot; #新建页面</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo new draft &quot;draftName&quot; #新建草稿</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo generate #生成静态页面至 public 目录</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo server #本地动态访问页面（默认端口 4000，&#39;ctrl + c&#39; 关闭 server）</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>hexo deploy #部署到服务器</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hexo clean #删除缓存文件及静态文件</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hexo help  #查看帮助</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hexo version  #查看 Hexo 的版本</pre></td></tr></table></figure><p>更多操作可查看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvY29tbWFuZHMuaHRtbA==\">Hexo 指令</span></p>\n<p>关于有用的指令缩写：</p>\n<figure class=\"highlight raw\"><figcaption data-lang=\"\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo cl &#x3D;&#x3D; hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo n &#x3D;&#x3D; hexo new</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo g &#x3D;&#x3D; hexo generate</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo s &#x3D;&#x3D; hexo server</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>hexo d &#x3D;&#x3D; hexo deploy</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>hexo s -p &quot;new_port&quot; #更改访问端口并启动访问服务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>hexo s -s #调用静态页面进行本地访问，确保调用过 &#96;hexo g&#96; 命令</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>hexo d -g #预先生成静态文件并部署到服务器</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>hexo cl &amp;&amp; hexo d -g #清缓存、重构静态页面、部署 --- 俗称 &quot;一键三连&quot;</pre></td></tr></table></figure><h2 id=\"云端部署-基于-github-pages\"><a class=\"anchor\" href=\"#云端部署-基于-github-pages\">#</a> 云端部署 --- 基于 Github pages</h2>\n<p><strong>1、创建仓库</strong></p>\n<p>前往 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLw==\">GitHub</span> 并<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL25ldw==\">创建</span>一个名为 <strong><em>username</em> .github.io</strong> 的公共存储库，其中<em> username</em> 是您在 GitHub 上的用户名（注意必须要对应上，否则无法使用）</p>\n<p><strong>2、关联服务器地址</strong></p>\n<p>打开你的 “<em>blog_dir</em>” 文件夹，在根目录下找到  <code>_config.yml</code>  文件对其进行以下修改：</p>\n<p><img data-src=\"image-20220503173246533.png\" alt=\"image-20220503173246533\" /></p>\n<p><code>repo</code>  为上面创建的仓库地址， <code>branch</code>  填写主分支（新的是  <code>main</code>  ，以前旧的是  <code>master</code> ）</p>\n<p>安装关联插件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>其他的就不多作解释了，详细可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudA==\">Hexo 一站式部署</span></p>\n<p><strong>3、一键三连</strong></p>\n<p>执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo cl <span class=\"token operator\">&amp;&amp;</span> hexo d <span class=\"token parameter variable\">-g</span></pre></td></tr></table></figure><h2 id=\"域名绑定可选\"><a class=\"anchor\" href=\"#域名绑定可选\">#</a> 域名绑定（可选）</h2>\n<p><strong>1、注册购买域名</strong></p>\n<p>一般的话，国内比较好的就 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93YW53YW5nLmFsaXl1bi5jb20vZG9tYWluLw==\">阿里云</span>或者 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbnNwb2QuY2xvdWQudGVuY2VudC5jb20v\">腾讯云</span>，国外就 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmFtZXNpbG8uY29tLw==\">NameSilo</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZHluYWRvdC5jb20v\">Dynadot</span>，当然，除了这些还有很多域名购买网站；然而，最好就是找那些比较大型稳定的网站购买；除此之外，你也可以到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF6aHVtaS5jb20v\">https://www.nazhumi.com/</span> 中查看在哪里购买会性价比更高一些。</p>\n<p><strong>2、域名解析</strong></p>\n<p>对于不同的购买网站，其操作不同，这里用的是 NameSilo：</p>\n<p><img data-src=\"image-20220512223909467.png\" alt=\"image-20220512223909467\" /></p>\n<p>进入域名管理，然后在你想要设置的域名中，配置 DNS 解析。</p>\n<p><img data-src=\"image-20220512224914568.png\" alt=\"image-20220512224914568\" /></p>\n<p>在 DNS 设置部分，你可以删除自带的记录，再重新添加；又或者直接编辑原有的记录，不过要对应上类型，一般只需要  <code>C</code>  和  <code>CNAME</code>  这两个类型就足够了。</p>\n<p><strong>3、绑定域名到 Hexo 博客</strong></p>\n<p>进入本地博客文件夹的 source 目录，打开记事本，里面输入自己的域名，如 <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5leGFtcGxlLmNvbQ==\">http://www.example.com</span>，保存名称为 “CNAME”。如我的是：</p>\n<p><img data-src=\"image-20220512230351288.png\" alt=\"image-20220512230351288\" /></p>\n<p>记住，直接是 “CNAME” 文件，是不带后缀的。</p>\n<p><strong>4、开启 HTTPS 服务</strong></p>\n<p>在完成上一步域名文件创建后，通过 “一键三连” 重新部署网站，然后来到 GitHub 博客仓库里进行打开：</p>\n<p><img data-src=\"image-20220512231152522.png\" alt=\"image-20220512231152522\" /></p>\n<p>HTTPS 证书部署成功需要一定时间，等大概几分钟再访问域名，就可以看到域名前面的小绿锁了，至此 HTTPS 配置完成！</p>\n<h1 id=\"主题修改\"><a class=\"anchor\" href=\"#主题修改\">#</a> 主题修改</h1>\n<p>hexo 目前收录了三百多个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3RoZW1lcy8=\">主题</span>，你可以对他们进行一直修改，这些都是可以的，当然，如果你也可以自己创作一个专属于你自己的主题。以下皆以 shoka 主题进行解说。</p>\n<h2 id=\"应用主题\"><a class=\"anchor\" href=\"#应用主题\">#</a> 应用主题</h2>\n<h3 id=\"安装主题文件\"><a class=\"anchor\" href=\"#安装主题文件\">#</a> 安装主题文件</h3>\n<p>拉取 Shoka 主题到  <code>themes/shoka</code>  目录，在 Hexo 根目录（即你的 blog 根目录，后面全部统称  <code>&lt;root&gt;</code>  ）执行下面的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://github.com/amehime/hexo-theme-shoka.git ./themes/shoka</pre></td></tr></table></figure><h3 id=\"更换主题模式\"><a class=\"anchor\" href=\"#更换主题模式\">#</a> 更换主题模式</h3>\n<p>修改配置文件，更改主题模式为  <code>shoka</code>  ；在  <code>&lt;root&gt;/_config.yml</code>  文件中找到  <code>theme</code>  ，做如下更改：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> shoka</pre></td></tr></table></figure><h3 id=\"修改主题配置\"><a class=\"anchor\" href=\"#修改主题配置\">#</a> 修改主题配置</h3>\n<p>主题配置的所有参数在  <code>&lt;root&gt;/themes/shoka/_config.yml</code>  文件中。</p>\n<p>为了避免以后主题版本升级或者提交出现配置合并或冲突，建议复制主题目录下的   <code>_config.yml</code>  到 Hexo 根目录，并命名为  <code>_config.shoka.yml</code>  ，也就是说，所有主题的自定义配置均保存于  <code>&lt;root&gt;/_config.shoka.yml</code>  文件。现在，您可以删除 shoka 主题目录下的  <code>_config.yml</code>  文件，或将它重命名为  <code>_config.yml.template</code>  。</p>\n<p>然后，里面的配置信息，这里就不阐述了，直接看 shoka 主题的博主姐姐的文章吧：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9jb25maWcv\">主题的基础配置可以参考这里</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kaXNwbGF5Lw==\">界面显示相关的配置参考这里</span></p>\n<h2 id=\"插件依赖\"><a class=\"anchor\" href=\"#插件依赖\">#</a> 插件依赖</h2>\n<p>根据 shoka 主题的博主姐姐写的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zaG9rYS5sb3N0eXUubWUvY29tcHV0ZXItc2NpZW5jZS9ub3RlL3RoZW1lLXNob2thLWRvYy9kZXBlbmRlbnRzLw==\">文章</span> ，净化的 shoka 主题必须安装以下两个插件：</p>\n<table>\n<thead>\n<tr>\n<th>插件名称</th>\n<th>npm 地址</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hexo-renderer-multi-markdown-it</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1yZW5kZXJlci1tdWx0aS1tYXJrZG93bi1pdA==\">链接</span></td>\n<td>md 文件渲染器，压缩 css/js/html</td>\n</tr>\n<tr>\n<td>hexo-autoprefixer</td>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvaGV4by1hdXRvcHJlZml4ZXI=\">链接</span></td>\n<td>给生成的 css 文件们添加浏览器前缀</td>\n</tr>\n</tbody>\n</table>\n<p>然后安装完以上插件后，修改站点配置文件  <code>&lt;root&gt;/_config.yml</code>  ，加入相关配置。</p>\n<h3 id=\"multi-markdown-it-安装与配置\"><a class=\"anchor\" href=\"#multi-markdown-it-安装与配置\">#</a> multi-markdown-it 安装与配置</h3>\n<h4 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h4>\n<ol>\n<li>\n<p>安装前，记得务必卸载掉默认的  <code>hexo-renderer-marked</code>  ，以及别的 markdown 文件渲染器。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> un hexo-renderer-marked <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> remove hexo-renderer-marked</pre></td></tr></table></figure></li>\n<li>\n<p>安装插件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">yarn</span> <span class=\"token function\">add</span> hexo-renderer-multi-markdown-it</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h4>\n<ol>\n<li>\n<p>加入  <code>markdown</code>  配置，用来渲染 md 文件</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">markdown</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">render</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 渲染器设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 过滤 HTML 标签</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">xhtmlOut</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 使用 '/' 来闭合单标签 （比如 &lt;br />）。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">breaks</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 转换段落里的 '\\n' 到 &lt;br>。</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token key atrule\">linkify</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># 将类似 URL 的文本自动转换为链接。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">typographer</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token key atrule\">quotes</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'“”‘’'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># markdown-it 插件设置</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>toc<span class=\"token punctuation\">-</span>and<span class=\"token punctuation\">-</span>anchor</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 文章目录以及锚点应用的 class 名称，shoka 主题必须设置成这样</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token key atrule\">tocClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'toc'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token key atrule\">anchorClassName</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'anchor'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>multimd<span class=\"token punctuation\">-</span>table</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>          <span class=\"token key atrule\">multiline</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>          <span class=\"token key atrule\">rowspan</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>          <span class=\"token key atrule\">headerless</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>furigana</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>          <span class=\"token key atrule\">fallbackParens</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"()\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">plugin</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> ./markdown<span class=\"token punctuation\">-</span>it<span class=\"token punctuation\">-</span>spoiler</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token key atrule\">options</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>          <span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"你知道得太多了\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>加入  <code>minify</code>  配置，压缩 css/js/html</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">minify</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">html</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 排除 hexo-feed 用到的模板文件</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/json.ejs'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/atom.ejs'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/rss.ejs'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token key atrule\">css</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.css'</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token key atrule\">js</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token key atrule\">mangle</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token key atrule\">toplevel</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token key atrule\">compress</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">-</span> <span class=\"token string\">'**/*.min.js'</span></pre></td></tr></table></figure></li>\n<li>\n<p>停用默认代码高亮功能，否则代码块的 mac 样式不能正常显示。</p>\n<p>在  <code>&lt;root&gt;/_config.yml</code>  中找到  <code>highlight</code>  和  <code>prismjs</code>  ，把  <code>enable</code>  改成  <code>false</code>  。</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">highlight</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">prismjs</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token key atrule\">enable</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"autoprefixer-安装与配置\"><a class=\"anchor\" href=\"#autoprefixer-安装与配置\">#</a> autoprefixer 安装与配置</h3>\n<h4 id=\"安装-2\"><a class=\"anchor\" href=\"#安装-2\">#</a> 安装</h4>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npm i hexo<span class=\"token punctuation\">-</span>autoprefixer <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>save</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>yarn add hexo<span class=\"token punctuation\">-</span>autoprefixer</pre></td></tr></table></figure><h4 id=\"配置-2\"><a class=\"anchor\" href=\"#配置-2\">#</a> 配置</h4>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">autoprefixer</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">-</span> <span class=\"token string\">'*.min.css'</span></pre></td></tr></table></figure><h1 id=\"站点基本配置\"><a class=\"anchor\" href=\"#站点基本配置\">#</a> 站点基本配置</h1>\n<h2 id=\"设置站点资料\"><a class=\"anchor\" href=\"#设置站点资料\">#</a> 设置站点资料</h2>\n<p>在  <code>&lt;root&gt;/_config.yml</code>  中的  <code># Site</code>  栏目可以配置属于自己信息：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">title</td>\n<td style=\"text-align:center\">网站标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">subtitle</td>\n<td style=\"text-align:center\">网站副标题</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">description</td>\n<td style=\"text-align:center\">网站描述</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">keywords</td>\n<td style=\"text-align:center\">网站关键词，搜索引擎会搜索这些关键词</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">author</td>\n<td style=\"text-align:center\">博主名字</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">language</td>\n<td style=\"text-align:center\">网站语言，默认为英语 en，中文为 zh-CN</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">timezone</td>\n<td style=\"text-align:center\">网站使用时区，默认使用访问电脑所在时区也可以指定比如使用上海时区  <code>Asia/Shanghai</code>  。建议使用默认就行了</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"配置-about-页面\"><a class=\"anchor\" href=\"#配置-about-页面\">#</a> 配置 About 页面</h2>\n<p>在 Hexo 根目录下执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new page <span class=\"token string\">\"about\"</span></pre></td></tr></table></figure><p>在  <code>&lt;root&gt;/source/about/index.md</code>  文件中添加下面的字段：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> 自我介绍标题</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> about</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">---</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>自我介绍正文</pre></td></tr></table></figure><p>其中 Front-matter 的  <code>layout: about</code>  字段为<strong>必要的</strong>且<strong>不可修改</strong>为其它值；Front-matter 的  <code>title</code>  和正文内容由您自定义编写。</p>\n<h2 id=\"配置-404-页面\"><a class=\"anchor\" href=\"#配置-404-页面\">#</a> 配置 404 页面</h2>\n<p><span class=\"red\">一般来说，hexo 的 404 页面配置是通过如下来设置的：</span></p>\n<p>在 Hexo 根目录下  <code>source</code>  中创建  <code>404.md</code>  文件，添加字段如下：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token front-matter-block\"><span class=\"token punctuation\">---</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token front-matter yaml language-yaml\"><span class=\"token key atrule\">layout</span><span class=\"token punctuation\">:</span> <span class=\"token number\">404</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"[404]\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"May the Force be with you :&amp;#41;\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">---</span></span></pre></td></tr></table></figure><p>其中 Front-matter 的  <code>layout: 404</code>  字段为<strong>必要的</strong>且<strong>不可修改</strong>为其它值， <code>title</code>  字段为您自定义的标题， <code>description</code>  字段为 404 页面的自定义描述。</p>\n<p><span class=\"red\">但是，在 shoka 主题上，主题作者是写死了 404 页面的，因此只能做一些简单的修改，当然，你也可以魔改： </span></p>\n<ol>\n<li>\n<p><strong>显示图片：</strong></p>\n<p>在  <code>&lt;root&gt;\\themes\\shoka\\source\\images</code>  中找到  <code>404.png</code>  ，用你喜欢的图片替换即可，如果是其它格式的，在 ``&lt;root&gt;\\themes\\shoka\\source\\css_common\\components\\pages\\pages.styl <code>搜索</code>  404.png` 替换即可；</p>\n<p>需要注意的是， <code>links</code>  链接块中站点图片默认设为  <code>./*/images/404.png</code>  。</p>\n</li>\n<li>\n<p><strong>标题文字：</strong></p>\n<p>在 ``&lt;root&gt;themes\\shoka\\languages <code>文件夹中，找到你当前设置的语言文件，对</code>  not_found` 字段进行更改 。</p>\n</li>\n</ol>\n",
            "tags": [
                "hexo"
            ]
        },
        {
            "id": "https://arachnid.cc/markdown-syntax-testing/",
            "url": "https://arachnid.cc/markdown-syntax-testing/",
            "title": "markdown 语法测试",
            "date_published": "2022-04-28T07:45:50.867Z",
            "content_html": "<h1 id=\"welcome-to-arachnids-blog\"><a class=\"anchor\" href=\"#welcome-to-arachnids-blog\">#</a> Welcome to Arachnid‘s blog!</h1>\n<h2 id=\"排版\"><a class=\"anchor\" href=\"#排版\">#</a> 排版</h2>\n<p><strong>粗体</strong> <em>斜体</em></p>\n<p><s>这是一段错误的文本。</s></p>\n<p>引用:</p>\n<blockquote>\n<p>引用鲁迅的话：我以为 “别人尊重我，是因为我很优秀”，后来才明白，“别人尊重我，是因为别人很优秀。</p>\n</blockquote>\n<p>有序列表:</p>\n<ol>\n<li>支持 Vim</li>\n<li>支持 Emacs</li>\n</ol>\n<p>无序列表:</p>\n<ul>\n<li>项目 1</li>\n<li>项目 2</li>\n</ul>\n<h2 id=\"图片与链接\"><a class=\"anchor\" href=\"#图片与链接\">#</a> 图片与链接</h2>\n<p>图片:</p>\n<p><img data-src=\"https://avatars.githubusercontent.com/u/48347583?v=4\" alt=\"test Image\" title=\"test Image\" /></p>\n<p>链接:</p>\n<p><a href=\"https://arachnid.cc\">这是去往 Arachnid 博客的链接</a></p>\n<h2 id=\"标题\"><a class=\"anchor\" href=\"#标题\">#</a> 标题</h2>\n<p>以下是各级标题，最多支持 5 级标题</p>\n<pre><code># h1\n## h2\n### h3\n#### h4\n##### h4\n###### h5\n</code></pre>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码</h2>\n<p>示例:</p>\n<pre><code>function get(key) &#123;\n    return m[key];\n&#125;\n</code></pre>\n<p>代码高亮示例:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"><span>t</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* nth element in the fibonacci series.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* @param n >= 0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>* @return the nth element, >= 0.</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">var</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>n <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    tmp <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    a <span class=\"token operator\">+=</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    b <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token function\">fib</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Employee</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   empCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> salary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        self<span class=\"token punctuation\">.</span>salary <span class=\"token operator\">=</span> salary</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        Employee<span class=\"token punctuation\">.</span>empCount <span class=\"token operator\">+=</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><h1 id=\"markdown-扩展\"><a class=\"anchor\" href=\"#markdown-扩展\">#</a> Markdown 扩展</h1>\n<p>Markdown 扩展支持:</p>\n<ul>\n<li>表格</li>\n<li>定义型列表</li>\n<li>Html 标签</li>\n<li>脚注</li>\n<li>目录</li>\n<li>时序图与流程图</li>\n<li>MathJax 公式</li>\n</ul>\n<h2 id=\"表格\"><a class=\"anchor\" href=\"#表格\">#</a> 表格</h2>\n<table>\n<thead>\n<tr>\n<th>Item</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Computer</td>\n<td>$1600</td>\n</tr>\n<tr>\n<td>Phone</td>\n<td>$12</td>\n</tr>\n<tr>\n<td>Pipe</td>\n<td>$1</td>\n</tr>\n</tbody>\n</table>\n<p>可以指定对齐方式，如 Item 列左对齐，Value 列右对齐，Qty 列居中对齐</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Item</th>\n<th style=\"text-align:right\">Value</th>\n<th style=\"text-align:center\">Qty</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Computer</td>\n<td style=\"text-align:right\">$1600</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Phone</td>\n<td style=\"text-align:right\">$12</td>\n<td style=\"text-align:center\">12</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Pipe</td>\n<td style=\"text-align:right\">$1</td>\n<td style=\"text-align:center\">234</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"定义型列表\"><a class=\"anchor\" href=\"#定义型列表\">#</a> 定义型列表</h2>\n<dl>\n<dt>名词 1</dt>\n<dd>\n<p>定义 1（左侧有一个可见的冒号和四个不可见的空格）</p>\n</dd>\n<dt>代码块 2</dt>\n<dd>\n<p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p>\n<pre><code>  代码块（左侧有八个不可见的空格）\n</code></pre>\n</dd>\n</dl>\n<h2 id=\"html-标签\"><a class=\"anchor\" href=\"#html-标签\">#</a> Html 标签</h2>\n<p>支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格，最后使用  <code>` `</code>  把 Html 代码包裹起来应该就可以了：</p>\n<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;\n        &lt;th&gt;星期一&lt;/th&gt;\n        &lt;th&gt;星期二&lt;/th&gt;\n        &lt;th&gt;星期三&lt;/th&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;李强&lt;/td&gt;\n        &lt;td&gt;张明&lt;/td&gt;\n        &lt;td&gt;王平&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>\n<p>\n\n<table>\n    <tr>\n        <th rowspan=\"2\">值班人员</th>\n        <th>星期一</th>\n        <th>星期二</th>\n        <th>星期三</th>\n    </tr>\n    <tr>\n        <td>李强</td>\n        <td>张明</td>\n        <td>王平</td>\n    </tr>\n</table>\n\n\n</p>\n<p><strong>提示</strong>，如果想对图片的宽度和高度进行控制，你也可以通过 img 标签，如:</p>\n<p>\n\n<img data-src=\"https://avatars.githubusercontent.com/u/48347583?v=4\" width=\"50px\" />\n\n</p>\n<h2 id=\"脚注\"><a class=\"anchor\" href=\"#脚注\">#</a> 脚注</h2>\n<p>Markdown<sup class=\"footnote-ref\"><a href=\"#fn1\" id=\"fnref1\">[1]</a></sup> 来创建一个脚注</p>\n<h2 id=\"目录\"><a class=\"anchor\" href=\"#目录\">#</a> 目录</h2>\n<p>通过  <code>[TOC]</code>  在文档中插入目录，如:</p>\n<p>[TOC]</p>\n<h2 id=\"时序图与流程图\"><a class=\"anchor\" href=\"#时序图与流程图\">#</a> 时序图与流程图</h2>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">sequenceDiagram</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Alice<span class=\"token arrow operator\">-></span>Bob<span class=\"token operator\">:</span> Hello Bob, how are you?</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">Note right of</span> Bob<span class=\"token operator\">:</span> Bob thinks</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Bob<span class=\"token arrow operator\">--></span>Alice<span class=\"token operator\">:</span> I am good thanks!</pre></td></tr></table></figure><p>流程图:</p>\n<figure class=\"highlight mermaid\"><figcaption data-lang=\"mermaid\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">graph</span> TB</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    A<span class=\"token text string\">[Hard]</span> <span class=\"token arrow operator\">--></span><span class=\"token label property\">|Text|</span> B<span class=\"token text string\">(Round)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    B <span class=\"token arrow operator\">--></span> C<span class=\"token text string\">&#123;Decision&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    C <span class=\"token arrow operator\">--></span><span class=\"token label property\">|One|</span> D<span class=\"token text string\">[Result 1]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    C <span class=\"token arrow operator\">--></span><span class=\"token label property\">|Two|</span> E<span class=\"token text string\">[Result 2]</span></pre></td></tr></table></figure><blockquote>\n<p><strong>提示:</strong> 更多关于时序图与流程图的语法请参考:</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL21lcm1haWQtanMvbWVybWFpZC9ibG9iL2RldmVsb3AvUkVBRE1FLnpoLUNOLm1k\">Mermaid</span></li>\n</ul>\n</blockquote>\n<h2 id=\"katex-数学公式\"><a class=\"anchor\" href=\"#katex-数学公式\">#</a> KaTex 数学公式</h2>\n<p>$ 表示行内公式：</p>\n<p>质能守恒方程可以用一个很简洁的方程式 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">E=mc^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 来表达。</p>\n<p><code>$$</code>  表示整行公式：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">\\sum_{i=1}^n a_i=0 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.929066em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.3000050000000005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>x</mi></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding=\"application/x-tex\">f(x_1,x_x,\\ldots,x_n) = x_1^2 + x_2^2 + \\cdots + x_n^2 \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1111079999999998em;vertical-align:-0.247em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></munderover><mrow><msub><mover accent=\"true\"><mi>γ</mi><mo stretchy=\"true\">^</mo></mover><mrow><mi>k</mi><mi>j</mi></mrow></msub><msub><mi>z</mi><mi>k</mi></msub></mrow></mrow><annotation encoding=\"application/x-tex\">\\sum^{j-1}_{k=0}{\\widehat{\\gamma}_{kj} z_k} \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.16089em;vertical-align:-1.302113em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.8587770000000001em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">0</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.347113em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.302113em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.67056em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05556em;\">γ</span></span></span><span class=\"svg-align\" style=\"top:-3.43056em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span style=\"height:0.24em;\"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22\nc-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>更复杂的公式：</p>\n\\begin{eqnarray}\\vec\\nabla \\times (\\vec\\nabla f) & = & 0  \\cdots\\cdots梯度场必是无旋场\\\\\n\\vec\\nabla \\cdot(\\vec\\nabla \\times \\vec F) & = & 0\\cdots\\cdots旋度场必是无散场\\\\\n\\vec\\nabla \\cdot (\\vec\\nabla f) & = & {\\vec\\nabla}^2f\\\\\n\\vec\\nabla \\times(\\vec\\nabla \\times \\vec F) & = & \\vec\\nabla(\\vec\\nabla \\cdot \\vec F) - {\\vec\\nabla}^2 \\vec F\\\\\\end{eqnarray} \n<p>访问 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9rYXRleC5vcmcv\">KaTex</span> 参考更多使用方法。</p>\n<hr class=\"footnotes-sep\" />\n<section class=\"footnotes\">\n<ol class=\"footnotes-list\">\n<li id=\"fn1\" class=\"footnote-item\"><p>Markdown 是一种轻量级标记语言. <a href=\"#fnref1\" class=\"footnote-backref\">↩︎</a></p>\n</li>\n</ol>\n</section>\n",
            "tags": []
        },
        {
            "id": "https://arachnid.cc/arch-linux-install/",
            "url": "https://arachnid.cc/arch-linux-install/",
            "title": "基于官方指导安装 Arch Linux",
            "date_published": "2022-04-12T03:02:19.000Z",
            "content_html": "<blockquote>\n<p>官方 wiki 安装中文指导：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSW5zdGFsbGF0aW9uX2d1aWRlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp\">https://wiki.archlinux.org/title/Installation_guide_(简体中文)</span></p>\n<p>最好还是以<strong>英文版</strong>的为基准，因为 ArchLinux 是一个激进的系统，更新比较快，可能刚写完这篇笔记，转头已经有些对应不上了，哈哈哈。</p>\n</blockquote>\n<h2 id=\"系统镜像\"><a class=\"anchor\" href=\"#系统镜像\">#</a> 系统镜像</h2>\n<p>官方镜像下载地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==\">https://archlinux.org/download/</span></p>\n<p>当然，也可以去各大高校提供的镜像源网站下载。</p>\n<h2 id=\"启动盘制作\"><a class=\"anchor\" href=\"#启动盘制作\">#</a> 启动盘制作</h2>\n<p><strong>1、windows 平台</strong></p>\n<p>可以使用 Rufus：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ydWZ1cy5pZS96aC8=\">https://rufus.ie/zh/</span></p>\n<p>这是一款开源、免费、小巧（1.1mb）纯粹的系统启动盘制作工具。<br />\n目前所支持的 ISO 镜像如下：</p>\n<p><img data-src=\"image-20220412112425056.png\" alt=\"image-20220412112425056\" /></p>\n<p><strong>2、Uinx 平台</strong></p>\n<p>类 Unix 系统可以直接使用  <code>dd</code>  命令来制作启动盘。</p>\n<p><code>dd</code>  命令使用可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWRkLmh0bWw=\">https://www.runoob.com/linux/linux-comm-dd.html</span></p>\n<p><strong>3、多平台</strong></p>\n<p>可以使用开源的 etcher：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmFsZW5hLmlvL2V0Y2hlci8=\">https://www.balena.io/etcher/</span></p>\n<blockquote>\n<p>然后本篇文章是基于官方指导的总结分析安装的笔记，如下开始正式安装配置，因为是以官方 wiki 安装为指导，所以下面用到的操作的标题将一一对应官方 wiki 的标题，没用到的将忽略不写，以及需要增加的将给出说明。目前使用的镜像版本： <code>archlinux-2022.04.01-x86_64.iso</code></p>\n</blockquote>\n<h2 id=\"引导安装\"><a class=\"anchor\" href=\"#引导安装\">#</a> 引导安装</h2>\n<p>Arch 的启动引导过程有两种：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQklPUw==\">BIOS</span> 和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvVUVGSQ==\">UEFI</span> 系统，这两者的引导过程是完全不同的。在 Arch 中它们的引导加载及区别可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQXJjaF9ib290X3Byb2Nlc3M=\">https://wiki.archlinux.org/title/Arch_boot_process</span></p>\n<p>目前大部分设备的引导方式主要分为  <code>UEFI 引导 + GPT 分区表</code>  和  <code>BIOS(LEGACY) 引导 + MBR 分区表</code>  这两种，而在新的机器里大部分都采用了  <code>UEFI/GPT</code>  引导的方式，当然，同时也兼容  <code>BIOS/MBR</code>  。</p>\n<p>UEFI 进入：</p>\n<p><img data-src=\"image-20220412115757611.png\" alt=\"image-20220412115757611\" /></p>\n<p>BIOS 进入：</p>\n<p><img data-src=\"image-20220412120426116.png\" alt=\"image-20220412120426116\" /></p>\n<p>启动安装后，最终界面出现的效果是一样的：</p>\n<p><img data-src=\"image-20220412153955531.png\" alt=\"image-20220412153955531\" /></p>\n<h2 id=\"验证引导模式\"><a class=\"anchor\" href=\"#验证引导模式\">#</a> 验证引导模式</h2>\n<p>键入如下命令：（ <code>ls</code> ：表示列出目录内容；后面的路径可以利用 Tab 键 自动补全，即键入命令或文件名的前几个字符，然后按 [Tab] 键）</p>\n<pre><code>ls /sys/firmware/efi/efivars\n</code></pre>\n<p>如果命令结果显示了目录且没有报告错误，则系统以 UEFI 模式引导。</p>\n<p>如果目录不存在，则系统可能 **（注意是可能，并不一定确是 BIOS 模式）** 以 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvemg6QklPUw==\">BIOS</span> 模式 (或 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcGF0aWJpbGl0eV9TdXBwb3J0X01vZHVsZQ==\">CSM</span> 模式) 引导，如显示：</p>\n<pre><code>ls: cannot access '/sys/firmware/efi/efivars': No such file or directory\n</code></pre>\n<p>对于一些不是新的 / 格式过的磁盘，可能就不太适用了，当然，最好方法就是查看安装的主分区磁盘的属性。</p>\n<h2 id=\"连接到因特网\"><a class=\"anchor\" href=\"#连接到因特网\">#</a> 连接到因特网</h2>\n<p>1、检查网络接口是否启用</p>\n<pre><code>ip link\n</code></pre>\n<p>2、连接到网络</p>\n<ul>\n<li>有线：连接网线，并保证上级路由有网。</li>\n<li>无线：使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSXdkXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI2l3Y3Rs\">iwctl</span> 验证无线网络，具体操作点击链接查看。</li>\n</ul>\n<p>3、配置网络连接</p>\n<ul>\n<li>\n<p>动态：需要支持 DHCP，然后执行以下命令。</p>\n<pre><code>dhcpcd\n</code></pre>\n</li>\n<li>\n<p>静态：直接按照 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0d29ya19jb25maWd1cmF0aW9uXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFOSU5RCU5OSVFNiU4MCU4MV9JUF8lRTUlOUMlQjAlRTUlOUQlODA=\">静态 IP 地址</span> 这个链接进行操作。</p>\n</li>\n</ul>\n<p>4、检查网络连接</p>\n<p>在确认无误完成上面的操作后，通过 PING IP 来检查：</p>\n<pre><code>ping archlinux.org\n</code></pre>\n<p>**note：** 关于网络部分的，详情请看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0d29ya19jb25maWd1cmF0aW9u\">https://wiki.archlinux.org/title/Network_configuration</span></p>\n<h2 id=\"更新系统时间\"><a class=\"anchor\" href=\"#更新系统时间\">#</a> 更新系统时间</h2>\n<p>执行：</p>\n<pre><code>timedatectl set-ntp true\n</code></pre>\n<p>然后正常情况下是并没有输出的，所谓没有消息就是最好的消息，这就是 Linux/Unix 系统的设计思想。</p>\n<p>最后，执行如下命令来检查服务状态：</p>\n<pre><code>timedatectl status\n</code></pre>\n<h2 id=\"建立硬盘分区\"><a class=\"anchor\" href=\"#建立硬盘分区\">#</a> 建立硬盘分区</h2>\n<p>系统如果识别到磁盘，就会将其分配为一个块设备，如  <code>/dev/sda</code> 、 <code>/dev/nvme0n1</code>  或  <code>/dev/mmcblk0</code>  等等。然后可以执行如下命令查看：</p>\n<pre><code>fdisk -l\n</code></pre>\n<p>然后，针对不同的引导方式，其分区布局是不一样的，以官方给出的分区为例：</p>\n<ul>\n<li>\n<p><strong>UEFI 与</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI0dVSURfJUU1JTg4JTg2JUU1JThDJUJBJUU4JUExJUE4\">GPT</span></p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/mnt/boot</td>\n<td>/dev/<em>efi_system_partition</em></td>\n<td>EFI 系统分区</td>\n<td>至少 300 MiB</td>\n</tr>\n<tr>\n<td>[SWAP]</td>\n<td>/dev/<em>swap_partition</em></td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>/dev/<em>root_partition</em></td>\n<td>Linux x86-64 根目录 (/)</td>\n<td>剩余空间</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p><strong>BIOS 与</strong> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI01hc3Rlcl9Cb290X1JlY29yZA==\">MBR</span></p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[SWAP]</td>\n<td>/dev/<em>swap_partition</em></td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n<tr>\n<td>/mnt</td>\n<td>/dev/<em>root_partition</em></td>\n<td>Linux x86-64 根目录 (/)</td>\n<td>剩余空间</td>\n</tr>\n</tbody>\n</table>\n<p>然后在这里拓展一下  <code>MiB</code>  跟  <code>MB</code>  这两个单位， <code>MB</code>  是国际单位制 SI 制定的十进制标准单位制，这个 M 是 1000K，而  <code>MiB</code>  是国际电工委员会 IEC 制定的二进制标准，这个 M 是 1024K 。参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9waHlzaWNzLm5pc3QuZ292L2N1dS9Vbml0cy9iaW5hcnkuaHRtbA==\">https://physics.nist.gov/cuu/Units/binary.html</span></p>\n</li>\n<li>\n<p>其它的布局实例可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNSVCOCU4MyVFNSVCMSU4MCVFNyVBNCVCQSVFNCVCRSU4Qg==\">https://wiki.archlinux.org/title/Partitioning_(简体中文)# 布局示例</span></p>\n</li>\n</ul>\n<p>在了解上面的布局后，然后我们常用的引导方式有  <code>UEFI 引导 + GPT 分区表</code>  和  <code>BIOS(LEGACY) 引导 + MBR 分区表</code>  这两种，所以下面分开说明：</p>\n<ol>\n<li>\n<p><strong>BIOS/MBR</strong></p>\n<p>这种方式相对于另一种比较简单，所以就先说了。</p>\n<p>首先，先来了解一下  <code>[SWAP]</code>  挂载点和  <code>/mnt</code>  挂载点：</p>\n<ul>\n<li>\n<p><code>[SWAP]</code> ：swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存（物理内存，可以理解为内存条容量）不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间（有点类似于 windows 系统下的虚拟内存）。也就是说，当内存不够用时，我们使用 swap 分区来临时顶替，等到那些程序要运行时，再从 swap 中恢复保存的数据到内存中。这种 “拆东墙，补西墙” 的方式应用于几乎所有的操作系统中。</p>\n<p>使用 swap 交换分区，显著的优点是，通过操作系统的调度，应用程序实际可以使用的内存空间将远远超过系统的物理内存。</p>\n<p>那么 swap 分区到底设置成多大才最优？少了又觉得不够，多了又感觉浪费，那么我们可以参考 Redhat 官方文档中 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eC82L2h0bWwvaW5zdGFsbGF0aW9uX2d1aWRlL3MyLWRpc2twYXJ0cmVjb21tZW5kLXBwYyNpZDQzOTQwMDc=\">关于 swap 分区大小设置的建议</span>：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">物理内存</th>\n<th style=\"text-align:center\">建议的交换空间大小</th>\n<th style=\"text-align:center\">如果开启休眠功能建议的交换空间大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">⩽ 2GB</td>\n<td style=\"text-align:center\">内存的 2 倍</td>\n<td style=\"text-align:center\">内存的 3 倍</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt; 2GB – 8GB</td>\n<td style=\"text-align:center\">等于内存大小</td>\n<td style=\"text-align:center\">内存的 2 倍</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt; 8GB – 64GB</td>\n<td style=\"text-align:center\">至少 4G</td>\n<td style=\"text-align:center\">内存的 1.5 倍</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt; 64GB</td>\n<td style=\"text-align:center\">至少 4G</td>\n<td style=\"text-align:center\">不建议使用休眠</td>\n</tr>\n</tbody>\n</table>\n<p>最后结合日常使用，一般来说可以按照如下规则设置 swap 大小：</p>\n<ul>\n<li>4G 以内的物理内存，SWAP 设置为内存的 2 倍，不超过 4G。</li>\n<li>4-8G 的物理内存，SWAP 等于内存大小。</li>\n<li>8-64G 的物理内存，SWAP 设置为 8G。</li>\n<li>64-256G 物理内存，SWAP 设置为 16G。</li>\n</ul>\n</li>\n<li>\n<p><code>/mnt</code> ：全称  <code>mount</code>  可直接理解为 “挂载”，用于存放手动挂载的硬件。这部分是根目录 <code>/</code>  下的目录，用来挂载文件系统。</p>\n<p>一般的 Linux 根目录展开如下图：</p>\n<p><img data-src=\"994198-20160908160724832-375737054.png\" alt=\"img\" /></p>\n<p>然后按照官方的说明，是想把将根磁盘卷挂载到  <code>/mnt</code>  目录下，即  <code>/mnt</code>  变成  <code>/</code>  根目录。</p>\n</li>\n</ul>\n<p><strong>好了，了解完后下面正式开始。</strong></p>\n<p>执行命令：</p>\n<pre><code>fdisk /dev/sdx （sdx可以为sda、sdb等，具体以你实际需要挂载的磁盘名称为准）\n</code></pre>\n<p>接着你就进入了  <code>fdisk</code>  操作环境，为了获取该命令下的操作功能，根据提示输入  <code>m</code>  并回车查看各命令的作用：</p>\n<p><img data-src=\"image-20220414144302934.png\" alt=\"image-20220414144302934\" /></p>\n<p>在  <code>fdisk</code>  操作环境下：</p>\n<p>1、对于一个全新的磁盘（格式化了），输入  <code>o</code>  来创建一个全新的  <code>MBR</code>  分区表（因为这里是 BIOS 引导）；如果是旧磁盘（要么原本有  <code>MBR</code>  分区表，要么不是  <code>MBR</code>  属性  <code>DOS</code>  的），那对于非  <code>MBR</code>  分区表可能得更改分区表或者格式化，而已有  <code>MBR</code>  分区表的直接执行第 2 步。</p>\n<p>2、输入  <code>n</code>  创建一个新的分区，首先会让你选择类型分区，输入  <code>p</code>  选择主分区，回车接着选择分区号，这里一般直接回车使用默认数值，这样可以避免自己定义出现冲突；紧接着选择开始起扇区地址，如果不知道原有区域划分情况，那一般直接回车使用默认数值即可；随后，输入结束扇区地址或者容量大小，这里决定了你为该分区创建的容量大小；我们按照表格顺序创建分区，那这第一个就是  <code>swap</code>  交换分区，例如我分配的是 8G 容量，那可以直接输入容量大小： <code>+8G</code>  。</p>\n<p>3、创建完毕后，可以输入  <code>p</code>  来查看创建的分区。</p>\n<p>4、重复第 2 项创建根目录分区和第 3 项确认最后的分区信息，至此就有两个分区（对应表格）。</p>\n<p>5、最后输入  <code>w</code>  将之前所有的操作写入磁盘并生效。</p>\n</li>\n<li>\n<p><strong>UEFI/GPT</strong></p>\n<p>与上一种引导方式相比，根据表格显示，只多了一个 <strong>EFI 系统分区</strong>，然后了解一下这个挂载点：</p>\n<ul>\n<li><code>/mnt/boot</code> ：上面说了官方是想把将根磁盘卷挂载到  <code>/mnt</code>  目录下，那这个 boot 引导自然就挂载到了新的  <code>/mnt</code>  目录下了。</li>\n</ul>\n<p>在该引导模式下的操作就如下。</p>\n<p>执行命令如下进入  <code>fdisk</code>  操作环境：</p>\n<pre><code>fdisk /dev/sdx （sdx可以为sda、sdb等，具体以你实际需要挂载的磁盘名称为准）\n</code></pre>\n<p>在  <code>fdisk</code>  操作环境下：</p>\n<p>1、对于一个全新的磁盘（格式化了），这里则输入  <code>g</code>  来创建一个全新的  <code>GPT</code>  分区表（因为到这里是 UEFI 引导）；同样的如果是旧磁盘那跟上面的 BIOS 引导操作差不多，只不过这里是  <code>GPT</code>  属性了。</p>\n<p>2、输入  <code>n</code>  创建一个新的分区，让你选择分区号 **（UEFI 比 BIOS 少了类型分区选择）**，这里一般直接回车使用默认数值，这样可以避免自己定义出现冲突；紧接着选择开始起扇区地址，如果不知道原有区域划分情况，那一般直接回车使用默认数值即可；随后，输入结束扇区地址或者容量大小，这里决定了你为该分区创建的容量大小；我们按照表格顺序创建分区，那这第一个就是  <code>/mnt/boot</code>  引导分区，例如我取的是 512MiB 容量，那可以直接输入容量大小： <code>+512M</code>  。</p>\n<p>3、创建完毕后，可以输入  <code>p</code>  来查看创建的分区。</p>\n<p>4、重复第 2 项和第 3 项两次，分别创建  <code>[SWAP]</code>  和  <code>/mnt</code> ，至此就有三个分区（对应表格）。</p>\n<p>5、最后输入  <code>w</code>  将之前所有的操作写入磁盘并生效。</p>\n</li>\n</ol>\n<h2 id=\"格式化分区\"><a class=\"anchor\" href=\"#格式化分区\">#</a> 格式化分区</h2>\n<ul>\n<li>\n<p><strong>EFI 系统分区（仅对于 UEFI/GPT 引导方式）</strong></p>\n<p>使用  <code>mkfs.fat</code>  命令将其格式化为 Fat32：</p>\n<pre><code>mkfs.fat -F 32 /dev/sdxY （sdxY为上面创建的 EFI 系统分区符）\n</code></pre>\n</li>\n<li>\n<p><strong>swap 交换分区</strong></p>\n<p>如果有创建，则请使用  <code>mkswap</code>  命令将其初始化：</p>\n<pre><code>mkswap /dev/sdxY （sdxY为上面创建的交换空间分区符）\n</code></pre>\n</li>\n<li>\n<p><strong> <code>/mnt</code>  根目录分区</strong></p>\n<p>执行以下命令创建一个 Ext4 文件系统：</p>\n<pre><code>mkfs.ext4 /dev/sdxY （sdxY为上面创建的根分区符）\n</code></pre>\n</li>\n</ul>\n<h2 id=\"挂载分区\"><a class=\"anchor\" href=\"#挂载分区\">#</a> 挂载分区</h2>\n<p>1、将根磁盘卷挂载到  <code>/mnt</code> ，执行：</p>\n<pre><code>mount /dev/sdxY /mnt （把 sdxY替换为上面创建根分区符）\n</code></pre>\n<p>2、如果创建了  <code>swap</code>  交换空间卷，执行：</p>\n<pre><code>swapon /dev/sdxY （把 sdxY替换为上面创建的交换空间分区符）\n</code></pre>\n<p>3、对于 UEFI 系统，挂载 EFI 系统分区：</p>\n<pre><code>mkdir /mnt/boot\nmount /dev/sdxY /mnt/boot （把 sdxY替换为上面创建的 EFI 系统分区符）\n</code></pre>\n<h2 id=\"选择镜像\"><a class=\"anchor\" href=\"#选择镜像\">#</a> 选择镜像</h2>\n<p>文件  <code>/etc/pacman.d/mirrorlist</code>  定义了软件包会从哪个镜像源下载。在列表中越前的镜像在下载软件包时有越高的优先权。</p>\n<p>各地区镜像源获取：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL21pcnJvcmxpc3Qv\">https://archlinux.org/mirrorlist/</span> ，然后点击生成：</p>\n<p><img data-src=\"image-20220415095310180.png\" alt=\"image-20220415095310180\" /></p>\n<p>编辑  <code>/etc/pacman.d/mirrorlist</code>  文件，执行：</p>\n<pre><code>vim /etc/pacman.d/mirrorlist\n</code></pre>\n<p>然后进入 VIM 环境，输入  <code>i</code>  进入编辑状态，然后根据上面生成提供的镜像表，选择几个放到文件最顶端，在这里笔者选择阿里云镜像：</p>\n<p><img data-src=\"image-20220415103048537.png\" alt=\"image-20220415103048537\" /></p>\n<p>如果其速度不佳，可以手动指定其他镜像源，像中科大或者清华的放在最上面即可：</p>\n<pre><code>Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch\n</code></pre>\n<p>然后，按  <code>Esc</code>  键退出编程，最后输入  <code>:wq</code>  保存退出。</p>\n<p>关于 vim 命令的使用，可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC12aW0uaHRtbA==\">https://www.runoob.com/linux/linux-vim.html</span></p>\n<h2 id=\"安装必需的软件包\"><a class=\"anchor\" href=\"#安装必需的软件包\">#</a> 安装必需的软件包</h2>\n<p>使用  <code>pacstrap</code>  脚本，安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPWJhc2U=\">base</span> 软件包和 Linux <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS2VybmVsXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp\">内核</span>以及常规硬件的固件：</p>\n<pre><code>pacstrap /mnt base base-devel linux linux-headers linux-firmware （base-devel在 AUR包的安装是必须的）\n</code></pre>\n<h2 id=\"fstab配置\"><a class=\"anchor\" href=\"#fstab配置\">#</a> Fstab 配置</h2>\n<p>生成自动挂载分区的  <code>fstab</code>  文件，执行命令：</p>\n<pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab\n</code></pre>\n<p>然后  <code>cat</code>  一下检查生成的  <code>/mnt/etc/fstab</code>  文件是否正确：</p>\n<pre><code>cat /mnt/etc/fstab\n</code></pre>\n<p>执行后将显示各分区挂载情况及属性信息。</p>\n<h2 id=\"chroot配置\"><a class=\"anchor\" href=\"#chroot配置\">#</a> Chroot 配置</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQ2hhbmdlX3Jvb3RfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=\">Change root</span> 到新安装的系统：</p>\n<pre><code>arch-chroot /mnt\n</code></pre>\n<p>执行了这步以后，我们的操作都相当于在磁盘上新装的系统中进行。</p>\n<h2 id=\"时区配置\"><a class=\"anchor\" href=\"#时区配置\">#</a> 时区配置</h2>\n<p>设置时区：</p>\n<pre><code>ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime\n</code></pre>\n<p>eg：以上海为例，执行  <code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>\n<p>然后运行  <code>hwclock</code>  以生成  <code>/etc/adjtime</code> ：</p>\n<pre><code>hwclock --systohc\n</code></pre>\n<h2 id=\"本地化配置\"><a class=\"anchor\" href=\"#本地化配置\">#</a> 本地化配置</h2>\n<p>程序和库如果需要本地化文本，则需要根据区域设置 Locale，以明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准。</p>\n<p>需在这两个文件设置： <code>locale.gen</code>  与  <code>locale.conf</code> 。</p>\n<p>通过前面的 Chroot 配置，我们已经处于 chroot 环境下了，这就意味这现在所在的系统中只有一些最基本的包（组件），而 VIM 组件并未包含在里面，这时候就需要自己安装组件包了。利用 Archlinux 下非常强大的包管理工具  <code>pacman</code> ，其安装包的命令格式为  <code>pacman -S 包名</code> ， <code>pacman</code>  会自动检查这个包所需要的其他包（即为依赖）并一起装上。</p>\n<p>然后我们安装 VIM 组件，执行：</p>\n<pre><code>pacman -S vim\n</code></pre>\n<p>1、利用刚安装的  <code>vim</code>  ，编辑  <code>locale.gen</code>  文件：</p>\n<pre><code>vim /etc/locale.gen\n</code></pre>\n<p>找到  <code>zh_CN.UTF-8 UTF-8</code> 、 <code>en_US.UTF-8 UTF-8</code>  这两行，去掉注释并保存。</p>\n<p>紧接着执行  <code>locale-gen</code>  以生成 locale 信息：</p>\n<pre><code>locale-gen\n</code></pre>\n<p>2、然后创建 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vbG9jYWxlLmNvbmYuNQ==\">locale.conf</span> 文件，并 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTG9jYWxlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNyVCMyVCQiVFNyVCQiU5RiVFNSU4QyVCQSVFNSU5RiU5RiVFOCVBRSVCRSVFNyVCRCVBRQ==\">编辑设定 LANG 变量</span>，</p>\n<pre><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf\n</code></pre>\n<h2 id=\"网络配置\"><a class=\"anchor\" href=\"#网络配置\">#</a> 网络配置</h2>\n<p>创建  <code>/etc/hostname</code>  文件，并设定的一个  <code>myhostname</code> ：</p>\n<pre><code>echo myhostname &gt; /etc/hostname （myhostname是你想要为该系统设置的名称）\n</code></pre>\n<p>这步在我目前使用的功能里好像没用到。。。</p>\n<p>然后，在官方文档中有一条说明：</p>\n<blockquote>\n<p>请注意，目前的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPWJhc2U=\">base</span> 不含有任何网络管理工具。对于新安装的系统环境，请接着完成<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvJUU3JUJEJTkxJUU3JUJCJTlDJUU5JTg1JThEJUU3JUJEJUFF\">网络配置</span>，配置过程中可能包括要安装合适的<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvJUU3JUJEJTkxJUU3JUJCJTlDJUU3JUFFJUExJUU3JTkwJTg2\">网络管理</span>软件。</p>\n</blockquote>\n<p>因此，我们需要安装网络配置管理包（<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvRGhjcGNkXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp\">DHCP</span> 客户端和 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0Y3RsXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp\">netctl</span> 网络管理器）：</p>\n<pre><code>pacman -S dhcpcd netctl\n</code></pre>\n<h2 id=\"root-密码\"><a class=\"anchor\" href=\"#root-密码\">#</a> Root 密码</h2>\n<p><code>Root</code>  是  <code>Linux</code>  中具有最高权限帐户，有些敏感的操作必须通过  <code>Root</code>  用户进行，比如使用 <code>pacman</code>  命令。</p>\n<p>执行以下命令，然后根据提示输入两次密码即可（注意输入是不显示出来）：</p>\n<pre><code>passwd root\n</code></pre>\n<h2 id=\"安装引导程序\"><a class=\"anchor\" href=\"#安装引导程序\">#</a> 安装引导程序</h2>\n<p>如果是 Intel 或 AMD 的 CPU，启用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTWljcm9jb2RlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp\">微码</span> 更新：</p>\n<ul>\n<li>\n<p>Intel</p>\n<pre><code>pacman -S intel-ucode\n</code></pre>\n</li>\n<li>\n<p>AMD</p>\n<pre><code>pacman -S amd-ucode\n</code></pre>\n</li>\n</ul>\n<p>接着，官方推荐的引导加载是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvR1JVQl8oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KQ==\">GRUB</span> （其他的引导加载可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQXJjaF9ib290X3Byb2Nlc3NfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4NykjJUU1JThBJTlGJUU4JTgzJUJEJUU2JUFGJTk0JUU4JUJFJTgz\">引导功能比较</span>），因此我们对其安装并配置，不同的引导系统，其操作不一样：</p>\n<ul>\n<li>\n<p><strong>BIOS/MBR</strong></p>\n<p>1、安装  <code>grub</code> ：</p>\n<pre><code>pacman -S grub\n</code></pre>\n<p>2、部署  <code>grub</code> ：</p>\n<pre><code>grub-install --target=i386-pc /dev/sdx （sdx为要安装 GRUB 的磁盘，注意不是分区）\n</code></pre>\n</li>\n<li>\n<p><strong>UEFI/GPT</strong></p>\n<p>1、安装  <code>grub</code>  和  <code>efibootmgr</code> ：</p>\n<pre><code>pacman -S grub efibootmgr\n</code></pre>\n<p>2、部署  <code>grub</code> ：</p>\n<pre><code>grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUB （这里的 esp 替换成挂载点）\n</code></pre>\n<p>像在这里，那就是：</p>\n<pre><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB\n</code></pre>\n</li>\n</ul>\n<p><strong>最后，不管是哪个引导方式，都执行第三步：</strong></p>\n<p>3、生成配置文件：</p>\n<pre><code>grub-mkconfig -o /boot/grub/grub.cfg\n</code></pre>\n<p>执行后，最后显示  <code>done</code>  即完成操作。</p>\n<p><strong>note：这一步是至关重要的一步，请检查是否正确安装好引导加载程序后再重新启动，否则下次重启后将无法正常进入系统。</strong></p>\n<h2 id=\"重启\"><a class=\"anchor\" href=\"#重启\">#</a> 重启</h2>\n<p>最最最后，你需要进行重启来启动已经安装好的系统。</p>\n<p>1、输入以下命令退出 chroot 环境：</p>\n<pre><code>exit\n</code></pre>\n<p>2、手动取消挂载的分区（这有助于发现任何「繁忙」的分区）：</p>\n<p><strong>如果挂载了  <code>/mnt/boot</code> ，先  <code>umount -r /mnt/boot</code> ，再  <code>umount -r /mnt</code> ，否则直接  <code>umount /mnt</code> 。</strong></p>\n<pre><code>umount -r /mnt/boot\numount -r /mnt\n</code></pre>\n<p>3、执行重启：</p>\n<pre><code>reboot\n</code></pre>\n<h2 id=\"other\"><a class=\"anchor\" href=\"#other\">#</a> Other</h2>\n<p>另外一些比较详细的安装教程：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMvP2lkPWFyY2gtbGludXgtJUU1JUFFJTg5JUU4JUEzJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU2JTk1JTk5JUU3JUE4JThCLWFyY2h0dXRvcmlhbC1hcmNoLWxpbnV4LXN0dWRpbw==\">Arch Linux 安装使用教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlzZWF0b3IuY29tLzIwMTcvMDUvMTcvYXJjaF9pbnN0YWxsLw==\">以官方 Wiki 的方式安装 ArchLinux</span></p>\n",
            "tags": [
                "history",
                "Linux"
            ]
        },
        {
            "id": "https://arachnid.cc/x-ymodem-protocol/",
            "url": "https://arachnid.cc/x-ymodem-protocol/",
            "title": "X/YModem 传输协议",
            "date_published": "2022-03-27T15:41:27.000Z",
            "content_html": "<h1 id=\"文件传输\"><a class=\"anchor\" href=\"#文件传输\">#</a> 文件传输</h1>\n<p>最常用的几种文件传输协议有：XModem、YModem、ZModem 等。</p>\n<ul>\n<li>\n<p>XModem 是最早的文件传输协议之一，由于出现较早，几乎大部分的通讯程序所支持的文件传输都使用该协议，通常是传输 128 字节的信息块；这种古老的传输协议速度虽然较慢，但由于使用了 CRC 错误校验方法，传输的准确率可高达 99.6%。</p>\n</li>\n<li>\n<p>YModem 协议是 XModem 的改进版，它最早用于调制解调器之间的文件传输，具有快速，稳定传输的优点。它的传输速度比 XModem 快，这是由于它可以一次传输 1024 字节的信息块，同时它还支持传输多个文件，也就是常说的批文件传输。</p>\n</li>\n<li>\n<p>ZModem 协议的处理速度快于 XModem 和 YModem，这是因为它采用了串流式（streaming）传输方式，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能，可以很好地进行断开后恢复传输。这是目前最流行的文件传输协议。</p>\n</li>\n<li>\n<p>除开上面介绍的三种 X / Y / ZModem 协议，还有个常见的传输协议 --- ASCII 协议，这是最快的传输协议，但只能传送文本文件。</p>\n</li>\n</ul>\n<p>X / Ymodem 协议：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL3BhdWlsbGFjLmlucmlhLmZyL35kb2xpZ2V6L3ptb2RlbS95bW9kZW0udHh0\">http://pauillac.inria.fr/~doligez/zmodem/ymodem.txt</span></p>\n<p>Zmodem 协议：<br />\n<span class=\"exturl\" data-url=\"aHR0cDovL2dhbGxpdW0uaW5yaWEuZnIvfmRvbGlnZXovem1vZGVtL3ptb2RlbS50eHQ=\">http://gallium.inria.fr/~doligez/zmodem/zmodem.txt</span></p>\n<h1 id=\"控制字符定义\"><a class=\"anchor\" href=\"#控制字符定义\">#</a> 控制字符定义</h1>\n<pre><code>&lt;SOH&gt; 01H       // 传输 128Byte 启动标志\n&lt;STX&gt; 02H \t\t// 传输 1024Byte 启动标志\n&lt;EOT&gt; 04H       // 传输结束\n&lt;ACK&gt; 06H       // 应答\n&lt;NAK&gt; 15H       // 没应答\n&lt;CAN&gt; 18H       // 取消传输\n&lt;C&gt; 43H         // ASCII 'C' CRC校验请求\n\n&lt;NUL&gt; 00H       // 空符填充\n&lt;CPMEOF&gt; 1AH    // 数据填充 (^Z)\n</code></pre>\n<h1 id=\"xmodem通讯\"><a class=\"anchor\" href=\"#xmodem通讯\">#</a> XModem 通讯</h1>\n<p>Xmodem 是使用最广泛的文件传输协议之一。原始的 Xmodem 协议使用 128 字节数据包和一个简单的 “校验和 &quot; 错误检测方法。后面增强为 Xmodem-CRC，使用了更安全的循环冗余校验 (CRC) 用于错误检测方法。Xmodem 协议总是首先尝试使用 CRC。如果发件人不确认对 CRC 的请求，接收器将转移到 ” 校验和 “ 模式并继续其传输请求。</p>\n<p>增强型 Xmodem-1K 本质上是 Xmodem CRC 模式传输 1K (1024 字节) 数据包。在某些系统和通报上它也可以称为 Ymodem。</p>\n<p>Xmodem 协议传输由接收程序和发送程序完成，先由接收程序发送协商字符，协商校验方式，协商通过之后发送程序就开始发送数据包，接收程序接收到完整的一个数据包之后按照协商的方式对数据包进行校验。校验通过之后发送确认字符，然后发送程序继续发送下一包；如果校验失败，则发送否认字符，发送程序重传此数据包。<strong>信息报中如果剩余的数据不足 128 字节，不足的部分将以  <code>0x1A</code>  填充。</strong></p>\n<h2 id=\"校验和模式\"><a class=\"anchor\" href=\"#校验和模式\">#</a> 校验和模式</h2>\n<h3 id=\"帧包格式\"><a class=\"anchor\" href=\"#帧包格式\">#</a> 帧包格式</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Byte1</th>\n<th style=\"text-align:center\">Byte2</th>\n<th style=\"text-align:center\">Byte3</th>\n<th style=\"text-align:center\">Byte4~131</th>\n<th style=\"text-align:center\">Byte132</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start Of Header(SOH)</td>\n<td style=\"text-align:center\">Packet NumberID</td>\n<td style=\"text-align:center\">~(Packet NumberID)</td>\n<td style=\"text-align:center\">Packet Data[128]</td>\n<td style=\"text-align:center\">CheckSUM</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"传输方式\"><a class=\"anchor\" href=\"#传输方式\">#</a> 传输方式</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Sender</th>\n<th style=\"text-align:center\">Flow</th>\n<th style=\"text-align:center\">Receiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">NAK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Time out after 3 Second</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">NAK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\"><strong>Line hit during transmission</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ACK get garbaged</strong></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\"><strong>Duplicate packet</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\"><strong>UART Framing err on any byte</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\"><strong>UART Overrun err on any byte</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><strong>ACK get garbaged</strong></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Finished</td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"crc模式\"><a class=\"anchor\" href=\"#crc模式\">#</a> CRC 模式</h2>\n<p>计算 16 位 CRC 校验的除数多项式为： <code>X ^ 16 + X ^ 12 + X ^ 5 + 1</code> ，信息报中的 128 数据字节将参加 CRC 校验的计算，在发送端 CRC-16 的高字节在前，低字节在后。</p>\n<h3 id=\"帧包格式-2\"><a class=\"anchor\" href=\"#帧包格式-2\">#</a> 帧包格式</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Byte1</th>\n<th style=\"text-align:center\">Byte2</th>\n<th style=\"text-align:center\">Byte3</th>\n<th style=\"text-align:center\">Byte4~131</th>\n<th style=\"text-align:center\">Byte132~133</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start Of Header(SOH)</td>\n<td style=\"text-align:center\">Packet NumberID</td>\n<td style=\"text-align:center\">~(Packet NumberID)</td>\n<td style=\"text-align:center\">Packet Data[128]</td>\n<td style=\"text-align:center\">16-Bit CRC</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"传输方式-2\"><a class=\"anchor\" href=\"#传输方式-2\">#</a> 传输方式</h3>\n<p>传输流程：接收方要求发送方以 CRC 校验方式发送时以 ‘C’ 来请求，发送方将对此作出应答。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Sender</th>\n<th style=\"text-align:center\">Flow</th>\n<th style=\"text-align:center\">Receiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Time out after 3 Second</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\"><strong>Line hit during transmission</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ACK get garbaged</td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Finished</td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"扩展\"><a class=\"anchor\" href=\"#扩展\">#</a> 扩展</h2>\n<p>关于校验和和 CRC 校验可以看以前的文章《<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=\">常用校验算法</span>》</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93ZWIubWl0LmVkdS82LjExNS93d3cvYW11bGV0L3htb2RlbS5odG0=\">XModem Protocol with CRC</span></p>\n<h1 id=\"ymodem通讯\"><a class=\"anchor\" href=\"#ymodem通讯\">#</a> YModem 通讯</h1>\n<p>Ymodem 本质上是允许多个批处理文件传输的 Xmodem-1K，也可表示为 YModem-1K。</p>\n<p>Ymodem 在 Xmodem-1K 基础上发展，沿用了  <code>TeLink</code>  协议的添加空头块的做法，也就是增加  <code>block 0</code> 。该 block 标识即将发送文件的  <code>文件名</code> ， <code>文件大小</code>  和   <code>文件创建时间戳(一般不填写)</code></p>\n<p>Ymodem-g 是 Ymodem 的变体。它设计用于支持错误控制的调制解调器。该协议不提供软件纠错或恢复，但期望调制解调器提供服务。它是一种流式传输协议，以连续流的形式发送和接收 1K 个数据包，直到指示停止。YModem-g 传输形式与 YModem-1K 差不多，同时在发送完一个数据块后，它不会等待应答确认，而是快速连续地发送下一个数据块；如果有任何块不成功转移，整个转移被取消。</p>\n<h2 id=\"起始帧block-0\"><a class=\"anchor\" href=\"#起始帧block-0\">#</a> 起始帧（block 0）</h2>\n<p>YModem 的起始帧并不直接传输文件的数据，而是将文件名与文件的大小放在数据帧中传输，它的帧长 = 3 字节数据首部 + 128 字节数据 + 2 字节 CRC16 校验码 = 33 字节。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Byte1</th>\n<th style=\"text-align:center\">Byte2</th>\n<th style=\"text-align:center\">Byte3</th>\n<th style=\"text-align:center\">Byte4~131</th>\n<th style=\"text-align:center\">Byte132~133</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start Of Header(SOH)</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">0xFF</td>\n<td style=\"text-align:center\">[ &lt; <code>filename</code> &gt; &lt; <code>filezise</code> &gt; &lt;NUL&gt; ]</td>\n<td style=\"text-align:center\">16-Bit CRC</td>\n</tr>\n</tbody>\n</table>\n<p>说明：</p>\n<ul>\n<li>Byte 1~3：头标志是 SOH，起始帧序固定为 0x00，帧序取反为 0xFF。</li>\n<li>Byte 4~131：\n<ul>\n<li><code>filename</code>  是传输的文件名字，如文件名  <code>foo.c</code> ，它在起始帧中的格式为： <code>66 6F 6F 2E 63 00</code> ，也就是把 ASCII 码转成十六进制，最后的 0x00 代表文件名结束。</li>\n<li><code>filesize</code>  是要传输的文件的大小，比如文件大小为 120 KByte，转换为  <code>120 * 1024 = 122880</code>  Byte，转化为十六进制为  <code>0x1E00</code> ，它在起始帧中的格式为： <code>31 45 30 30 00</code> ，对应 ASCII 为  <code>1E00</code> ，最后的 0x00 代表文件长度结束。</li>\n<li>最后  <code>NUL</code>  代表剩余不足 128 Byte 部分用 0x00 填充。</li>\n</ul>\n</li>\n<li>Byte 132~133：CRCH、CRCL 分别表示 16 位 CRC 校验码的高 8 位与低 8 位，高字节在前，低字节在后。</li>\n</ul>\n<h2 id=\"数据帧block-n\"><a class=\"anchor\" href=\"#数据帧block-n\">#</a> 数据帧（block n）</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Byte1</th>\n<th style=\"text-align:center\">Byte2</th>\n<th style=\"text-align:center\">Byte3</th>\n<th style=\"text-align:center\">Byte4~1027</th>\n<th style=\"text-align:center\">Byte1028~1029</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start Of Header(STX)</td>\n<td style=\"text-align:center\">Packet NumberID</td>\n<td style=\"text-align:center\">~(Packet NumberID)</td>\n<td style=\"text-align:center\">Packet Data[1024]</td>\n<td style=\"text-align:center\">16-Bit CRC</td>\n</tr>\n</tbody>\n</table>\n<p>注意：有一种特殊的情况是，如果文件总大小小于等于 128 字节或者文件数据最后剩余的数据小于 128 字节，则 YModem 会选择 SOH 数据帧格式用 128 字节来传输数据，而数据不满 128 字节，剩余的数据用  <code>0x1A</code>  填充。</p>\n<p>这时数据帧的结构就变成了：</p>\n<p>文件大小小于 128 字节： <code>&lt;SOH&gt; &lt;01&gt; &lt;FE&gt; &lt;data1&gt; &lt;data2&gt; ... &lt;datan&gt;  &lt;CPMEOF&gt; ... &lt;CRCH&gt; &lt;CRCL&gt;</code></p>\n<p>文件最后剩余数据小于 128 字节： <code>&lt;SOH&gt; &lt;ID&gt; &lt;~ID&gt; &lt;data1&gt; &lt;data2&gt; ... &lt;datan&gt; &lt;CPMEOF&gt; ... &lt;CRCH&gt; &lt;CRCL&gt;</code></p>\n<h2 id=\"结束帧block-n1\"><a class=\"anchor\" href=\"#结束帧block-n1\">#</a> 结束帧（block n+1）</h2>\n<p>YModem 的结束帧数据也采用 SOH 的 128 字节数据帧</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Byte1</th>\n<th style=\"text-align:center\">Byte2</th>\n<th style=\"text-align:center\">Byte3</th>\n<th style=\"text-align:center\">Byte4~131</th>\n<th style=\"text-align:center\">Byte132~133</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start Of Header(SOH)</td>\n<td style=\"text-align:center\">0x00</td>\n<td style=\"text-align:center\">0xFF</td>\n<td style=\"text-align:center\">&lt;NUL&gt;</td>\n<td style=\"text-align:center\">16-Bit CRC</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"传输流程\"><a class=\"anchor\" href=\"#传输流程\">#</a> 传输流程</h2>\n<p>以把 foo.c，大小为 4196Byte（16 进制为 0x1064）的文件作为传输的对象：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Sender</th>\n<th style=\"text-align:center\">Flow</th>\n<th style=\"text-align:center\">Receiver</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">Time out after 3 Second</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x00&gt; &lt;0xFF&gt; &lt;Data[  <code>&lt;foo.c&gt;</code>  |  <code>&lt;0x1064&gt;</code>  | &lt;NUL&gt; ]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;STX&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;STX&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;STX&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;STX&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-99]&gt; &lt;CPMEOF[0-27]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\"><strong>NAK</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">EOT</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">'C'</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;SOH&gt; &lt;0x00&gt; &lt;0xFF&gt; &lt;NUL[0-127]&gt; &lt;CRC16&gt;</td>\n<td style=\"text-align:center\">---&gt;</td>\n<td style=\"text-align:center\">Packet OK</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Finished</td>\n<td style=\"text-align:center\">&lt;---</td>\n<td style=\"text-align:center\">ACK</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWE1PREVN\">https://en.wikipedia.org/wiki/XMODEM</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWU1PREVN\">https://en.wikipedia.org/wiki/YMODEM</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWk1PREVN\">https://en.wikipedia.org/wiki/ZMODEM</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3dlYi5jZWNzLnBkeC5lZHUvfnJvb3RkL2NhdGRvYy9ndWlkZS9UaGVHdWlkZV90b2MuaHRtbCNTRUMyMzc=\">XMODEM, YMODEM, and ZMODEM</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zbGlkZXBsYXllci5wbC9zbGlkZS80MzQ1NzIv\">Transmisja modemowa - Xmodem, Ymodem, Zmodem</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub2hzZS5kZS91d2Uvc29mdHdhcmUvbHJ6c3ouaHRtbA==\">lrzsz: free x/y/zmodem implementation</span></p>\n<h1 id=\"附录\"><a class=\"anchor\" href=\"#附录\">#</a> 附录</h1>\n<p>CRC 校验计算：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">calcrc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span>  crc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">char</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    crc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>count <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        crc <span class=\"token operator\">=</span> crc <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>ptr<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        i <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">do</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>crc <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x8000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                crc <span class=\"token operator\">=</span> crc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">^</span> <span class=\"token number\">0x1021</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                crc <span class=\"token operator\">=</span> crc <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>crc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "history",
                "Modem"
            ]
        },
        {
            "id": "https://arachnid.cc/modbus-ascii-protocol/",
            "url": "https://arachnid.cc/modbus-ascii-protocol/",
            "title": "Modbus家族之 ASCII",
            "date_published": "2022-03-20T07:42:45.000Z",
            "content_html": "<blockquote>\n<p>嗨，相信在上一篇经过我的兄弟 RTU 的介绍之后，已经对 Modbus 有了一定的了解了吧；那么本篇就跟紧我的脚步一起学习新的知识吧。</p>\n</blockquote>\n<h1 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h1>\n<p>Modbus 在串行设备中通过实现主从模型结构，解决了电子设备之间的数据通讯问题；在采用 Modbus 协议时，它有两种主要的原始传输方式 ---- Modbus RTU 和 Modbus ASCII。而 Modbus RTU 已经在上一篇介绍了，那么就在本篇中瞅瞅 ASCII 吧。</p>\n<h1 id=\"通讯方式\"><a class=\"anchor\" href=\"#通讯方式\">#</a> 通讯方式</h1>\n<h2 id=\"帧格式\"><a class=\"anchor\" href=\"#帧格式\">#</a> 帧格式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Length (bytes)</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Start</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Starts with colon : (ASCII hex value is 3A)&lt;br/&gt;（以冒号  <code>:</code>  开头，ASCII 十六进制值为 3A）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Address</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">Node address in hex&lt;br/&gt;（十六进制节点地址，字符表示）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">Function code in hex&lt;br/&gt;（十六进制功能码，字符表示）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data</td>\n<td style=\"text-align:center\">n x 2</td>\n<td style=\"text-align:center\">n is the number of data bytes, it depends on function&lt;br/&gt;（n 是数据字节数，它取决于功能码）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">LRC</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">Longitudinal redundancy check&lt;br/&gt;（LRC 校验码）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">End</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">CR / LF</td>\n</tr>\n</tbody>\n</table>\n<p>注：地址、功能、数据和 LRC 都是表示 8 位值 (0-255) 的<strong>大写</strong>十六进制可读字符对；即：在 Modbus ASCII 中，每个数据字节被分割成表示十六进制值中的两个 ASCII 字符的两个字节。</p>\n<p>在 ASCII 模式下，消息以冒号  <code>:</code>  字符开头（ASCII 表示为 0x3A），以回车换行对  <code>\\r\\n</code>  （ASCII 表示为 0x0D 和 0x0A）结尾；所有其他字段传输的数据所允许的十六进制表示字符为的  <code>0-9</code> 、 <code>A-F</code> 。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">START</th>\n<th style=\"text-align:center\">ADDRESS</th>\n<th style=\"text-align:center\">FUNCTION</th>\n<th style=\"text-align:center\">DATA</th>\n<th style=\"text-align:center\">LRC CHECK</th>\n<th style=\"text-align:center\">END</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 CHAR&lt;br/&gt;:</td>\n<td style=\"text-align:center\">2 CHARS</td>\n<td style=\"text-align:center\">2 CHARS</td>\n<td style=\"text-align:center\">n CHARS</td>\n<td style=\"text-align:center\">2 CHARS</td>\n<td style=\"text-align:center\">2 CHARS&lt;br/&gt;CRLF</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"image-20220326235527004.png\" alt=\"image-20220326235527004\" /></p>\n<h2 id=\"功能码\"><a class=\"anchor\" href=\"#功能码\">#</a> 功能码</h2>\n<p>ASCII 最常用的功能代码跟 RTU 的功能代码定义是一样的，这里就不多说了，可以去查看 《<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMjM2MDU5MTI=\">Modbus 家族之 RTU</span>》篇章的功能码部分，这里只是格式上有所不同而已，<s>下一篇会对这两个原始传输方式进行对比的。</s> 嘛，还是直接合并到本篇，对 RTU 和 ASCII 进行对比分析吧，顺便回顾一下 RTU 协议。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">访问地址：address</th>\n<th style=\"text-align:center\">映射地址</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:center\">R/W</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1 ~ 10000</td>\n<td style=\"text-align:center\">address-1</td>\n<td style=\"text-align:center\">Coils</td>\n<td style=\"text-align:center\">01/05/15</td>\n<td style=\"text-align:center\">R/W</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">10001 ~ 20000</td>\n<td style=\"text-align:center\">address-10001</td>\n<td style=\"text-align:center\">Discrete Inputs</td>\n<td style=\"text-align:center\">02</td>\n<td style=\"text-align:center\">R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">30001 ~ 40000</td>\n<td style=\"text-align:center\">address-30001</td>\n<td style=\"text-align:center\">Input Registers</td>\n<td style=\"text-align:center\">04</td>\n<td style=\"text-align:center\">R</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">40001 ~ 50000</td>\n<td style=\"text-align:center\">address-40001</td>\n<td style=\"text-align:center\">Holding Registers</td>\n<td style=\"text-align:center\">03/06/16</td>\n<td style=\"text-align:center\">R/W</td>\n</tr>\n</tbody>\n</table>\n<p>在这里，简单的举个 ASCII 传输例子：</p>\n<p>例如，要读取 VAR1，你需要从地址 0x20C1 读取 2 个寄存器，所以你需要发送以下 ASCII 消息：</p>\n<p><code>:010420C1000218&lt;CRLF&gt;</code></p>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘:’</td>\n<td style=\"text-align:center\">Start of message - 0x3A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘1’</td>\n<td style=\"text-align:center\">Node address – 0x01</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘4’</td>\n<td style=\"text-align:center\">Function code (Read Input Registers) – 0x04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘2’ ‘0’ ‘C’ ‘1’</td>\n<td style=\"text-align:center\">Register address for reading VAR1 – 0x20C1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘0’ ‘0’ ‘2’</td>\n<td style=\"text-align:center\">Length of registers to be read (must be 2) – 0x0002</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘1’ ‘8’</td>\n<td style=\"text-align:center\">LRC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;CRLF&gt;</td>\n<td style=\"text-align:center\">End of message, carriage return and line feed – 0x0D0A</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>此消息的响应如下：</p>\n<p><code>:01040400001234B1&lt;CRLF&gt;</code></p>\n<ul>\n<li>\n<p>响应：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">‘:’</td>\n<td style=\"text-align:center\">Start of message - 0x3A</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘1’</td>\n<td style=\"text-align:center\">Node address – 0x01</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘4’</td>\n<td style=\"text-align:center\">Function code (Read Input Registers) – 0x04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘4’</td>\n<td style=\"text-align:center\">Read data length (4 bytes) – 0x04</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘0’ ‘0’ ‘0’ ‘0’ ‘1’ ‘2’ ‘3’ ‘4’</td>\n<td style=\"text-align:center\">Value read from VAR1 – 0x00001234</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">‘B’ ‘1’</td>\n<td style=\"text-align:center\">LRC</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;CRLF&gt;</td>\n<td style=\"text-align:center\">End of message, carriage return and line feed – 0x0D0A</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>好了，那么就直入主题吧，常用功能码部分依然是如下几个：</p>\n<h3 id=\"功能-0101h读线圈\"><a class=\"anchor\" href=\"#功能-0101h读线圈\">#</a> 功能 01（01H）读线圈</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>读取从机中线圈的 ON/OFF 状态。不支持广播。请求消息指定了开始线圈和要读取的线圈数量。</p>\n<p>下面是一个请求读取线圈的例子：19 - 55（Coil 20 to 56），37 个线圈，从设备节点 3（注意起始地址是 19 或 0x13，比线圈 20 小 1）：</p>\n<p><img data-src=\"image-20220327151916968.png\" alt=\"image-20220327151916968\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>线圈状态响应消息被打包为数据字段的每比特表示一个线圈。状态表示为：1 = ON，0 = OFF。第一个数据字节的 LSB 包含请求中寻址的线圈。其他线圈跟随这个字节的高阶末端，并在随后的字节中从低阶到高阶。</p>\n<p>例如，当线圈 20 - 27 的状态显示  <code>ON - ON - OFF - OFF - ON - OFF - ON - OFF - ON - OFF</code>  时，以字节值二进制  <code>0101 0011 (0x53)</code>  表示。一个字节包含八个线圈的状态。如果返回的线圈数量不是 8 的倍数，则最终数据字节中的剩余位将用 0 填充 (朝向字节的高阶末端)；字节计数字段指定数据的完整字节数。</p>\n<blockquote>\n<p>Figure 6 shows an example of a response to the query shown in Figure 5：</p>\n</blockquote>\n<p><img data-src=\"image-20220327152253123.png\" alt=\"image-20220327152253123\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-0202h读离散输入\"><a class=\"anchor\" href=\"#功能-0202h读离散输入\">#</a> 功能 02（02H）读离散输入</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>读取从机中离散输入的 ON/OFF 状态。不支持广播。请求消息指定起始输入和要读取的输入数量。</p>\n<p>下面是一个从从设备节点 3 读取离散输入 10101 - 10120，总共 20 个输入的例子（注意起始地址是 100 或 0x64，比输入 10101 小 10001）：</p>\n<p><img data-src=\"image-20220327155421391.png\" alt=\"image-20220327155421391\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>离散输入状态响应消息的构造与线圈状态 (01H) 操作相同。</p>\n<blockquote>\n<p>Figure 8 shows an example of a response to the query shown in Figure 7：</p>\n</blockquote>\n<p><img data-src=\"image-20220327155851480.png\" alt=\"image-20220327155851480\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-0303h读保持寄存器\"><a class=\"anchor\" href=\"#功能-0303h读保持寄存器\">#</a> 功能 03（03H）读保持寄存器</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>读取从机中保持寄存器的二进制内容。不支持广播。请求消息指定起始寄存器和要读取的寄存器数量。</p>\n<p>下面是一个从从设备节点 7 读取保持寄存器 40201 - 40203，总共 3 个寄存器的请求的例子（注意起始地址是 200 或 0xC8，比寄存器 40201 小 40001）：</p>\n<p><img data-src=\"image-20220327160332698.png\" alt=\"image-20220327160332698\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>响应消息中的保持寄存器数据在每个寄存器中打包为两个字节，二进制内容在每个字节中右对齐；对于每个寄存器，第一个字节包含高阶位，第二个字节包含低阶位。</p>\n<blockquote>\n<p>Figure 10 shows an example of a response to the query shown in Figure 9：</p>\n</blockquote>\n<p><img data-src=\"image-20220327160607639.png\" alt=\"image-20220327160607639\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-0404h读输入寄存器\"><a class=\"anchor\" href=\"#功能-0404h读输入寄存器\">#</a> 功能 04（04H）读输入寄存器</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>读取从机中保持寄存器的二进制内容。不支持广播。请求消息指定起始寄存器和要读取的寄存器数量。</p>\n<p>下面是一个从从设备节点 7 读取输入寄存器 30301 - 30303，总共 3 个寄存器的请求的例子（注意起始地址是 300 或 0x12C，比寄存器 30301 小 30001）：</p>\n<p><img data-src=\"image-20220327171629490.png\" alt=\"image-20220327171629490\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>读输入寄存器数据的响应消息的构造与读取保持寄存器 (03H) 操作相同。</p>\n<blockquote>\n<p>Figure 12 shows an example of a response to the query shown in Figure 11：</p>\n</blockquote>\n<p><img data-src=\"image-20220327171942458.png\" alt=\"image-20220327171942458\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-0505h写单线圈\"><a class=\"anchor\" href=\"#功能-0505h写单线圈\">#</a> 功能 05（05H）写单线圈</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>将单个线圈写入 ON 或 OFF。当广播时，该函数强制所有附加的从机使用相同的线圈引用。请求消息指定要写入的线圈引用（启动线圈和状态）。</p>\n<p><code>FF 00</code>  的值要求线圈打开，值为  <code>00 00</code>  的请求为关闭，所有其他值都是非法的，不会影响线圈。</p>\n<p>下面是一个在从设备节点 3 中请求打开线圈 150 的例子（注意起始地址是 149 或 0x95，比线圈 150 小 1）：</p>\n<p><img data-src=\"image-20220327172937327.png\" alt=\"image-20220327172937327\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>正常的响应是请求的回显，在写入线圈状态之后返回。</p>\n<blockquote>\n<p>Figure 14 shows an example of a response to the query shown in Figure 13：</p>\n</blockquote>\n<p><img data-src=\"image-20220327173100544.png\" alt=\"image-20220327173100544\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-0606h写单个保持寄存器\"><a class=\"anchor\" href=\"#功能-0606h写单个保持寄存器\">#</a> 功能 06（06H）写单个保持寄存器</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>将一个值写入单个保持寄存器中。当广播时，该函数在所有附加的从机上设置相同的寄存器引用。请求消息指定要写入的寄存器引用（指定地址和数值）。</p>\n<p>下面是一个请求从从设备节点 3 中的保持寄存器 40150 写入 1000 数值的例子（注意起始地址为 149 或 0x95，比寄存器 40150 小 40001）：</p>\n<p><img data-src=\"image-20220327175033869.png\" alt=\"image-20220327175033869\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>正常的响应是请求的回显，在写入保持寄存器内容之后返回。</p>\n<blockquote>\n<p>Figure 16 shows an example of a response to the query shown in Figure 15：</p>\n</blockquote>\n<p><img data-src=\"image-20220327175344005.png\" alt=\"image-20220327175344005\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-150fh写多个线圈\"><a class=\"anchor\" href=\"#功能-150fh写多个线圈\">#</a> 功能 15（0FH）写多个线圈</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>将一个线圈序列中的每个线圈写入 ON 或 OFF。当广播时，该函数强制所有附加的从机使用相同的线圈引用。请求消息指定要写入的线圈引用（起始线圈和状态）。</p>\n<p>下面的示例显示了从设备节点 5 中的线圈 20 开始写入一系列 10 个线圈状态的请求。二进制位与线圈的对应方式如下（注意起始地址是 19 或 0x13，比线圈 20 小 1）：</p>\n<table>\n<thead>\n<tr>\n<th>Bit</th>\n<th>1</th>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>0</th>\n<th>0</th>\n<th>0</th>\n<th>1</th>\n<th>0</th>\n<th>0</th>\n<th>0</th>\n<th>0</th>\n<th>0</th>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Coil</td>\n<td>27</td>\n<td>26</td>\n<td>25</td>\n<td>24</td>\n<td>23</td>\n<td>22</td>\n<td>21</td>\n<td>20</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n<td>...</td>\n<td>30</td>\n<td>29</td>\n<td>28</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"image-20220327182406708.png\" alt=\"image-20220327182406708\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>正常响应返回从地址、功能代码、起始地址和写入的线圈数量，不包括字节数和对应写入的状态。</p>\n<blockquote>\n<p>Figure 24 shows an example of a response to the query shown in Figure 23：</p>\n</blockquote>\n<p><img data-src=\"image-20220327182618637.png\" alt=\"image-20220327182618637\" /></p>\n</li>\n</ul>\n<h3 id=\"功能-1610h写多个保持寄存器\"><a class=\"anchor\" href=\"#功能-1610h写多个保持寄存器\">#</a> 功能 16（10H）写多个保持寄存器</h3>\n<ul>\n<li>\n<p>请求</p>\n<p>将值写入到一个保持寄存器序列中。当广播时，该函数在所有附加的从机上设置相同的寄存器引用。请求消息指定要写入的寄存器引用（起始寄存器和数值）。</p>\n<p>下面是一个请求从从设备节点 5 中的保持寄存器 40020 到 40022 写入以下数据的示例（注意起始地址是 19 或 0x13，比寄存器 40020 小 40001）：</p>\n<table>\n<thead>\n<tr>\n<th>address</th>\n<th>data</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>40020</td>\n<td>0x0164</td>\n</tr>\n<tr>\n<td>40021</td>\n<td>0x0165</td>\n</tr>\n<tr>\n<td>40022</td>\n<td>0x0166</td>\n</tr>\n</tbody>\n</table>\n<p><img data-src=\"image-20220327184941057.png\" alt=\"image-20220327184941057\" /></p>\n</li>\n<li>\n<p>响应</p>\n<p>正常响应返回从地址、功能代码、起始地址和写入的寄存器数量，不包括字节数和对应写入的数据。</p>\n<blockquote>\n<p>Figure 26 shows an example of a response to the query shown in Figure 25：</p>\n</blockquote>\n<p><img data-src=\"image-20220327185223421.png\" alt=\"image-20220327185223421\" /></p>\n</li>\n</ul>\n<h2 id=\"lrc校验\"><a class=\"anchor\" href=\"#lrc校验\">#</a> LRC 校验</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">ucMBLRC</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pucFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usLen <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> ucLRC <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* LRC char initialized */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> usLen<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        ucLRC <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>pucFrame<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Add buffer byte without carry */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/* Return twos complement */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    ucLRC <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> UCHAR <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> CHAR <span class=\"token punctuation\">)</span> ucLRC <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> ucLRC<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>校验原理可看 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=\">常用校验算法</span> - LRC 章节</p>\n",
            "tags": [
                "history",
                "modbus"
            ]
        },
        {
            "id": "https://arachnid.cc/modbus-rtu-protocol/",
            "url": "https://arachnid.cc/modbus-rtu-protocol/",
            "title": "Modbus家族之 RTU",
            "date_published": "2022-03-18T13:01:20.000Z",
            "content_html": "<blockquote>\n<p>您好啊，我是 Modbus 家族成员的 RTU，同时期诞生的还有我的兄弟，它就是 ASCII。本篇呢就来让大家熟悉一下我吧，下一篇则由我兄弟 ASCII 进行介绍。好了，废话不多说，接下来就带你们来认识一下我吧。</p>\n</blockquote>\n<h1 id=\"描述\"><a class=\"anchor\" href=\"#描述\">#</a> 描述</h1>\n<p>Modbus RTU（远程终端单元）是原始 Modbus 规范中定义的两种传输模式之一。 这两种模式是 Modbus RTU 和 ASCII，它们被设计用于支持 RS232，RS485 和 RS422 接口的串行设备。 Modbus RTU 的一个显着特点是它使用二进制编码和强大的 CRC 错误检查。 Modbus RTU 是 Modbus 协议的实现，最常用于工业应用和自动化生产设施。嘻嘻，我可是很受工业场景应用的哦。</p>\n<h1 id=\"通讯方式\"><a class=\"anchor\" href=\"#通讯方式\">#</a> 通讯方式</h1>\n<h2 id=\"帧格式\"><a class=\"anchor\" href=\"#帧格式\">#</a> 帧格式</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Length (bytes)</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Address</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Node address（节点地址）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Function</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Function code（功能代码）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Data</td>\n<td style=\"text-align:center\">n</td>\n<td style=\"text-align:center\">n is the number of data bytes, it depends on function&lt;br/&gt;（n 是数据字节数，它取决于功能码）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">CRC</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">Cyclic redundancy check&lt;br/&gt;（CRC 校验码）</td>\n</tr>\n</tbody>\n</table>\n<p>在 RTU 模式下，消息以至少 3.5 个字符的静默间隔为开始，以至少 3.5 个字符的类似间隔结束。这是最容易实现的以波特率在网络上使用的字符次数的倍数 (如下图中所示的 T1 - T2 - T3 - T4)。</p>\n<table>\n<thead>\n<tr>\n<th>START</th>\n<th>ADDRESS</th>\n<th>FUNCTION</th>\n<th>DATA</th>\n<th>CRC CHECK</th>\n<th>END</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>*T1–T2–T3–T4</strong></td>\n<td>8 BITS</td>\n<td>8 BITS</td>\n<td>n x 8 BITS</td>\n<td>16 BITS</td>\n<td><strong>*T1–T2–T3–T4</strong></td>\n</tr>\n</tbody>\n</table>\n<p><strong>*T1-T2-T3-T4</strong>：表示不通信时的 3.5 个字符。</p>\n<p>所有其他字段都由 8 位数据组成。</p>\n<p><img data-src=\"image-20220319201759692.png\" alt=\"image-20220319201759692\" /></p>\n<h2 id=\"功能码\"><a class=\"anchor\" href=\"#功能码\">#</a> 功能码</h2>\n<p>Modbus 设备最常用的功能代码如下表所示：</p>\n<p><img data-src=\"image-20220319195917761.png\" alt=\"image-20220319195917761\" /></p>\n<h3 id=\"功能-0101h读线圈\"><a class=\"anchor\" href=\"#功能-0101h读线圈\">#</a> 功能 01（01H）读线圈</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x01</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>线圈数量</td>\n<td>2 字节</td>\n<td>1 to 2000 (0x7D0)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 起始地址（2byte）+ 线圈数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x01</strong></td>\n</tr>\n<tr>\n<td>线圈数量对应的字节数</td>\n<td>1 字节</td>\n<td><strong>*N</strong></td>\n</tr>\n<tr>\n<td>线圈数据 1</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>线圈数据 2</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>线圈数据 n</td>\n<td>1 字节</td>\n<td>n = N or N+1</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>*N</strong> = 线圈数量 / 8，如果余数非 0，则 N = N+1</p>\n<p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 字节数（1byte）+ 线圈状态（Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x81</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319211327513.png\" alt=\"image-20220319211327513\" /></p>\n<h3 id=\"功能-0202h读离散输入\"><a class=\"anchor\" href=\"#功能-0202h读离散输入\">#</a> 功能 02（02H）读离散输入</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x02</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>离散状态数量</td>\n<td>2 字节</td>\n<td>1 to 2000 (0x7D0)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x02</strong>（1byte）+ 起始地址（2byte）+ 离散数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x02</strong></td>\n</tr>\n<tr>\n<td>离散状态数量对应的字节数</td>\n<td>1 字节</td>\n<td><strong>*N</strong></td>\n</tr>\n<tr>\n<td>离散数据 1</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>离散数据 2</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>离散数据 n</td>\n<td>1 字节</td>\n<td>n = N or N+1</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>*N</strong> = 离散状态数量 / 8，如果余数非 0，则 N = N+1</p>\n<p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 字节数（1byte）+ 离散状态（Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x82</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319212623922.png\" alt=\"image-20220319212623922\" /></p>\n<h3 id=\"功能-0303h读保持寄存器\"><a class=\"anchor\" href=\"#功能-0303h读保持寄存器\">#</a> 功能 03（03H）读保持寄存器</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x03</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>保持寄存器数量</td>\n<td>2 字节</td>\n<td>1 to 125 (0x7D)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x03</strong>（1byte）+ 起始地址（2byte）+ 保持寄存器数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x03</strong></td>\n</tr>\n<tr>\n<td>保持寄存器数量对应的字节数</td>\n<td>1 字节</td>\n<td>2 * N</td>\n</tr>\n<tr>\n<td>寄存器数值 1</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 2</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 n</td>\n<td>2 字节</td>\n<td>n = N</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x03</strong>（1byte）+ 字节数（1byte）+ 保持寄存器值（2 * Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x83</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319213419588.png\" alt=\"image-20220319213419588\" /></p>\n<h3 id=\"功能-0404h读输入寄存器\"><a class=\"anchor\" href=\"#功能-0404h读输入寄存器\">#</a> 功能 04（04H）读输入寄存器</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x04</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>输入寄存器数量</td>\n<td>2 字节</td>\n<td>1 to 125 (0x7D)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x04</strong>（1byte）+ 起始地址（2byte）+ 输入寄存器数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x04</strong></td>\n</tr>\n<tr>\n<td>保持寄存器数量对应的字节数</td>\n<td>1 字节</td>\n<td>2 * N</td>\n</tr>\n<tr>\n<td>寄存器数值 1</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 2</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 n</td>\n<td>2 字节</td>\n<td>n = N</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x04</strong>（1byte）+ 字节数（1byte）+ 输入寄存器值（2 * Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x84</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319214513539.png\" alt=\"image-20220319214513539\" /></p>\n<h3 id=\"功能-0505h写单线圈\"><a class=\"anchor\" href=\"#功能-0505h写单线圈\">#</a> 功能 05（05H）写单线圈</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x05</strong></td>\n</tr>\n<tr>\n<td>输出地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td><strong>* 线圈数值</strong></td>\n<td>2 字节</td>\n<td>0x0000 or 0xFF00</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>*<strong> 线圈数值</strong> ：0xFF00 -&gt; 请求线圈状态为 ON</p>\n<p>​\t\t\t\t\t\t0x0000 -&gt; 请求线圈状态为 OFF</p>\n<p>​\t\t\t\t\t\t其他值 -&gt; 非法且对线圈不起作用</p>\n<p>指令：设备地址（1byte）+ <strong>0x05</strong>（1byte）+ 输出地址（2byte）+ 线圈值（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x05</strong></td>\n</tr>\n<tr>\n<td>输出地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>线圈数值</td>\n<td>2 字节</td>\n<td>0x0000 or 0xFF00</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：正常响应是请求的应答</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x85</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319215633462.png\" alt=\"image-20220319215633462\" /></p>\n<h3 id=\"功能-0606h写单个保持寄存器\"><a class=\"anchor\" href=\"#功能-0606h写单个保持寄存器\">#</a> 功能 06（06H）写单个保持寄存器</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x06</strong></td>\n</tr>\n<tr>\n<td>寄存器地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>寄存器数值</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x06</strong>（1byte）+ 保持寄存器地址（2byte）+ 保持寄存器值（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x06</strong></td>\n</tr>\n<tr>\n<td>寄存器地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>寄存器数值</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：正常响应是请求的应答</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x86</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319220604204.png\" alt=\"image-20220319220604204\" /></p>\n<h3 id=\"功能-150fh写多个线圈\"><a class=\"anchor\" href=\"#功能-150fh写多个线圈\">#</a> 功能 15（0FH）写多个线圈</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x0F</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>线圈输出数量</td>\n<td>2 字节</td>\n<td>1 to 1968 (0x7B0)</td>\n</tr>\n<tr>\n<td>线圈数量对应的字节数</td>\n<td>1 字节</td>\n<td><strong>*N</strong></td>\n</tr>\n<tr>\n<td>线圈输出数据 1</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>线圈输出数据 2</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>线圈输出数据 n</td>\n<td>1 字节</td>\n<td>n = N or N+1</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><strong>*N</strong> = 线圈输出数量 / 8，如果余数非 0，则 N = N+1</p>\n<p>指令：设备地址（1byte）+ <strong>0x0F</strong>（1byte）+ 起始地址（2byte）+ 线圈输出数（2byte）+ 字节数（1byte）+ 线圈输出数据（Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x0F</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>线圈输出数量</td>\n<td>2 字节</td>\n<td>1 to 1968 (0x7B0)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x0F</strong>（1byte）+ 起始地址（2byte）+ 线圈输出数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x8F</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319223636555.png\" alt=\"image-20220319223636555\" /></p>\n<h3 id=\"功能-1610h写多个保持寄存器\"><a class=\"anchor\" href=\"#功能-1610h写多个保持寄存器\">#</a> 功能 16（10H）写多个保持寄存器</h3>\n<ul>\n<li>\n<p>请求：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x10</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>寄存器数量</td>\n<td>2 字节</td>\n<td>1 to 123 (0x7B)</td>\n</tr>\n<tr>\n<td>寄存器数量对应的字节数</td>\n<td>1 字节</td>\n<td>2 * N</td>\n</tr>\n<tr>\n<td>寄存器数值 1</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 2</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>寄存器数值 n</td>\n<td>2 字节</td>\n<td>n = N</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x10</strong>（1byte）+ 起始地址（2byte）+ 寄存器数（2byte）+ 字节数（1byte）+ 寄存器数值（2 * Nbyte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>应答：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x10</strong></td>\n</tr>\n<tr>\n<td>开始地址</td>\n<td>2 字节</td>\n<td>0x0000 to 0xFFFF</td>\n</tr>\n<tr>\n<td>寄存器数量</td>\n<td>2 字节</td>\n<td>1 to 123 (0x7B)</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>指令：设备地址（1byte）+ <strong>0x10</strong>（1byte）+ 起始地址（2byte）+ 保持寄存器数（2byte）+ CRC（2byte）</p>\n</li>\n<li>\n<p>错误返回：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>长度</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>设备地址</td>\n<td>1 字节</td>\n<td></td>\n</tr>\n<tr>\n<td>功能码</td>\n<td>1 字节</td>\n<td><strong>0x90</strong></td>\n</tr>\n<tr>\n<td>错误码</td>\n<td>1 字节</td>\n<td>01 or 02 or 03 or 04</td>\n</tr>\n<tr>\n<td>CRC 校验码</td>\n<td>2 字节</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>流程图：</strong></p>\n<p><img data-src=\"image-20220319224924985.png\" alt=\"image-20220319224924985\" /></p>\n<h2 id=\"crc校验\"><a class=\"anchor\" href=\"#crc校验\">#</a> CRC 校验</h2>\n<ul>\n<li>\n<p>CRC16_MODBUS 查表法：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> aucCRCHi<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> aucCRCLo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token number\">0x00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x03</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x07</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC7</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token number\">0x05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x04</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0E</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token number\">0x0A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xCB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x08</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x19</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD9</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token number\">0x1B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x1C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xDC</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token number\">0x14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token number\">0x11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xD0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x32</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token number\">0x36</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x37</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x35</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x34</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3D</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x3B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x38</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token number\">0x28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x29</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEF</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token number\">0x2D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xED</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xEC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x2C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x27</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token number\">0x22</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x21</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x61</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token number\">0x63</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x62</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x66</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x65</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x64</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token number\">0x6C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAA</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x6B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xAB</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token number\">0x69</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x68</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBB</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBA</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token number\">0xBE</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBD</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xBC</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x7C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x74</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x75</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB5</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token number\">0x77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x76</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x72</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x73</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x71</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x70</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token number\">0x50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x91</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x51</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x93</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x53</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x92</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x56</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x57</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x97</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token number\">0x55</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x95</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x94</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x54</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5E</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token number\">0x5A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x9B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x5B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x98</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x88</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x48</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x49</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x89</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token number\">0x4B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8B</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4A</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8E</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4F</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4D</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x4C</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8C</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token number\">0x44</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x85</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x87</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x43</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x83</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token number\">0x41</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x81</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x40</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token function\">usMBCRC16</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> pucFrame<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> usLen <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>   ucCRCHi <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span>   ucCRCLo <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>    <span class=\"token keyword\">int</span>             iIndex<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> usLen<span class=\"token operator\">--</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        iIndex <span class=\"token operator\">=</span> ucCRCLo <span class=\"token operator\">^</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span> pucFrame<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        ucCRCLo <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ucCRCHi <span class=\"token operator\">^</span> aucCRCHi<span class=\"token punctuation\">[</span>iIndex<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>        ucCRCHi <span class=\"token operator\">=</span> aucCRCLo<span class=\"token punctuation\">[</span>iIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">short</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> ucCRCHi <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span> <span class=\"token operator\">|</span> ucCRCLo <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>CRC16_MODBUS 运算法：</p>\n<p>运算分析及计算，可看文章 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=\">常用校验算法</span> - CRC 章节</p>\n</li>\n</ul>\n<h1 id=\"实例应用\"><a class=\"anchor\" href=\"#实例应用\">#</a> 实例应用</h1>\n<p>测试应用可看以前的文章：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDc1OTA4MDM=\">Nano130 之 FreeModbus 移植</span></p>\n",
            "tags": [
                "history",
                "modbus"
            ]
        },
        {
            "id": "https://arachnid.cc/rt-thread-summarize/",
            "url": "https://arachnid.cc/rt-thread-summarize/",
            "title": "RT-Thread 应用总结",
            "date_published": "2022-02-25T13:33:59.000Z",
            "content_html": "<p>官方文档介绍：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvcnQtdGhyZWFkLXZlcnNpb24vcnQtdGhyZWFkLXN0YW5kYXJkL1JFQURNRQ==\">RT-Thread 文档中心</span></p>\n<h1 id=\"各模块-api接口\"><a class=\"anchor\" href=\"#各模块-api接口\">#</a> 各模块 API 接口</h1>\n<p>由于 RT-Thread 实时操作系统跟各大类 RTOS 应用原理大致相同，因此不再详述各模块功能的作用了（各模块功能的详细信息可参考以前的 《<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2NhdGVnb3J5Xzk2ODQyNTQuaHRtbA==\">FreeRTOS 专栏</span>》），只总结各类功能接口的 API 调用函数。</p>\n<p>官方 API 参考手册：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9hcGkvaW5kZXguaHRtbA==\">RT-Thread API 参考手册</span></p>\n<p><img data-src=\"04thread_sta.png\" alt=\"\" /></p>\n<h2 id=\"线程管理\"><a class=\"anchor\" href=\"#线程管理\">#</a> 线程管理</h2>\n<h3 id=\"a-线程使用\"><a class=\"anchor\" href=\"#a-线程使用\">#</a> A、线程使用</h3>\n<p><img data-src=\"04thread_ops.png\" alt=\"线程相关操作\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建线程</td>\n<td>rt_thread_t rt_thread_create(const char *name, void (*entry)(void *parameter), void *parameter, rt_uint32_t stack_size, rt_uint8_t priority, rt_uint32_t tick);</td>\n<td>该函数将<strong>从动态堆内存中</strong>创建一个线程对象并分配线程对象内存和堆栈。</td>\n<td>xTaskCreate()</td>\n</tr>\n<tr>\n<td>删除线程</td>\n<td>rt_err_t rt_thread_delete(rt_thread_t thread);</td>\n<td>调用该函数后，线程对象将会被移出线程队列并且从内核对象管理器中删除，线程占用的堆栈空间也会被释放，收回的空间将重新用于其他的内存分配。</td>\n<td>vTaskDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始线程</td>\n<td>rt_err_t rt_thread_init(struct rt_thread *thread, const char *name, void (*entry)(void *parameter),  void *parameter, void *stack_start,  rt_uint32_t stack_size, rt_uint8_t priority,  rt_uint32_t tick);</td>\n<td>使用该函数创建的线程，线程句柄 (或者说线程控制块指针) 、线程栈所占用的内存空间，均通过全局变量的方式进行分配，内核不负责动态分配内存空间（即由用户提供，<strong>属于静态分配</strong>，在编译时就被确定、被分配处理）。</td>\n<td>xTaskCreateStatic()</td>\n</tr>\n<tr>\n<td>脱离线程</td>\n<td>rt_err_t rt_thread_detach (rt_thread_t thread);</td>\n<td>与 rt_thread_delete () 函数相对应，使线程对象在线程队列和内核对象管理器中被脱离。注：线程本身不应调用这个接口脱离线程本身</td>\n<td>vTaskDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>启动线程</td>\n<td>rt_err_t rt_thread_startup(rt_thread_t thread);</td>\n<td>当调用这个函数时，将把线程的状态更改为就绪状态，并放到相应优先级队列中等待调度。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>线程睡眠</td>\n<td>rt_err_t rt_thread_sleep(rt_tick_t tick); rt_err_t rt_thread_delay(rt_tick_t tick); rt_err_t rt_thread_mdelay(rt_int32_t ms);</td>\n<td>这三个函数接口的作用相同，调用它们可以使当前线程挂起一段指定的时间，当这个时间过后，线程会被唤醒并再次进入就绪状态。</td>\n<td>vTaskDelay()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzNjA5NjI=\">FreeRTOS 篇章之任务管理</span></p>\n<h3 id=\"b-挂起和恢复\"><a class=\"anchor\" href=\"#b-挂起和恢复\">#</a> B、挂起和恢复</h3>\n<ul class=\"task-list\">\n<li>\n<p><strong>线程挂起的函数接口：</strong></p>\n<p><code>rt_err_t rt_thread_suspend (rt_thread_t thread);</code></p>\n<p>线程挂起接口 rt_thread_suspend () 的参数和返回值见下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>thread</td>\n<td>线程句柄</td>\n</tr>\n<tr>\n<td><strong>返回</strong></td>\n<td>——</td>\n</tr>\n<tr>\n<td>RT_EOK</td>\n<td>线程挂起成功</td>\n</tr>\n<tr>\n<td>RT_ERROR</td>\n<td>线程挂起失败，因为该线程的状态并不是就绪状态</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 注：RT-Thread 对此此函数有严格的使用限制，该函数只能使用来挂起当前线程（即自己挂起自己），不可以在线程 A 中尝试挂起线程 B，而且在挂起线程自己后，需要立刻调用  <code>rt_schedule()</code>  函数进行手动的线程上下文切换。用户只需要了解该接口的作用即可，强烈不建议在程序中使用该接口，该接口可以视为是内部接口。这是因为 A 线程在尝试挂起 B 线程时，A 线程并不清楚 B 线程正在运行什么程序，一旦 B 线程正在使用例如互斥量、信号量等影响、阻塞其他线程的内核对象，那么 A 线程尝试挂起 B 线程的操作将会引发连锁反应，严重危及系统的实时性（有些地方会将其描述为死锁，实际上这种现象不是死锁，但是也不比死锁好到哪去）。</label></p>\n</li>\n<li>\n<p><strong>线程恢复的函数接口：</strong></p>\n<p><code>rt_err_t rt_thread_resume (rt_thread_t thread);</code></p>\n<p>线程恢复接口 rt_thread_resume () 的参数和返回值见下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>参数</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>thread</td>\n<td>线程句柄</td>\n</tr>\n<tr>\n<td><strong>返回</strong></td>\n<td>——</td>\n</tr>\n<tr>\n<td>RT_EOK</td>\n<td>线程恢复成功</td>\n</tr>\n<tr>\n<td>RT_ERROR</td>\n<td>线程恢复失败，因为该个线程的状态并不是 RT_THREAD_SUSPEND 状态</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p>以上这两个函数类似于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0OTg1NTg=\">FreeRTOS 篇章之临界区与调度器</span> 里面的调度器中的操作，但其要求并不一样。</p>\n<h2 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h2>\n<p><img data-src=\"06sem_ops.png\" alt=\"信号量相关接口\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建信号量</td>\n<td>rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag);</td>\n<td>系统<strong>动态分配</strong>一个 semaphore 对象，并初始化这个对象，然后初始化父类 IPC 对象以及与 semaphore 相关的部分。</td>\n<td>xSemaphoreCreateBinary()</td>\n</tr>\n<tr>\n<td>删除信号量</td>\n<td>rt_err_t rt_sem_delete(rt_sem_t sem);</td>\n<td>通过删除信号量以释放系统资源，适用于动态创建的信号量。</td>\n<td>vSemaphoreDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始信号量</td>\n<td>rt_err_t rt_sem_init(rt_sem_t sem, const char *name, rt_uint32_t value, rt_uint8_t flag);</td>\n<td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td>\n<td>xSemaphoreCreateBinaryStatic()</td>\n</tr>\n<tr>\n<td>脱离信号量</td>\n<td>rt_err_t rt_sem_detach(rt_sem_t sem);</td>\n<td>让信号量对象从内核对象管理器中脱离，适用于静态初始化的信号量。</td>\n<td>vSemaphoreDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>获取信号量</td>\n<td>rt_err_t rt_sem_take (rt_sem_t sem, rt_int32_t time);</td>\n<td>通过获取信号量来获得信号量资源实例，当信号量值大于零时，线程将获得信号量，并且相应的信号量值会减 1。</td>\n<td>xSemaphoreTake() / xSemaphoreTakeFromISR()</td>\n</tr>\n<tr>\n<td>无等待获取信号量</td>\n<td>rt_err_t rt_sem_trytake(rt_sem_t sem);</td>\n<td>与  <code>rt_sem_take(sem, RT_WAITING_NO)</code>  的作用相同，即当线程申请的信号量资源实例不可用的时候，它不会等待在该信号量上，而是直接返回 -  <code>RT_ETIMEOUT</code> 。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>释放信号量</td>\n<td>rt_err_t rt_sem_release(rt_sem_t sem);</td>\n<td>释放之前所获得的信号量资源实例。</td>\n<td>xSemaphoreGive() / xSemaphoreGiveFromISR()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0MTI2NTk=\">FreeRTOS 篇章之二值信号量</span></p>\n<h2 id=\"互斥量\"><a class=\"anchor\" href=\"#互斥量\">#</a> 互斥量</h2>\n<p><img data-src=\"06mutex_ops.png\" alt=\"互斥量相关接口\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建互斥量</td>\n<td>rt_mutex_t rt_mutex_create (const char *name, rt_uint8_t flag);</td>\n<td>系统将先从对象管理器中<strong>动态分配</strong>一个 mutex 对象，并初始化这个对象，然后初始化父类 IPC 对象以及与 mutex 相关的部分。</td>\n<td>xSemaphoreCreateMutex()</td>\n</tr>\n<tr>\n<td>删除互斥量</td>\n<td>rt_err_t rt_mutex_delete (rt_mutex_t mutex);</td>\n<td>通过删除互斥量以释放系统资源，适用于动态创建的互斥量。</td>\n<td>vSemaphoreDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始互斥量</td>\n<td>rt_err_t rt_mutex_init (rt_mutex_t mutex, const char *name, rt_uint8_t flag);</td>\n<td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td>\n<td>xSemaphoreCreateMutexStatic()</td>\n</tr>\n<tr>\n<td>脱离互斥量</td>\n<td>rt_err_t rt_mutex_detach (rt_mutex_t mutex);</td>\n<td>把互斥量对象从内核对象管理器中脱离，适用于静态初始化的互斥量。</td>\n<td>vSemaphoreDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>获取互斥量</td>\n<td>rt_err_t rt_mutex_take (rt_mutex_t mutex, rt_int32_t time);</td>\n<td>当线程获取了互斥量，那么线程就有了对该互斥量的所有权，即某一个时刻一个互斥量只能被一个线程持有。</td>\n<td>xSemaphoreTake()</td>\n</tr>\n<tr>\n<td>无等待获取互斥量</td>\n<td>rt_err_t rt_mutex_trytake(rt_mutex_t mutex);</td>\n<td>与  <code>rt_mutex_take(mutex, RT_WAITING_NO)</code>  的作用相同，即当线程申请的互斥量资源实例不可用的时候，它不会等待在该互斥量上，而是直接返回 -  <code>RT_ETIMEOUT</code> 。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>释放互斥量</td>\n<td>rt_err_t rt_mutex_release(rt_mutex_t mutex);</td>\n<td>使用该函数接口时，只有已经拥有互斥量控制权的线程才能释放它，每释放一次该互斥量，它的持有计数就减 1。</td>\n<td>xSemaphoreGive()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0NzkwNjk=\">FreeRTOS 篇章之互斥量</span></p>\n<h2 id=\"事件集\"><a class=\"anchor\" href=\"#事件集\">#</a> 事件集</h2>\n<p><img data-src=\"06event_ops.png\" alt=\"事件相关接口\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建事件集</td>\n<td>rt_event_t rt_event_create(const char *name, rt_uint8_t flag);</td>\n<td>系统从对象管理器中<strong>动态分配</strong>事件集对象，并初始化这个对象，然后初始化父类 IPC 对象。</td>\n<td>xEventGroupCreate()</td>\n</tr>\n<tr>\n<td>删除事件集</td>\n<td>rt_err_t rt_event_delete(rt_event_t event);</td>\n<td>通过删除事件集对象控制块来释放系统资源，适用于动态创建的事件集。</td>\n<td>vEventGroupDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始事件集</td>\n<td>rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag);</td>\n<td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td>\n<td>xEventGroupCreateStatic()</td>\n</tr>\n<tr>\n<td>脱离事件集</td>\n<td>rt_err_t rt_event_detach(rt_event_t event);</td>\n<td>将该事件集从内核对象管理器中脱离，适用于静态初始化的事件集。</td>\n<td>vEventGroupDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>发送事件</td>\n<td>rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set);</td>\n<td>通过参数 set 指定的事件标志来设定 event 事件集对象的事件标志值，然后遍历等待在 event 事件集对象上的等待线程链表，判断是否有线程的事件激活要求与当前 event 对象事件标志值匹配，如果有，则唤醒该线程。</td>\n<td>xEventGroupSetBits() / xEventGroupSetBitsFromISR()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>接收事件</td>\n<td>rt_err_t rt_event_recv(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt_uint32_t *recved);</td>\n<td>系统首先根据 set 参数和接收选项 option 来判断它要接收的事件是否发生，如果已经发生，则根据参数 option 上是否设置有  <code>RT_EVENT_FLAG_CLEAR</code>  来决定是否重置事件的相应标志位，然后返回（其中 recved 参数返回接收到的事件）；如果没有发生，则把等待的 set 和 option 参数填入线程本身的结构中，然后把线程挂起在此事件上，直到其等待的事件满足条件或等待时间超过指定的超时时间。如果超时时间设置为零，则表示当线程要接受的事件没有满足其要求时就不等待，而直接返回 -  <code>RT_ETIMEOUT</code> 。</td>\n<td>xEventGroupWaitBits()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ2MDIyNzQ=\">FreeRTOS 篇章之事件位和事件组</span></p>\n<h2 id=\"邮箱\"><a class=\"anchor\" href=\"#邮箱\">#</a> 邮箱</h2>\n<p><img data-src=\"07mb_ops.png\" alt=\"邮箱相关接口\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建邮箱</td>\n<td>rt_mailbox_t rt_mb_create (const char *name, rt_size_t size, rt_uint8_t flag);</td>\n<td>创建邮箱对象时会先从对象管理器中分配一个邮箱对象，然后给邮箱<strong>动态分配一块内存空间</strong>用来存放邮件，这块内存的大小等于邮件大小（4 字节）与邮箱容量的乘积，接着初始化接收邮件数目和发送邮件在邮箱中的偏移量。</td>\n<td>xQueueCreate()</td>\n</tr>\n<tr>\n<td>删除邮箱</td>\n<td>rt_err_t rt_mb_delete (rt_mailbox_t mb);</td>\n<td>释放相应的系统资源，当操作一旦完成，邮箱将被永久性的删除。</td>\n<td>vQueueDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始邮箱</td>\n<td>rt_err_t rt_mb_init(rt_mailbox_t mb, const char *name, void *msgpool, rt_size_t size, rt_uint8_t flag);</td>\n<td><strong>属于静态分配</strong>，与创建邮箱不同的是，静态邮箱对象的内存是在系统编译时由编译器分配的，一般放于读写数据段或未初始化数据段中，其余的初始化工作与创建邮箱时相同。</td>\n<td>xQueueCreateStatic()</td>\n</tr>\n<tr>\n<td>脱离邮箱</td>\n<td>rt_err_t rt_mb_detach(rt_mailbox_t mb);</td>\n<td>把静态初始化的邮箱对象从内核对象管理器中脱离。</td>\n<td>vQueueDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>发送邮件</td>\n<td>rt_err_t rt_mb_send (rt_mailbox_t mb, rt_uint32_t value);</td>\n<td>发送的邮件可以是 32 位任意格式的数据，一个整型值或者一个指向缓冲区的指针；当邮箱中的邮件已经满时，发送邮件的线程或者中断程序会收到 - <code>RT_EFULL</code>  的返回值。</td>\n<td>xQueueOverwrite() / xQueueOverwriteFromISR()</td>\n</tr>\n<tr>\n<td>等待方式发送邮件</td>\n<td>rt_err_t rt_mb_send_wait (rt_mailbox_t mb, rt_uint32_t value, rt_int32_t timeout);</td>\n<td>与 rt_mb_send () 的区别在于有等待时间，如果邮箱已经满了，那么发送线程将根据设定的 timeout 参数等待邮箱中因为收取邮件而空出空间；如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。</td>\n<td></td>\n</tr>\n<tr>\n<td>发送紧急邮件</td>\n<td>rt_err_t rt_mb_urgent (rt_mailbox_t mb, rt_ubase_t value);</td>\n<td>与发送邮件几乎一样，唯一的不同是，当发送紧急邮件时，邮件被<strong>直接插队放入了邮件队首</strong>，这样，接收者就能够优先接收到紧急邮件，从而及时进行处理。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>接收邮件</td>\n<td>rt_err_t rt_mb_recv (rt_mailbox_t mb, rt_uint32_t *value, rt_int32_t timeout);</td>\n<td>只有当接收者接收的邮箱中有邮件时，接收者才能立即取到邮件并返回  <code>RT_EOK</code>  的返回值，否则接收线程会根据超时时间设置，或挂起在邮箱的等待线程队列上，或直接返回。</td>\n<td>xQueueReceive() / xQueueReceiveFromISR()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzOTk1MzE=\">FreeRTOS 篇章之队列管理</span> 中的消息数目为 1 的队列</p>\n<p>注：由于 FreeRTOS 中并没有邮箱这一概念（邮箱这概念在 uCOS 中有），但是其原理类似于利用队列发送单一数目的信息，由于在 32 系统上 4 字节（32 bit）的内容恰好可以放置一个指针，因此该信息通常为<strong>数据指针</strong>。</p>\n<h2 id=\"消息队列\"><a class=\"anchor\" href=\"#消息队列\">#</a> 消息队列</h2>\n<p><img data-src=\"07msg_ops.png\" alt=\"消息队列相关接口\" /></p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>创建队列</td>\n<td>rt_mq_t rt_mq_create(const char *name, rt_size_t msg_size, rt_size_t max_msgs, rt_uint8_t flag);</td>\n<td>从对象管理器中<strong>动态分配</strong>一个消息队列对象，然后给消息队列对象分配一块内存空间，组织成空闲消息链表，这块 <code>内存的大小 = [消息大小 + 消息头（用于链表连接）的大小] x 消息队列最大个数</code> ，接着再初始化消息队列，此时消息队列为空。</td>\n<td>xQueueCreate()</td>\n</tr>\n<tr>\n<td>删除队列</td>\n<td>rt_err_t rt_mq_delete(rt_mq_t mq);</td>\n<td>删除它以释放系统资源，一旦操作完成，消息队列将被永久性地删除。</td>\n<td>vQueueDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>初始队列</td>\n<td>rt_err_t rt_mq_init(rt_mq_t mq, const char *name, void *msgpool, rt_size_t msg_size, rt_size_t pool_size, rt_uint8_t flag);</td>\n<td><strong>属于静态分配</strong>，跟创建消息队列对象类似，只是静态消息队列对象的内存是在系统编译时由编译器分配的，一般放于读数据段或未初始化数据段中。</td>\n<td>xQueueCreateStatic()</td>\n</tr>\n<tr>\n<td>脱离队列</td>\n<td>rt_err_t rt_mq_detach(rt_mq_t mq);</td>\n<td>将使消息队列对象被从内核对象管理器中脱离。</td>\n<td>vQueueDelete()</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>发送信息</td>\n<td>rt_err_t rt_mq_send (rt_mq_t mq, void *buffer, rt_size_t size);</td>\n<td>线程或者中断服务程序都可以给消息队列发送消息。当发送消息时，消息队列对象先从空闲消息链表上取下一个空闲消息块，把线程或者中断服务程序发送的消息内容复制到消息块上，然后把该消息块挂到消息队列的尾部。当且仅当空闲消息链表上有可用的空闲消息块时，发送者才能成功发送消息；当空闲消息链表上无可用消息块，说明消息队列已满，此时，发送消息的的线程或者中断程序会收到一个错误码（- <code>RT_EFULL</code> ）。</td>\n<td>xQueueSend() / xQueueSendFromISR() xQueueSendToFront() / xQueueSendToFrontFromISR()</td>\n</tr>\n<tr>\n<td>等待方式发送信息</td>\n<td>rt_err_t rt_mq_send_wait(rt_mq_t     mq, const void *buffer, rt_size_t size, rt_int32_t  timeout);</td>\n<td>与 rt_mq_send () 的区别在于有等待时间，如果消息队列已经满了，那么发送线程将根据设定的 timeout 参数进行等待。如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。</td>\n<td></td>\n</tr>\n<tr>\n<td>发送紧急信息</td>\n<td>rt_err_t rt_mq_urgent(rt_mq_t mq, void *buffer, rt_size_t size);</td>\n<td>与发送消息几乎一样，唯一的不同是，当发送紧急消息时，从空闲消息链表上取下来的消息块不是挂到消息队列的队尾，而是挂到队首，这样，接收者就能够优先接收到紧急消息，从而及时进行消息处理。</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>接收信息</td>\n<td>rt_err_t rt_mq_recv (rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout);</td>\n<td>当消息队列中有消息时，接收者才能接收消息，否则接收者会根据超时时间设置，或挂起在消息队列的等待线程队列上，或直接返回。</td>\n<td>xQueueReceive() / xQueueReceiveFromISR()</td>\n</tr>\n</tbody>\n</table>\n<p>对比：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzOTk1MzE=\">FreeRTOS 篇章之队列管理</span></p>\n<h1 id=\"中断管理\"><a class=\"anchor\" href=\"#中断管理\">#</a> 中断管理</h1>\n<p><img data-src=\"09interrupt_ops.png\" alt=\"中断相关接口\" /></p>\n<p>对于上图，通常用的较多的是：</p>\n<h2 id=\"全局中断开关\"><a class=\"anchor\" href=\"#全局中断开关\">#</a> 全局中断开关</h2>\n<p><strong>全局中断开关也称为</strong>中断锁，是禁止多线程访问临界区最简单的一种方式，即通过关闭中断的方式，来保证当前线程不会被其他事件打断（因为整个系统已经不再响应那些可以触发线程重新调度的外部事件），也就是当前线程不会被抢占，除非这个线程主动放弃了处理器控制权。</p>\n<table>\n<thead>\n<tr>\n<th>函数功能</th>\n<th>API 接口</th>\n<th>函数描述</th>\n<th>与 FreeRTOS 相匹配的函数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>关闭整个系统的中断</td>\n<td>rt_base_t rt_hw_interrupt_disable(void);</td>\n<td>关闭整个系统的中断</td>\n<td>taskENTER_CRITICAL() / taskENTER_CRITICAL_FROM_ISR()</td>\n</tr>\n<tr>\n<td>恢复整个系统的中断</td>\n<td>void rt_hw_interrupt_enable(rt_base_t level);</td>\n<td>恢复系统的上一个中断状态</td>\n<td>taskEXIT_CRITICAL() / taskEXIT_CRITICAL_FROM_ISR( x )</td>\n</tr>\n</tbody>\n</table>\n<p><strong>（1）rt_hw_interrupt_disable () API 函数</strong></p>\n<p>原型： <code>rt_base_t rt_hw_interrupt_disable(void);</code></p>\n<p>返回参数：</p>\n<ul>\n<li>rt_hw_interrupt_disable 函数运行前的中断状态</li>\n</ul>\n<p><strong>（2）rt_hw_interrupt_enable () API 函数</strong></p>\n<p>原型： <code>void rt_hw_interrupt_enable(rt_base_t level);</code></p>\n<p>输入参数：</p>\n<ul>\n<li>前一次 rt_hw_interrupt_disable 返回的中断状态</li>\n</ul>\n<p>注：在这里就相当于 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0OTg1NTg=\">FreeRTOS 篇章之临界区与调度器</span> 里面的临界段中的操作。</p>\n<h2 id=\"中断通知\"><a class=\"anchor\" href=\"#中断通知\">#</a> 中断通知</h2>\n<p>当整个系统被中断打断，进入中断处理函数时，需要通知内核当前已经进入到中断状态。</p>\n<p>针对这种情况，RT-Thread 提供如下两个接口：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_interrupt_enter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 用于通知内核，当前已经进入了中断状态，并增加中断嵌套深度（执行 rt_interrupt_nest++）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">rt_interrupt_leave</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// 用于通知内核，当前已经离开了中断状态，并减少中断嵌套深度（执行 rt_interrupt_nest--）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>注：不要在应用程序中调用这两个接口函数。</pre></td></tr></table></figure><p>其实这两个函数等同于 FreeRTOS 中带 FromISR 后缀的函数说明。</p>\n<h1 id=\"rt-thread-studio上手\"><a class=\"anchor\" href=\"#rt-thread-studio上手\">#</a> RT-Thread Studio 上手</h1>\n<p>安装及环境搭建过程可以直接参看官方的指导文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvZGV2ZWxvcG1lbnQtdG9vbHMvcnR0aHJlYWQtc3R1ZGlvL3VtL3N0dWRpby11c2VyLWJlZ2lu\">RT-Thread Studio 使用文档</span></p>\n<p><strong>以下只是简单记录部分关键点：</strong></p>\n<h2 id=\"控制台调试口修改\"><a class=\"anchor\" href=\"#控制台调试口修改\">#</a> 控制台调试口修改</h2>\n<p>在新建项目过程中，可从 GUI 窗口中选择配置，如下图：</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226114622.png\" alt=\"TIM截图20220226114622\" /></p>\n<p>当后期需要重新分配时，则需要在代码和 RT-Thread setting 中修改了，（以修改为  <code>UART 3</code>  为例）修改内容如下：</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226120341.png\" alt=\"TIM截图20220226120341\" /></p>\n<h2 id=\"串口终端集成显示\"><a class=\"anchor\" href=\"#串口终端集成显示\">#</a> 串口终端集成显示</h2>\n<p>在 RT-Thread Studio 上，是可以通过点击工具栏  <code>终端</code>  按钮，来打开对应的终端功能窗口查看输出信息的，并且同样支持与 RT-Thread 特有的  <code>finsh</code>  命令进行交互，串口终端显示操作如下：</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226141345.png\" alt=\"TIM截图20220226141345\" /></p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226142044.png\" alt=\"TIM截图20220226142044\" /></p>\n<h2 id=\"与-cubemx联合编程\"><a class=\"anchor\" href=\"#与-cubemx联合编程\">#</a> 与 CubeMX 联合编程</h2>\n<p>此操作的前提条件是已经安装了 STM32CubeMX</p>\n<h3 id=\"a-启动-cubemx-settings配置\"><a class=\"anchor\" href=\"#a-启动-cubemx-settings配置\">#</a> A、启动 CubeMX settings 配置</h3>\n<p>新建的工程，都是优先使用内部时钟源（如下图），但实际情况下，大部分是使用外部时钟的，因为其稳定性比较好；因此，以修改外部时钟为例。</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226115723.png\" alt=\"TIM截图20220226115723\" /></p>\n<p>由于 RT-Thread Studio 支持与 CubeMX 联合编程，所以我们只需在项目资源管理器中启动  <code>CubeMX settings</code>  进行配置就好（如下图），进入界面后，其操作实际等同于操作 STM32CubeMX。</p>\n<p><img data-src=\"image-20220226210308862.png\" alt=\"image-20220226210308862\" /></p>\n<h3 id=\"b-cubemx-settings配置生成注意点\"><a class=\"anchor\" href=\"#b-cubemx-settings配置生成注意点\">#</a> B、CubeMX settings 配置生成注意点</h3>\n<ul>\n<li>\n<p>尽量生成 GCC 工程，因为 RT-Thread Studio 用的是 gcc 编译器<br />\n<img data-src=\"image-20220226233830986.png\" alt=\"image-20220226233830986\" /></p>\n</li>\n<li>\n<p>选择生成独立的 .c .h 文件<br />\n<img data-src=\"313583-20201110104753899-295524523.png\" alt=\"img\" /></p>\n</li>\n<li>\n<p>生成完成后返回界面，会提示替换了  <code>stm32xxx_hal_conf.h</code>  文件，因此，我们需要把原来的配置，同步过去，该哪些配置需要打开的，都一一打开。</p>\n</li>\n</ul>\n<h3 id=\"c-添加编译规则\"><a class=\"anchor\" href=\"#c-添加编译规则\">#</a> C、添加编译规则</h3>\n<p>在生成 CubeMX 产生的工程后，打开  <code>drv_clk.c</code>  文件，你会发现  <code>clk_init()</code>  函数里面被自动更改了（如下图）；这也就意味着什么呢？记得备份啦，或者上 git /svn 进行版本管理啦。</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226143627.png\" alt=\"TIM截图20220226143627\" /></p>\n<p>于是乎，对工程进行编译时，发现一堆报错，不禁怀疑 RT-Thread Studio 是否支持与 CubeMX 联合编程的。。。</p>\n<p>在这里就需要对编译做相关操作了：</p>\n<p>（1）在生成的 cubemx 文件夹里，先检查 cubemx 文件夹下有没有  <code>SConscript</code>  文件，如果有就跳过创建环节，检查内容。</p>\n<p>（2）核查并更改  <code>SConscript</code>  文件里面的内容。</p>\n<p>（3）有时候在生成 CubeMX 产生的工程后，RT-Thread Studio 会帮你生成一个  <code>SConscript</code>  文件，并写好了规则，如果是已有的，那么可以尝试先编译一下是否有新增的源码进行编译，如果没有，那么可以仿照如下的代码进行修改：</p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20220226150650.png\" alt=\"TIM截图20220226150650\" /></p>\n<p>其中，上面规则里的  <code>src</code>  部分，需要根据实际内容增删需要编译的源文件（如下）：</p>\n<figure class=\"highlight markdown\"><figcaption data-lang=\"markdown\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>src = Split('''</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Src/stm32g4xx_hal_msp.c</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Src/main.c</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Src/dma.c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Src/gpio.c</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Src/usart.c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>''')</pre></td></tr></table></figure><p>当然，为了一劳永逸，你也可以把它修改成这样子：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 引入 building 模块中所有的东西</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">from</span> building <span class=\"token keyword\">import</span> <span class=\"token operator\">*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 获取当前路径。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>cwd <span class=\"token operator\">=</span> GetCurrentDir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 使能选择</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>search_EN <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\"># add cubemx drivers</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\"># search_EN 为 0 时，手动选择添加需要编译的源文件</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># search_EN 为 1 时，自动搜寻与 SrcRemove 匹配以外的源文件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">==</span> search_EN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tsrc <span class=\"token operator\">=</span> Split<span class=\"token punctuation\">(</span><span class=\"token triple-quoted-string string\">'''</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tSrc/stm32f4xx_hal_msp.c</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tSrc/main.c</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t'''</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tsrc <span class=\"token operator\">=</span> Glob<span class=\"token punctuation\">(</span><span class=\"token string\">'Src/*.c'</span><span class=\"token punctuation\">)</span>\t</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tSrcRemove<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Src/stm32f4xx_it.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tSrcRemove<span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Src/system_stm32f4xx.c'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 创建头文件路径列表，并保存至 path 中</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>path <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>cwd <span class=\"token operator\">+</span> <span class=\"token string\">'/Inc'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\"># 这是 RT-Thread 基于 SCons 扩展的一个方法（函数）。</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>group <span class=\"token operator\">=</span> DefineGroup<span class=\"token punctuation\">(</span><span class=\"token string\">'cubemx'</span><span class=\"token punctuation\">,</span> src<span class=\"token punctuation\">,</span> depend <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> CPPPATH <span class=\"token operator\">=</span> path<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>Return<span class=\"token punctuation\">(</span><span class=\"token string\">'group'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>通过上面，你可能发现，为什么文件中的  <code>stm32f4xx_it.c</code>  和  <code>system_stm32f4xx.c</code>  不加入构建；其实你可以尝试一下加入编译一下，你就会发现玄机了。</p>\n<p>更多的关于 SCons 工具的使用可以观看如下链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvZGV2ZWxvcG1lbnQtdG9vbHMvc2NvbnMvc2NvbnM/aWQ9c2NvbnMtJUU3JUFFJTgwJUU0JUJCJThC\">https://www.rt-thread.org/document/site/#/development-tools/scons/scons?id=scons-%e7%ae%80%e4%bb%8b</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY29ucy5vcmcvZG9jL3Byb2R1Y3Rpb24vSFRNTC9zY29ucy11c2VyL2luZGV4Lmh0bWw=\">https://scons.org/doc/production/HTML/scons-user/index.html</span></p>\n<p>最后记得更新 Sconscripts（在项目资源管理器选择目标工程 -&gt; 右键 -&gt; 更新  <code>Sconscripts</code> ）：</p>\n<p><img data-src=\"image-20220226231733878.png\" alt=\"image-20220226231733878\" /></p>\n<h3 id=\"d-迁移-cubemx产生的代码\"><a class=\"anchor\" href=\"#d-迁移-cubemx产生的代码\">#</a> D、迁移 CubeMX 产生的代码</h3>\n<p>当完成上面操作后，再次构建工程，或多或少还会出现错误，大概率是函数重复定义导致，比如  <code>multiple definition of main</code> 。这时候可以如下操作：</p>\n<p><img data-src=\"20220226173146.png\" alt=\"20220226173146\" /></p>\n<p>嘛，或许有时候在 CubeMX 初次生成的 main () 函数上自带了  <code>__WEAK</code>  弱处理关键字，但后期在多次更改 CubeMX settings 配置后，会有出现去掉  <code>__WEAK</code>  的情况，所以为了安全，还是把  <code>__WEAK</code>  添加到上述的保护区域位置去吧。</p>\n<p>除了以上情况，在 CubeMX settings 配置更多外设时，需要把 cubemx/Src 里的 main.c 文件里的配置函数，手动移加到 RT-Thread 工程的 main.c 主文件函数中（一些 RTT 配置里面有的，就不用添加过去了，避免功能出错，例如 ETH 的配置）。如下图：</p>\n<p><img data-src=\"20220226172930.png\" alt=\"20220226172930\" /></p>\n",
            "tags": [
                "history",
                "RTOS"
            ]
        },
        {
            "id": "https://arachnid.cc/modbus-family/",
            "url": "https://arachnid.cc/modbus-family/",
            "title": "Modbus家族之开篇",
            "date_published": "2022-02-08T10:37:49.000Z",
            "content_html": "<h1 id=\"历史溯源\"><a class=\"anchor\" href=\"#历史溯源\">#</a> 历史溯源</h1>\n<p>Modbus 是由 Modicon 公司（现在的施耐德电气 Schneider Electric）在 1979 年开发的一种消息传递结构，为使用可编程逻辑控制器（PLC）通信而发表，用于在智能设备之间建立客户端 - 服务器通信；这是一个划时代、里程碑式的网络协议，因此为工业网络拉开了序幕。Modbus 已经成为工业领域通信协议事实上的业界标准，并且现在是工业电子设备之间常用的连接方式。</p>\n<p>Modbus 在工业环境下很流行，因为它是公开发表并且无著作权要求的。它是为工业应用开发的，与其他标准相比，它相对易于部署和维护，除了要传输的数据格式的大小外，几乎没有其他限制。Modbus 通常使用 <strong>RS485</strong> 作为其物理层。</p>\n<h2 id=\"发展史\"><a class=\"anchor\" href=\"#发展史\">#</a> 发展史</h2>\n<p>Modicon，即今天的施耐德电气，于 1979 年向市场推出了 Modbus 原始协议（Modbus ASCII 和 Modbus RTU）；随着通信领域的迅速发展以及传输速度的提高，扩展版本 Modbus Plus（Modbus + 或者 MB+）紧接着出现，不过此协议是 Modicon 专有的，<strong>和 Modbus 并不相同</strong>；直到以太网技术的标准化和商品化，以太网成为了企业系统的业界标准，同时也成为了工业网络的业界标准；为了将 Modbus 带入 21 世纪，一个开放的 Modbus TCP/IP 规范于 1999 年修订发行；到了 2004 年 4 月，Modbus 协议从施耐德电气转移到 Modbus 组织，这标志着对开放的承诺（<strong>该规范可免费下载，并且</strong>使用 Modbus 或 Modbus TCP/IP 协议无需后续许可费用）；至此，在 Modbus TCP/IP 因为它的开放性、简单、低成本的开发以及支持它所需的最少硬件等特点，存在多个 Modbus TCP 变种，而 Modbus ASCII 和 Modbus RTU 在小型的嵌入式设备当中得到广泛应用。</p>\n<p>&lt;br/&gt;</p>\n<h1 id=\"协议版本\"><a class=\"anchor\" href=\"#协议版本\">#</a> 协议版本</h1>\n<p>Modbus 协议目前存在用于<strong>串口</strong>、<strong>以太网</strong>以及其他支持<strong>互联网协议</strong>的网络的版本。</p>\n<p>Modbus 是一种请求 / 回复协议，提供由功能代码指定的服务。Modbus 功能代码是 Modbus Request (请求) / Response (响应)  PDU 的元素。</p>\n<p>串行端口和以太网存在多种版本的 Modbus 协议，最常见的是：</p>\n<ul>\n<li>Modbus RTU</li>\n<li>Modbus ASCII</li>\n<li>Modbus TCP</li>\n<li>Modbus Plus</li>\n</ul>\n<p><img data-src=\"Modbus-Different-Types.jpg\" alt=\"\" /></p>\n<h2 id=\"modbus-rtu\"><a class=\"anchor\" href=\"#modbus-rtu\">#</a> Modbus RTU</h2>\n<p><code>Modbus RTU</code>  是一种紧凑的，采用二进制表示数据的方式；因为使用二进制编码和 CRC 错误检查的结合使得 Modbus RTU 适用于工业应用，因为它比 ASCII 字符的替代方案更有效地传输。在 Modbus RTU 与 ASCII 之间进行选择时，如果考虑性能，则 RTU 是首选。</p>\n<h2 id=\"modbus-ascii\"><a class=\"anchor\" href=\"#modbus-ascii\">#</a> Modbus ASCII</h2>\n<p><code>Modbus ASCII</code>  是当设备设置为使用  <code>ASCII</code>  （<strong>美国信息交换标准代码</strong>）模式时，在  <code>MODBUS</code>  串行线上把通信消息中的每个 8 位字节将作为两个 ASCII 4 位字符发送。当物理通信链路或设备的功能不允许符合 RTU 计时器管理要求时，使用此模式。所以此模式的效率不如 RTU，因为每个字节需要两个字符。示例：字节 0x7D 编码为两个字符：  <code>0x35</code>  和  <code>0x42</code> （在  <code>ASCII</code>  表中为  <code>0x37</code>  =  <code>'7'</code> ，而  <code>0x44</code>  =  <code>'D'</code> ）。</p>\n<h2 id=\"modbus-tcp\"><a class=\"anchor\" href=\"#modbus-tcp\">#</a> Modbus TCP</h2>\n<p><code>Modbus TCP</code>  是在  <code>TCP/IP</code>  网络上运行的 Modbus 的实现，旨在允许 Modbus ASCII / RTU 协议在基于 TCP / IP 的网络上传输。Modbus / TCP 将 Modbus 消息嵌入 TCP / IP 帧内。尽管实现起来非常简单，但是与网络相关的特性增加了一些挑战。例如，由于 Modbus 主机期望并要求在一定时间范围内对其轮询做出响应，因此必须考虑 TCP / IP 网络的不确定性（和其他方面）。Modbus ASCII 和 Modbus TCP 之间的主要区别在于，Modbus ASCII 所需的 LRC 错误检查由 IP 层执行。</p>\n<blockquote>\n<p>对于以上  <code>TCP</code> /  <code>RTU</code> /  <code>ASCII</code>  的这三种通信协议在数据模型和功能调用上都是相同的，只有封装方式是不同的。</p>\n</blockquote>\n<h2 id=\"modbus-plus\"><a class=\"anchor\" href=\"#modbus-plus\">#</a> Modbus Plus</h2>\n<p><code>Modbus Plus</code>  （Modbus + 或者 MB+）属于 Modbus 的一个扩展版本，不过此协议是 Modicon 专有的，和 Modbus 不同。它需要一个专门的协处理器来处理类似 HDLC 的高速令牌旋转。它使用 1Mbit/s 的双绞线，并且每个节点都有转换隔离设备，是一种采用转换／边缘触发而不是电压／水平触发的设备。连接 Modbus Plus 到计算机需要特别的接口，通常是支持 ISA（SA85），PCI 或者 PCMCIA 总线的板卡。</p>\n<h1 id=\"通信和设备\"><a class=\"anchor\" href=\"#通信和设备\">#</a> 通信和设备</h1>\n<p>Modbus 有下列三种通信方式：</p>\n<p>（1）以太网：对应的通信模式是 <strong>Modbus TCP/IP</strong></p>\n<p>（2）异步串行传输（各种介质如有线 RS-232/422/485/、光纤、无线等）：对应的通信模式是 <strong>Modbus RTU</strong> 或 <strong>Modbus ASCII</strong></p>\n<p>（3）高速令牌传递网络：对应的通信模式是 <strong>Modbus PLUS</strong></p>\n<p>Modbus 通过多种类型的物理介质进行通信，例如：</p>\n<ul>\n<li>串行 RS-232</li>\n<li>串行 RS-485</li>\n<li>串行 RS-422</li>\n<li>以太网</li>\n</ul>\n<p>Modbus RTU 和 Modbus ASCII 协议应用于串口链接（RS232、RS485、RS422），Modbus TCP/IP 协议应用于以太网链接。</p>\n<p><img data-src=\"Modbus-Communication-Physical-Media.gif\" alt=\"img\" /></p>\n<h1 id=\"消息结构\"><a class=\"anchor\" href=\"#消息结构\">#</a> 消息结构</h1>\n<p>Modbus 的主要消息结构是点对点，能够在点对点和多点网络上运行。</p>\n<p><img data-src=\"image-20220208222537825.png\" alt=\"image-20220208222537825\" /></p>\n<p>Modbus 协议遵循 ** 主 / 从（客户端 / 服务器）** 架构，主（客户端）向从（服务器）发送请求并等待响应。注意！目前 Modbus 中使用的术语 “主” 和 “从” 已被术语 “客户端” 和 “服务器” 所取代了。</p>\n<p><img data-src=\"image-20220209165731722.png\" alt=\"image-20220209165731722\" /></p>\n<h1 id=\"常见-modbus开源库\"><a class=\"anchor\" href=\"#常见-modbus开源库\">#</a> 常见 Modbus 开源库</h1>\n<h2 id=\"freemodbus\"><a class=\"anchor\" href=\"#freemodbus\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZW1iZWRkZWQtZXhwZXJ0cy5hdC9lbi9mcmVlbW9kYnVzLw==\">FreeModbus</span></h2>\n<p>FreeMODBUS 是流行的 Modbus 协议的免费实现，专门针对嵌入式系统。FreeMODBUS 提供了 <em>Modbus 应用协议 v1.1a</em> 的实现，并支持 <em>Modbus over serial line 规范 1.0</em> 中定义的 <strong>RTU/ASCII</strong> 传输模式 ；自 0.7 版以来，FreeModbus 还支持 <strong>Modbus/TCP</strong>；0.9 版添加了第一个 Modbus/TCP 端口嵌入式使用 LWIP TCP/IP 堆栈的系统。唯一可惜的是，该 FreeMODBUS 只对从机开放了源码，主机部分并未实现开源。</p>\n<p>以下是该 FreeMODBUS 的下载链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZW1iZWRkZWQtZXhwZXJ0cy5hdC9lbi9mcmVlbW9kYnVzLWRvd25sb2Fkcy8=\">https://www.embedded-experts.at/en/freemodbus-downloads/</span></p>\n<h2 id=\"libmodbus\"><a class=\"anchor\" href=\"#libmodbus\">#</a> <span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWJtb2RidXMub3JnLw==\">libmodbus</span></h2>\n<p>libmodbus 是一个多平台的 Modbus 源库，适用于 Linux、Mac OS X、FreeBSD、QNX 和 Win32 等操作系统；可以根据 Modbus 协议发送和接收数据。支持 RTU（串行）和 TCP（以太网）通信。</p>\n<p>以下是该 libmodbus 的下载链接：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9saWJtb2RidXMub3JnL2Rvd25sb2FkLw==\">https://libmodbus.org/download/</span></p>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2RidXMub3JnLw==\">Modbus 主页</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTW9kYnVz\">Modbus</span> - wiki</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFscGFycy5jb20vbW9kYnVzLw==\">WHAT IS MODBUS?</span></p>\n<p>《<span class=\"exturl\" data-url=\"aHR0cHM6Ly9wcm9jZXNzLmhvbmV5d2VsbC5jb20vdXMvZW4vc3VwcG9ydC9wcm9kdWN0LWRvY3VtZW50cy1kb3dubG9hZHM/c2VhcmNoPW1vZGJ1cyUyMGNvbW11bmljYXRpb24lMjBtYW51YWw=\">modbus communication manual</span>》</p>\n<p>《<span class=\"exturl\" data-url=\"aHR0cHM6Ly9tb2RidXMub3JnL2RvY3MvTW9kYnVzX0FwcGxpY2F0aW9uX1Byb3RvY29sX1YxXzFiLnBkZg==\">MODBUS APPLICATION PROTOCOL SPECIFICATION V1.1b</span>》</p>\n<p>《<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuZ2VuZXJhdGlvbnJvYm90cy5jb20vbWVkaWEvcm9ib3RlcS9tb2RidXMtbWFudWFsLnBkZg==\">Modbus Fieldbus Networking</span>》</p>\n<p>《<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubS1zeXN0ZW0uY28uanAvbXNzZW5nbGlzaC9zZXJ2aWNlL2VtbW9kYnVzLnBkZg==\">Modbus Protocol Reference Guide</span>》</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydHVhbC1zZXJpYWwtcG9ydC5vcmcvY24vYXJ0aWNsZXMvbW9kYnVzLXJ0dS1ndWlkZS8=\">Modbus RTU 通信指南</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudmlydHVhbC1zZXJpYWwtcG9ydC5vcmcvY24vYXJ0aWNsZXMvbW9kYnVzLWFzY2lpLWd1aWRlLw==\">高级 Modbus ASCII 教程</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1cy5odG1s\">modbus tools</span></p>\n",
            "tags": [
                "history",
                "modbus"
            ]
        },
        {
            "id": "https://arachnid.cc/stepper-motor/",
            "url": "https://arachnid.cc/stepper-motor/",
            "title": "步进电机及丝杆",
            "date_published": "2021-10-30T14:51:43.000Z",
            "content_html": "<h1 id=\"步进电机\"><a class=\"anchor\" href=\"#步进电机\">#</a> 步进电机</h1>\n<h2 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h2>\n<p>步进电机（英语：Stepper motor、Step motor）是直流无刷电机的一种，为具有如齿轮状突起（小齿）相锲合的定子和转子，可借由切换流向定子线圈中的电流，以一定角度逐步转动的电动机，能将电脉冲信号转换成相应角位移或线位移。</p>\n<h3 id=\"a-构造上\"><a class=\"anchor\" href=\"#a-构造上\">#</a> A、构造上</h3>\n<p>步进电机在构造上有三种主要类型：反应式（Variable Reluctance, VR）、永磁式（Permanent Magnet, PM）和混合式（Hybrid Stepping, HS）</p>\n<p><img data-src=\"15350977719637sn7os61sp.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>反应式：也叫感应式、磁滞式或磁阻式步进电机。定子上有绕组、转子由软磁材料组成；定、转子周边均匀分布小齿和槽，通电后利用磁导的变化产生转矩。结构简单、成本低、步距角小，可达 1.2°、但动态性能差、效率低、发热大，可靠性难保证。</p>\n<p><img data-src=\"2_10.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>永磁式：永磁式步进电机的转子用永磁材料制成，转子的极数与定子的极数相同。其特点是动态性能好、输出力矩大，但这种电机精度差，步矩角大（一般为 7.5° 或 15°）。</p>\n<p><img data-src=\"3_11.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>混合式：也叫永磁反应式、永磁感应式步进电机，综合了反应式和永磁式的优点。其定子上有多相绕组、转子上采用永磁材料，转子和定子上均有多个小齿以提高步矩精度。其特点是输出力矩大、动态性能好，步距角小，但结构复杂、成本相对较高。</p>\n<p><img data-src=\"4_10.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>结构区别：</p>\n<p><img data-src=\"step%20motor.jpg\" alt=\"\" /></p>\n<h3 id=\"b-相数上\"><a class=\"anchor\" href=\"#b-相数上\">#</a> B、相数上</h3>\n<p>从定子上绕组来分类，共有二相、三相和五相等系列。目前最受欢迎的是两相混合式步进电机，约占 97% 以上的市场份额，其原因是性价比高，配上细分驱动器后效果良好。</p>\n<p><img data-src=\"1535097802673o0o22s1864.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>两相：</p>\n<p><img data-src=\"5_6%20-%20%E5%89%AF%E6%9C%AC.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>三相：</p>\n<p><img data-src=\"5_6.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"c-极数上\"><a class=\"anchor\" href=\"#c-极数上\">#</a> C、极数上</h3>\n<p>按照接线方式的不同，步进电机又可以分为单极步进电机（Unipolar Stepper Motor），和双极步进电机（Bipolar Stepper Motor）。</p>\n<p><img data-src=\"153509774969411451pn716%20-%20%E5%89%AF%E6%9C%AC.jpg\" alt=\"\" /></p>\n<ul>\n<li>\n<p>单极型：采用电流在一个绕组中始终沿固定方向流动的驱动方式（单极驱动）。虽然步进电机的结构较为复杂，但是由于仅需要电流 ON /OFF 的控制，因此步进电机的驱动电路较简单。</p>\n<p><img data-src=\"MT1-30_f02.gif\" alt=\"\" /></p>\n</li>\n<li>\n<p>双极型：采用电流在一个绕组中双向流动的驱动方式（双极驱动）。这种方式电机的结构比较简单，端子数也较少，但由于必须控制一个端子的极性，因此驱动电路较为复杂。</p>\n<p><img data-src=\"MT1-30_f01.gif\" alt=\"\" /></p>\n</li>\n</ul>\n<p>单极跟双极比较：</p>\n<p>・双极连接<br />\n－采用电流在一个绕组中双向流动的驱动方式（双极驱动）。<br />\n－结构简单，但步进电机的驱动电路复杂。<br />\n－绕组利用率好，且可以进行精细的控制，因此步进电机能够获得很高的输出转矩。<br />\n－可以减小在线圈中产生的反电动势，因此可以使用耐压低的电机驱动器。</p>\n<p>・单极连接<br />\n－具有中心抽头，采用电流在一个绕组中始终沿固定方向流动的驱动方式（单极驱动）。<br />\n－结构复杂，但步进电机的驱动电路简单。<br />\n－绕组利用率差，与双极连接相比，步进电机只能获得约一半的输出转矩。<br />\n－由于会在线圈中产生较高的反电动势，因此需要使用高耐压的电机驱动器。</p>\n<h2 id=\"步进模式\"><a class=\"anchor\" href=\"#步进模式\">#</a> 步进模式</h2>\n<p>主要有 3 种步进模式 ：</p>\n<ul>\n<li>整步</li>\n<li>半步</li>\n<li>微步</li>\n</ul>\n<h3 id=\"a-整步\"><a class=\"anchor\" href=\"#a-整步\">#</a> A、整步</h3>\n<p><img data-src=\"full-step-mode-stepper-motor.png\" alt=\"\" /></p>\n<p>顾名思义，就是每走一步都是取整的意思。而在整步控制上，也可分成<strong>单相通电驱动</strong>和<strong>双相通电驱动</strong>：</p>\n<p><img data-src=\"11_2.png\" alt=\"\" /></p>\n<p><img data-src=\"full_step_driving_1.png\" alt=\"\" /></p>\n<p>它们之间最大的区别在于，双相通电驱动下，由于电机中流动的电流更多，产生的磁场也更强，因此扭矩也更大。</p>\n<h3 id=\"b-半步\"><a class=\"anchor\" href=\"#b-半步\">#</a> B、半步</h3>\n<p><img data-src=\"half-step-operation-of-stepper-motor.png\" alt=\"\" /></p>\n<p>半步模式属于单相通电驱动和双相通电驱动的组合，这种模式可以将步距减小一倍（旋转 45°，而不是 90°）。其唯一的缺点是电机产生的扭矩不是恒定的，当两相都通电时扭矩较高，只有一相通电时扭矩较小。</p>\n<p><img data-src=\"half_step_driving.png\" alt=\"\" /></p>\n<h3 id=\"c-微步\"><a class=\"anchor\" href=\"#c-微步\">#</a> C、微步</h3>\n<p><img data-src=\"modes-of-excitation-of-stepper-motor-stepper-microstepping.png\" alt=\"\" /></p>\n<p>在微步模式下，可以看作是半步模式的增强版，因为它可以进一步减小步距，并且具有恒定的扭矩输出。这是通过控制每相流过的电流强度来实现的。最多可将电机步距角细分 256 倍，提高了低速光滑度和低速谐振效果。</p>\n<p><img data-src=\"microstepping.png\" alt=\"\" /></p>\n<h2 id=\"运作方式\"><a class=\"anchor\" href=\"#运作方式\">#</a> 运作方式</h2>\n<p>步进电机的运行一般分为三个部分：</p>\n<ul>\n<li>控制器</li>\n<li>驱动器</li>\n<li>电机马达</li>\n</ul>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20211031144528.png\" alt=\"\" /></p>\n<h3 id=\"a-控制器\"><a class=\"anchor\" href=\"#a-控制器\">#</a> A、控制器</h3>\n<p>控制器类似于人的大脑，指引着电机转动的方向以及操控着电机运转的快慢；当配合着一些控制策略，如：PID 控制、自适应控制等等，会使得其运作效果相当出色；而对于常见的控制方式有：传统方式的步进电机控制系统、基于 PLC 的步进电机控制系统、基于 DSP 的步进电机控制系统、基于 ARM 的步进电机控制系统等。</p>\n<h3 id=\"b-驱动器\"><a class=\"anchor\" href=\"#b-驱动器\">#</a> B、驱动器</h3>\n<p>驱动器一般作两个功能：电机的精度控制和驱动运转控制。可分为恒流驱动与恒压驱动两种；恒压驱动方式因其电路构造简单，在高速领域时不易获得转矩的特性，现今已经很少使用；然而恒流驱动方式则是现在广为使用的驱动方式，在高速领域中能掌 握优良的转矩特性。</p>\n<p>常见的驱动电路有：</p>\n<ul>\n<li>\n<p>单极步进电机驱动电路</p>\n<p><img data-src=\"9_5.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>双极步进电机驱动电路</p>\n<p><img data-src=\"10_4.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"c-电机马达\"><a class=\"anchor\" href=\"#c-电机马达\">#</a> C、电机马达</h3>\n<p><img data-src=\"Image_506.png\" alt=\"\" /></p>\n<p>略</p>\n<p>&lt;br&gt;</p>\n<h1 id=\"滚珠丝杆\"><a class=\"anchor\" href=\"#滚珠丝杆\">#</a> 滚珠丝杆</h1>\n<h2 id=\"种类\"><a class=\"anchor\" href=\"#种类\">#</a> 种类</h2>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20211101201524.png\" alt=\"\" /></p>\n<p><img data-src=\"TIM%E6%88%AA%E5%9B%BE20211101201817.png\" alt=\"\" /></p>\n<h2 id=\"型号\"><a class=\"anchor\" href=\"#型号\">#</a> 型号</h2>\n<p><img data-src=\"image-20211101202146111.png\" alt=\"image-20211101202146111\" /></p>\n<p><img data-src=\"image-20211101202211688.png\" alt=\"image-20211101202211688\" /></p>\n<p><img data-src=\"image-20211101202236464.png\" alt=\"image-20211101202236464\" /></p>\n<p><img data-src=\"image-20211101202300243.png\" alt=\"image-20211101202300243\" /></p>\n<p><img data-src=\"image-20211101202323044.png\" alt=\"image-20211101202323044\" /></p>\n<p><img data-src=\"image-20211101202343698.png\" alt=\"image-20211101202343698\" /></p>\n<p><img data-src=\"image-20211101202416290.png\" alt=\"image-20211101202416290\" /></p>\n<p><img data-src=\"image-20211101202437316.png\" alt=\"image-20211101202437316\" /></p>\n<p><img data-src=\"image-20211101202459745.png\" alt=\"image-20211101202459745\" /></p>\n<p><img data-src=\"image-20211101202522600.png\" alt=\"image-20211101202522600\" /></p>\n<h1 id=\"传动装置\"><a class=\"anchor\" href=\"#传动装置\">#</a> 传动装置</h1>\n<h2 id=\"通电自锁\"><a class=\"anchor\" href=\"#通电自锁\">#</a> 通电自锁</h2>\n<p>绕组通电时步进电机具有全部的保持力矩。这就意味着步进电机可以在不使用机械刹车的情况下保持在停止位置。</p>\n<p><img data-src=\"stop_position_self_hold.jpg\" alt=\"\" /></p>\n<h2 id=\"刹车抱闸\"><a class=\"anchor\" href=\"#刹车抱闸\">#</a> 刹车抱闸</h2>\n<p>一旦电源被切断，电机自身的保持力矩丢失，电机不能在垂直操作中或施加外力作用下保持在停止位置。在提升和其它相似应用中需要使用带电磁刹车的电机。</p>\n<p><img data-src=\"electromagnetic_brake_motor.jpg\" alt=\"\" /></p>\n<p>&lt;br&gt;</p>\n<h1 id=\"常用知识归纳\"><a class=\"anchor\" href=\"#常用知识归纳\">#</a> 常用知识归纳</h1>\n<h2 id=\"细分与步进数\"><a class=\"anchor\" href=\"#细分与步进数\">#</a> 细分与步进数</h2>\n<h3 id=\"a-定义\"><a class=\"anchor\" href=\"#a-定义\">#</a> A、定义</h3>\n<ul>\n<li>\n<p><strong>什么是步进数</strong></p>\n<p>步进数，也叫脉冲数，是指步进电机转动一圈或是前进一段距离，需要电机需要接受的信号个数，单位为步。 因为电机的转动最终还是转化为直线运动，所以通常步进数指的是电机推动、拉动主轴，龙门等配件前进 1 毫米所需要的步数。</p>\n<p>当步进数不对的后果：</p>\n<p>例如当一台雕刻机的电机步进数不对，直接影响雕刻出来的结果大小不对。比如步进为 100 的机器，雕刻 1 毫米的直线，电机需要的信号是 100，如果设置步进数为 200，那就多走了一倍的距离，实际雕刻出来的线条就为 2 毫米了。</p>\n</li>\n<li>\n<p><strong>什么是细分</strong></p>\n<p>细分是步进电机驱动器的功能。步进电机的精度有限，一般的步进电机为 200 步走一圈，走一步转动的角度是 1.8 度。当我们需要电机走 0.9 度时，电机就没有办法了。好在步进电机驱动器，可以帮助步进电机把精度提高，把精度提高一倍，叫做半步细分，也叫 1/2 细分，此时电机一个信号脉冲就可以转动 0.9 度。再把精度提高一倍，叫 1/4 细分，走一步，相当于 0.45 度。细分都是一倍倍上去的，有 1/2, 1/4, 1/8, 1/16, 1/32 等，最大可达 256 细分。</p>\n</li>\n</ul>\n<h3 id=\"b-应用\"><a class=\"anchor\" href=\"#b-应用\">#</a> B、应用</h3>\n<ul>\n<li>\n<p><strong>步进数计算三要素</strong></p>\n<p>一个是电机转动一圈所需的脉冲数（原始步数）。这个一般为 200，对应的步进角为 1.8 度；当然也有其他的，像一些小电机只有 15 度，那么转一圈只需 24 个脉冲。</p>\n<p>二是所采用的传动结构。如果用丝杆，要知道丝杆的导程，就是说丝杆转一圈时，前进的毫米数（这个稍后说）。如果是皮带轮，就要知道齿数和齿距，两个相乘得到皮带轮转一圈，皮带前进的毫米数。</p>\n<p>三是步进电机驱动器的细分数。计算的公式是： <strong>原始脉冲数</strong> 除于 <strong>毫米数</strong> 再乘于 <strong>细分数</strong>。</p>\n</li>\n<li>\n<p><strong>合理的步进数</strong></p>\n<p>步进数越大，理论上来说精度越高；然在实际应用中，精度是由很多因素决定的，比如说齿轮可能有间隙，皮带有弹性，机架会抖动等。因此小于 0.01 精度的步进数是大部分是没有意义的。</p>\n</li>\n<li>\n<p><strong>如何纠正步进参数</strong></p>\n<p>有些不是我们自己购买的机器，我们可能不知道具体的电机，传动参数，那么还有一种调整的办法。 先随便设置一个步进数，如 200，然后在软件上控制电机走 100 毫米，如果设置对，实际走的距离就是 100 毫米，如果不对，那么有偏差，比如实际它只走了 80 毫米。那么可以用以下方式计算正确的步进数。</p>\n<p>原理： 正确的步进数跟正确的距离之比 = 错误的步进数跟错误的距离之比</p>\n<p>公式：正确的步进数 = 正确的距离 乘于 错误的步进数 除于 错误的距离 = 100 * 200 / 80= 250 设置步进数为 250 后，你会发现，走 100mm，就是 100mm，校对成功。</p>\n</li>\n</ul>\n<h2 id=\"丝杆脉冲计算\"><a class=\"anchor\" href=\"#丝杆脉冲计算\">#</a> 丝杆脉冲计算</h2>\n<ol>\n<li>首先认识丝杆的导程，一般来说常见的有 1205、1210、1605、1610 等这些说法，然后前两位是直径，后两位表示导程，导程 05 的丝杆就是每两个丝的间距为 5（单位：mm）。</li>\n<li>以常规的步进电机 1.8 度 200 步进，那么走一圈就是 200 * 1.8 = 360 度</li>\n<li>假设驱动器是 8 细分，那就是把 1.8 度再分成 8 份；所以经过驱动器的电机每一步进就是 1.8 度 / 8 = 0.225 度；最终在 8 细分下每转一圈就是 200 * 8 = 1600 步进。</li>\n<li>当导程为 5 的丝杠，则每转一圈走 5 毫米，每一步进就是 5 / 1600 = 0.003125 毫米，这就是<strong>电机参数</strong>。如果是导程为 3 的参数，那就是 0.001875 毫米，以次类推。</li>\n<li>用 1 除以电机参数就是<strong>脉冲当量</strong>，例如: 1 / 0.003125 = 320 步进，就是每走 1 毫米需要多少步进。</li>\n</ol>\n<h2 id=\"常规公式\"><a class=\"anchor\" href=\"#常规公式\">#</a> 常规公式</h2>\n<p>$ 步进电机运行步数 = 运行位移 / 导程 * 360 / 步距角 * 细分数 $</p>\n<p>这是用步进电机接丝杆做驱动时用的，就是计算步进数的式子：各个变量如下：</p>\n<ol>\n<li>步进电机运行步进数 —— 这是你要计算的（也可以说是脉冲的数量），</li>\n<li>运行位移 / 导程 —— 这是位移和导程的关系，这个除出来，就是移动这一段距离螺杆需要转几圈。</li>\n<li>360 / 步距角 —— 因为正常步进电机是一个脉冲转一个步距角，这个算出来就是多少步电机转一圈。例如：步距角 = 7.5 度，这样算出来是 48，这就是 48 步就走一圈。</li>\n<li>细分数 —— 一般情况这个数值是 1，但是采用了细分的方式驱动，可以控制电机一步只转半个步距角，这时细分数就为 2。合在上面式子里就会算出 96 步转一圈。</li>\n<li>最后将 2、3、4 相乘。</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考：</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25ld3MuZWV3b3JsZC5jb20uY24vbXAvVE9TSElCQS9hMjIyMTIuanNweA==\">步进电机驱动器简介（上）—— 步进电机的特点、分类和工作原理</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25ld3MuZWV3b3JsZC5jb20uY24vbXAvVE9TSElCQS9hMjIzNDIuanNweA==\">步进电机驱动器简介（下）—— 步进电机的控制驱动和安全技术</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubW9ub2xpdGhpY3Bvd2VyLmNuL2NuL3N0ZXBwZXItbW90b3JzLWJhc2ljcy10eXBlcy11c2Vz\">步进电机基础知识：类型、用途和工作原理</span></p>\n",
            "tags": [
                "history"
            ]
        },
        {
            "id": "https://arachnid.cc/FreeRTOS-newlib-coexist/",
            "url": "https://arachnid.cc/FreeRTOS-newlib-coexist/",
            "title": "关于 FreeRTOS和 newlib库共存问题",
            "date_published": "2021-10-23T15:03:20.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>newlib 的 strtod、sprintf、sscanf、snprintf、vsnprintf 这些函数都是非线程安全的，这些函数的行为和 keil \\ IAR 以及我们的认知并不一样，这些函数在使用  <code>%f</code>  or  <code>%lf</code>  来输出浮点时，会在申请一块 <strong>3.5K</strong> 左右的内存空间，该内存空间只申请一次，且不释放。作为全局内存使用。如果有多个线程同时调用 sprintf 来字符串化浮点数据，会有几率或较大几率导致系统死机（尤其是多个线程高密度的调用 sprintf 来输出浮点数据）。如果仅用来输出字符串或整形数据，则不会出该问题，即该问题仅局限于浮点数这一块。</p>\n<p>总而言之，sprintf、sscanf、snprintf、vsnprintf、sscanf 这些函数在不处理浮点数相关的时候还是线程安全的，一旦涉及到浮点数  <code>%f</code>  or  <code>%lf</code>  就会申请一块公共的内存空间 (3.5KB) 导致线程的不安全；而 strtod 以及 printf 是彻头彻底的线程不安全（printf 线程不安全是正常的，printf 在哪个编译链下都是线程不安全的；而 strtod、sprintf 等函数理论上都应该是线程安全的 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9tYW5wYWdlcy5jb3VyaWVyLW10YS5vcmcvaHRtbG1hbjMvc3RydG9kLjMuaHRtbCVFRiVCQyU4OSVFMyU4MCU4Mg==\">https://manpages.courier-mta.org/htmlman3/strtod.3.html）。</span></p>\n<h1 id=\"版本\"><a class=\"anchor\" href=\"#版本\">#</a> 版本</h1>\n<p>以下说明仅对于：</p>\n<p>1、FreeRTOS v9.0.0（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0ZyZWVSVE9TL0ZyZWVSVE9TL3RyZWUvVjkuMC4wJUVGJUJDJTg5\">https://github.com/FreeRTOS/FreeRTOS/tree/V9.0.0）</span></p>\n<p>2、GNU Arm Embedded Toolchain 10-2020-q4-major（<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sYXVuY2hwYWQubmV0L2djYy1hcm0tZW1iZWRkZWQvMTAuMC8xMC0yMDIwLXE0LW1ham9yJUVGJUJDJTg5JUU1JTg2JTg1JUU3JUJEJUFFJUU3JTlBJTg0\">https://launchpad.net/gcc-arm-embedded/10.0/10-2020-q4-major）内置的</span> newlib 库</p>\n<h1 id=\"freertos-对-newlib-的支持\"><a class=\"anchor\" href=\"#freertos-对-newlib-的支持\">#</a> FreeRTOS 对 newlib 的支持</h1>\n<p>当我们使用 FreeRTOS 的同时，需要值得注意的是，必须要使我们的执行任务处于线程安全之中，否者将会容易出现数据访问异常；而对 newlib 库来讲，其本身是默认不带线程安全保护的（因其内部大多数调用了  <code>malloc()</code>  等内存分配函数），虽是这样，但 FreeRTOS 仍为其上下文管理提供支持，因此当我们在  <code>FreeRTOSconfig.h</code>  中添加：<br />\n <code>#define configUSE_NEWLIB_REENTRANT 1 // newlib sprintf、strtok 等的线程安全需要...</code> ，那么，在使用此选项时 FreeRTOS 将执行以下操作（在  <code>task.c</code>  中）：</p>\n<ul>\n<li>对于每个任务，在任务控制块 (TCB) 中分配并初始化一个 newlib 重入结构。</li>\n<li>每次任务切换，设置  <code>_impure_ptr</code>  指向新激活任务的可重入结构。</li>\n<li>在任务销毁时，清理重入结构（帮助 newlib 释放任何相关内存）。</li>\n</ul>\n<p>当然，newlib 支持是已经包含在 FreeRTOS 的普遍需求中了，但 FreeRTOS 维护者本身并未使用。FreeRTOS 是不负责由此产生的 newlib 操作的，因此用户必须熟悉 newlib，并且必须提供必要存根的系统级实现，即这部分还需要您的供应商提供内置 newlib 中内存管理线程安全的支持，否者，就自己设计实现了一个系统级的内存管理线程安全（主要是  <code>malloc()</code>  等函数的可重入等问题）</p>\n<h1 id=\"当在-freertos-中直接使用-newlib-库的-printfsprintfsnprintfvsprintfvsnprintf-时出现的问题\"><a class=\"anchor\" href=\"#当在-freertos-中直接使用-newlib-库的-printfsprintfsnprintfvsprintfvsnprintf-时出现的问题\">#</a> 当在 FreeRTOS 中直接使用 newlib 库的 printf/sprintf/snprintf/vsprintf/vsnprintf 时出现的问题</h1>\n<p>前面说了  newlib 库本身是默认不带线程安全保护，因此使得一些调用了  <code>malloc()</code>  函数的 API 函数线程不安全了，这样的结果往往就会导致出现 Hardfault 异常，因此也写了 <a href=\"https://arachnid.cc/docs/Essay/Cortex-M3M4M7%20%E6%95%85%E9%9A%9C%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/\">ARM Cortex-M3/M4/M7 Hardfault 异常分析</a> 这篇笔记。嘛，摊牌了，是来填坑的。</p>\n<p>至于这种情况，网上出现很多这样的问题（本次碰到了，为了避免忘记，所以也记录一下吧）：</p>\n<p>FreeRTOS 社区：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvaGFyZGZhdWx0LWZyb20tcHJpbnRmLWZyZWVydG9zLTktMC0wLXN0bTMyZjAtZ2NjLWFybS1lYWJpLTctMi0wLzc1MzM=\">HardFault from printf - freertos 9.0.0 / stm32f0 / gcc-arm-eabi 7.2.0</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvaG93LXRvLW1ha2UtcHJpbnRmLXNwcmludGYtc3RydG9kLXRocmVhZC1zYWZlLzcxMDM=\">How to make printf/sprintf/strtod thread safe</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvaG93LXRvLWNhdGNoLWNvZGUtdGhhdC1jYXVzZWQtdGhlLWhhcmQtZmF1bHQvNjY4Nw==\">How to catch code that caused the hard fault</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvaS1vLWhhcmRmYXVsdC85MzY0\">I/O Hardfault</span></p>\n<p>ST 社区：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tdW5pdHkuc3QuY29tL3MvcXVlc3Rpb24vMEQ1MFgwMDAwQnJDN2hyU1FDL2hhcmRmYXVsdC1kZWJ1Zy1pbi1zdG0zMmN1YmVpZGU=\">HardFault Debug in STM32CubeIDE</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tdW5pdHkuc3QuY29tL3MvcXVlc3Rpb24vMEQ1MFgwMDAwQkIxZUw3U1FKL2J1Zy1jdWJlbXgtZnJlZXJ0b3MtcHJvamVjdHMtY29ycnVwdC1tZW1vcnk=\">BUG: CubeMX FreeRTOS projects corrupt memory</span></p>\n<p>注意：在 CubeMX 中生成的，对 newlib 库可重入函数 _sbrk () 的实现，需要干掉它（至少在我对它进行编译的时候，出现 Hardfault 异常的可能性更大）</p>\n<p>stackoverflow 社区：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjQxMTg0ODAvcHJvYmxlbS13aXRoLXNwcmludC1wcmludGYtd2l0aC1mcmVlcnRvcy1vbi1zdG0zMmY3\">problem with sprint/printf with freeRTOS on stm32f7</span></p>\n<p>附：newlib 可重入问题及外部接口定义</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9uZXdsaWIvbGliYy5odG1sI1JlZW50cmFuY3k=\">Reentrancy</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9uZXdsaWIvbGliYy5odG1sI1N0dWJz\">Definitions for OS interface</span></p>\n<h1 id=\"调用-printfsprintfsnprintfvsprintfvsnprintf的线程安全处理\"><a class=\"anchor\" href=\"#调用-printfsprintfsnprintfvsprintfvsnprintf的线程安全处理\">#</a> 调用 printf/sprintf/snprintf/vsprintf/vsnprintf 的线程安全处理</h1>\n<p>在使用 printf/sprintf/snprintf/vsprintf/vsnprintf 等 newlib 库中的 I/O 输入输出 API 函数时，由于其调用了  <code>malloc()</code>  函数等问题，导致整个任务线程处于非安全状态，然而对于一些任意内部使用 malloc 系列或依赖于特定于线程的可重入上下文的库，您往往无能为力，因为您并没用这么大的精力去主动对  <code>malloc()</code>  等函数进行加锁保护。那么不如考虑一下大佬提供的如下操作：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWRsZXIuY29tL2VtYmVkZGVkL25ld2xpYkFuZEZyZWVSVE9TLmh0bWw=\">https://nadler.com/embedded/newlibAndFreeRTOS.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYWRsZXIuY29tL2VtYmVkZGVkL05YUF9uZXdsaWJBbmRGcmVlUlRPUy5odG1s\">https://nadler.com/embedded/NXP_newlibAndFreeRTOS.html</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0RSTmFkbGVyL0ZyZWVSVE9TX2hlbHBlcnM=\">https://github.com/DRNadler/FreeRTOS_helpers</span></p>\n<h1 id=\"newlib-下-memcpymemset-函数可能导致的死机问题\"><a class=\"anchor\" href=\"#newlib-下-memcpymemset-函数可能导致的死机问题\">#</a> newlib 下 memcpy/memset 函数可能导致的死机问题</h1>\n<p>在 newlib 下面的 memcpy 以及 memset 等函数是不考虑字节对齐问题的，这可能会导致指针地址为非字节对齐时直接死机。</p>\n<p>详见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2x2Z2wvbHZnbC9pc3N1ZXMvMjc5MCNpc3N1ZWNvbW1lbnQtOTgwNDgxMzc0\">https://github.com/lvgl/lvgl/issues/2790#issuecomment-980481374</span></p>\n",
            "tags": [
                "history",
                "FreeRTOS"
            ]
        },
        {
            "id": "https://arachnid.cc/kicad-summary/",
            "url": "https://arachnid.cc/kicad-summary/",
            "title": "Kicad 应用总结",
            "date_published": "2021-08-14T09:00:24.000Z",
            "content_html": "<blockquote>\n<p>在当前这个时代，对于 PCB 设计，有太多的 EDA 设计软件了，如：Cadence、PADS、Altium 等，但绝大多数是要授权的，而且如今人们版权意识正在提高；这对电子爱好者来说，要想 DIY 一个好东西，免不了依赖于这些设计软件，但如果有开源的、顺手的软件，那么我们更倾于应用这些软件，毕竟从版权意识上看以及投向开源社区来讲都是好的。</p>\n</blockquote>\n<h2 id=\"简介\"><a class=\"anchor\" href=\"#简介\">#</a> 简介</h2>\n<p>KiCad 是一个开源软件工具，用于设计电子原理图和 PCB 图形。</p>\n<p>其官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2ljYWQub3JnLw==\">https://www.kicad.org/</span></p>\n<p>各操作文档说明：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmtpY2FkLm9yZy8=\">https://docs.kicad.org/</span></p>\n<p>由于 KiCad 是一个开源软件，所以我们可以获取到它的源码：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL0tpQ2FkL2tpY2FkLXNvdXJjZS1taXJyb3I=\">https://github.com/KiCad/kicad-source-mirror</span></p>\n<p>当然，基于开源，它实现了跨平台：</p>\n<p><img data-src=\"image-20210814170409099.png\" alt=\"image-20210814170409099\" /></p>\n<p>然后在正式开篇之前，以下这些说明都是基于 V5.1.9 版本（最新版为 V5.1.10，修正了部分 Bug）；该死 V6.0 版本居然还没发布，对于想要了解 V6.0 版本的一些升级功能的，可以移到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoZXhwbG9yYXRpb25zLmNvbS9ibG9nL2tpY2FkL2tpY2FkLTYtcmV2aWV3LW5ldy1hbmQtaW1wcm92ZWQtZmVhdHVyZXMvI3QtMTYxMTAzMTU5OTI0MA==\">KiCad 6 is coming!</span></p>\n<p>&lt;br/&gt;</p>\n<h2 id=\"入门\"><a class=\"anchor\" href=\"#入门\">#</a> 入门</h2>\n<h3 id=\"工作流程\"><a class=\"anchor\" href=\"#工作流程\">#</a> 工作流程</h3>\n<p>Kicad 有着其独特的工作流程：</p>\n<p><img data-src=\"kicad_flowchart.png\" alt=\"kicad_flowchart\" /></p>\n<p>设计一个 PCB 板，主要由两个任务来完成：绘制原理图和布置电路板。</p>\n<h3 id=\"文件说明\"><a class=\"anchor\" href=\"#文件说明\">#</a> 文件说明</h3>\n<p>KiCad 在创建并使用时具有以下特定扩展名文件和文件夹，其主要用于原理图和电路板编辑。</p>\n<ol>\n<li>\n<p>项目管理文件</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.pro</td>\n<td style=\"text-align:left\">Small file containing a few parameters for the current project, including the component library list.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>原理图编辑器文件</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.sch</td>\n<td style=\"text-align:left\">Schematic files, which do not contain the components themselves.</td>\n</tr>\n<tr>\n<td>*.lib</td>\n<td style=\"text-align:left\">Schematic component library files, containing the component descriptions: graphic shape, pins, fields.</td>\n</tr>\n<tr>\n<td>*.dcm</td>\n<td style=\"text-align:left\">Schematic component library documentation, containing some component descriptions: comments, keywords, reference to data sheets.</td>\n</tr>\n<tr>\n<td>*_cache.lib</td>\n<td style=\"text-align:left\">Schematic component library cache file, containing a copy of the components used in the schematic project.</td>\n</tr>\n<tr>\n<td>sym-lib-table</td>\n<td style=\"text-align:left\">Symbol library list (symbol library table): list of symbol libraries available in the schematic editor.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>制板编辑文件和文件夹</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.kicad_pcb</td>\n<td style=\"text-align:left\">Board file containing all info but the page layout.</td>\n</tr>\n<tr>\n<td>*.pretty</td>\n<td style=\"text-align:left\">Footprint library folders. The folder itself is the library.</td>\n</tr>\n<tr>\n<td>*.kicad_mod</td>\n<td style=\"text-align:left\">Footprint files, containing one footprint description each.</td>\n</tr>\n<tr>\n<td>*.brd</td>\n<td style=\"text-align:left\">Board file in the legacy format. Can be read, but not written, by the current board editor.</td>\n</tr>\n<tr>\n<td>*.mod</td>\n<td style=\"text-align:left\">Footprint library in the legacy format. Can be read by the footprint or the board editor, but not written.</td>\n</tr>\n<tr>\n<td>fp-lib-table</td>\n<td style=\"text-align:left\">Footprint library list (footprint library table): list of footprint libraries (various formats) which are loaded by the board or the footprint editor or CvPcb.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>通用文件</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.kicad_wks</td>\n<td style=\"text-align:left\">Page layout description files, for people who want a worksheet with a custom look.</td>\n</tr>\n<tr>\n<td>*.net</td>\n<td style=\"text-align:left\">Netlist file created by the schematic, and read by the board editor. This file is associated to the .cmp file, for users who prefer a separate file for the component/footprint association.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>特殊文件</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.cmp</td>\n<td>Association between components used in the schematic and their footprints. It can be created by Pcbnew and imported by Eeschema. Its purpose is to import changes from Pcbnew to Eeschema, for users who change footprints inside Pcbnew (for instance using Exchange Footprints command) and want to import these changes in schematic.</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>其他文件</p>\n<p>主要是生产生成文件</p>\n<table>\n<thead>\n<tr>\n<th>文件扩展名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*.gbr</td>\n<td>Gerber files, for fabrication.</td>\n</tr>\n<tr>\n<td>*.drl</td>\n<td>Drill files (Excellon format), for fabrication.</td>\n</tr>\n<tr>\n<td>*.pos</td>\n<td>Position files (ASCII format), for automatic insertion machines.</td>\n</tr>\n<tr>\n<td>*.rpt</td>\n<td>Report files (ASCII format), for documentation.</td>\n</tr>\n<tr>\n<td>*.ps</td>\n<td>Plot files (Postscript), for documentation.</td>\n</tr>\n<tr>\n<td>*.pdf</td>\n<td>Plot files (PDF format), for documentation.</td>\n</tr>\n<tr>\n<td>*.svg</td>\n<td>Plot files (SVG format), for documentation.</td>\n</tr>\n<tr>\n<td>*.dxf</td>\n<td>Plot files (DXF format), for documentation.</td>\n</tr>\n<tr>\n<td>*.plt</td>\n<td>Plot files (HPGL format), for documentation.</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p>&lt;br/&gt;</p>\n<h2 id=\"常用快捷键\"><a class=\"anchor\" href=\"#常用快捷键\">#</a> 常用快捷键</h2>\n<p>首先说明一下，热键（即单个按键）直接用字母表示；组合键（是指先按住第一个键不放，然后按下第二个键，再放开这两个键。）则用 “+” 表示；多次按键（是指先按下第一个键并放开，然后按下第二个键并放开，以此类推。）则用 “ - ” 表示。</p>\n<h3 id=\"常规\"><a class=\"anchor\" href=\"#常规\">#</a> 常规</h3>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ctrl + N</td>\n<td>新建</td>\n</tr>\n<tr>\n<td>Ctrl + O</td>\n<td>打开</td>\n</tr>\n<tr>\n<td>Ctrl + S</td>\n<td>保存</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + S</td>\n<td>另存为</td>\n</tr>\n<tr>\n<td>Ctrl + Z</td>\n<td>撤销</td>\n</tr>\n<tr>\n<td>Ctrl + Y</td>\n<td>重做</td>\n</tr>\n<tr>\n<td>Ctrl + X</td>\n<td>剪切</td>\n</tr>\n<tr>\n<td>Ctrl + C</td>\n<td>复制</td>\n</tr>\n<tr>\n<td>Ctrl + V</td>\n<td>粘贴</td>\n</tr>\n<tr>\n<td>Ctrl + F</td>\n<td>查找</td>\n</tr>\n<tr>\n<td>F1</td>\n<td>放大</td>\n</tr>\n<tr>\n<td>F2</td>\n<td>缩小</td>\n</tr>\n<tr>\n<td>F3</td>\n<td>缩放重绘</td>\n</tr>\n<tr>\n<td>F4</td>\n<td>缩放中心</td>\n</tr>\n<tr>\n<td>Home</td>\n<td>适合屏幕</td>\n</tr>\n<tr>\n<td>E</td>\n<td>编辑</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"原理图\"><a class=\"anchor\" href=\"#原理图\">#</a> 原理图</h3>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>C</td>\n<td>重复的器件符号或标签</td>\n</tr>\n<tr>\n<td>R</td>\n<td>旋转</td>\n</tr>\n<tr>\n<td>M</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>A</td>\n<td>添加器件符号</td>\n</tr>\n<tr>\n<td>P</td>\n<td>添加电源符号</td>\n</tr>\n<tr>\n<td>X</td>\n<td>X 轴镜像</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Y 轴镜像</td>\n</tr>\n<tr>\n<td>W</td>\n<td>画线</td>\n</tr>\n<tr>\n<td>B</td>\n<td>放置总线</td>\n</tr>\n<tr>\n<td>L</td>\n<td>添加标签</td>\n</tr>\n<tr>\n<td>H</td>\n<td>添加分层标签</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>添加全局标签</td>\n</tr>\n<tr>\n<td>J</td>\n<td>添加连接点</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>添加禁止连接标志</td>\n</tr>\n<tr>\n<td>F8</td>\n<td>更新到 PCB</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"pcb\"><a class=\"anchor\" href=\"#pcb\">#</a> PCB</h3>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>O</td>\n<td>放置封装</td>\n</tr>\n<tr>\n<td>D</td>\n<td>保持角度拖动布线</td>\n</tr>\n<tr>\n<td>X</td>\n<td>布线</td>\n</tr>\n<tr>\n<td>Q</td>\n<td>编辑线宽 / 过孔尺寸</td>\n</tr>\n<tr>\n<td>L</td>\n<td>锁定 / 解锁封装</td>\n</tr>\n<tr>\n<td>V</td>\n<td>常规状态下，切换层；布线状态下，放置过孔并切换层</td>\n</tr>\n<tr>\n<td>N / Shift + N</td>\n<td>切换网格大小</td>\n</tr>\n<tr>\n<td>Ctrl + H</td>\n<td>板层高对比模式（单层显示）</td>\n</tr>\n<tr>\n<td>W / Shift + W</td>\n<td>切换线宽</td>\n</tr>\n<tr>\n<td>Ctrl</td>\n<td>保持角度</td>\n</tr>\n<tr>\n<td>/</td>\n<td>布线轨迹切换</td>\n</tr>\n<tr>\n<td>B</td>\n<td>填充所有铜层区域</td>\n</tr>\n<tr>\n<td>Ctrl + Shift + M</td>\n<td>测量</td>\n</tr>\n<tr>\n<td>Alt + 6</td>\n<td>差分布线</td>\n</tr>\n<tr>\n<td>G</td>\n<td>调整铜层区域</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"库封装\"><a class=\"anchor\" href=\"#库封装\">#</a> 库封装</h3>\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>M</td>\n<td>移动</td>\n</tr>\n<tr>\n<td>X</td>\n<td>X 轴镜像</td>\n</tr>\n<tr>\n<td>Y</td>\n<td>Y 轴镜像</td>\n</tr>\n<tr>\n<td>Instert</td>\n<td>重复引脚</td>\n</tr>\n</tbody>\n</table>\n<p>&lt;br/&gt;</p>\n<h2 id=\"常用插件\"><a class=\"anchor\" href=\"#常用插件\">#</a> 常用插件</h2>\n<h3 id=\"主题配色\"><a class=\"anchor\" href=\"#主题配色\">#</a> 主题配色</h3>\n<p>地址链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3BvaW50aGkva2ljYWQtY29sb3Itc2NoZW1lcw==\">https://github.com/pointhi/kicad-color-schemes</span></p>\n<p>例如笔者当前的主题配色为（<strong>behave-dark</strong>）：</p>\n<p><img data-src=\"eeschema.png\" alt=\"eeschema\" /></p>\n<p><img data-src=\"pcbnew.png\" alt=\"pcbnew\" /></p>\n<h3 id=\"动态-bom\"><a class=\"anchor\" href=\"#动态-bom\">#</a> 动态 BOM</h3>\n<p>吾称之为最硬合交互式 BOM 操作：</p>\n<p><img data-src=\"capture.gif\" alt=\"Interactive HTML BOM\" /></p>\n<p>地址链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW5zY29wZXByb2plY3QvSW50ZXJhY3RpdmVIdG1sQm9t\">https://github.com/openscopeproject/InteractiveHtmlBom</span></p>\n<h3 id=\"泪滴生成\"><a class=\"anchor\" href=\"#泪滴生成\">#</a> 泪滴生成</h3>\n<p>地址链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL05pbHVqZVBlcmNodXQva2ljYWRfc2NyaXB0cw==\">https://github.com/NilujePerchut/kicad_scripts</span></p>\n<p>泪滴的作用，这里就不说啦，以前有讲过，然后演示：</p>\n<p>焊盘：</p>\n<p><img data-src=\"image-20210814210020179.png\" alt=\"image-20210814210020179\" /></p>\n<p>通孔：</p>\n<p><img data-src=\"image-20210814211109805.png\" alt=\"image-20210814211109805\" /></p>\n<p>&lt;br/&gt;</p>\n<h2 id=\"pcbnew中各层用途说明\"><a class=\"anchor\" href=\"#pcbnew中各层用途说明\">#</a> Pcbnew 中各层用途说明</h2>\n<h3 id=\"所支持的板层\"><a class=\"anchor\" href=\"#所支持的板层\">#</a> 所支持的板层</h3>\n<p>KiCAD 在 Pcbnew 中总计提供了 32 个铜层供导线走线（可覆铜），12 个固定技术层（按照正反面分为 6 对），2 个独立技术层，4 个辅助层。</p>\n<p>在 KiCad 里 Pcbnew 的层描述中：</p>\n<ul>\n<li>\n<p>F. 代表电路板上层（Front），B. 代表电路板的下层（Back）；</p>\n</li>\n<li>\n<p>6 对固定技术层：Adhesive、Solder Paste、Silk Screen、Solder Mask、Courtyard、Fabrication；</p>\n</li>\n<li>\n<p>2 个独立技术层：Edge Cuts、Margin；</p>\n</li>\n<li>\n<p>4 个辅助层：Comments、E.C.O. 1、E.C.O. 2、Drawings；</p>\n</li>\n</ul>\n<p><img data-src=\"image-20210814212055614.png\" alt=\"image-20210814212055614\" /></p>\n<h3 id=\"层的使用说明\"><a class=\"anchor\" href=\"#层的使用说明\">#</a> 层的使用说明</h3>\n<h4 id=\"固定技术层\"><a class=\"anchor\" href=\"#固定技术层\">#</a> 固定技术层</h4>\n<p>KiCad 中 12 个技术层分为 6 对：上层一个，下层一个。可以通过 F. 或者 B. 来区分它们的位置。</p>\n<table>\n<thead>\n<tr>\n<th>技术层名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Adhesive (F.Adhes and B.Adhes) 粘合层</td>\n<td>用于在波峰焊前将 SMD 元件的粘合剂粘贴到电路板上的粘合层。</td>\n</tr>\n<tr>\n<td>Solder Paste (F.Paste and B.Paste) 焊膏层</td>\n<td>用于在回流焊接之前生产掩模以允许焊膏放置在 SMD 元件的焊盘上；通常这些层只有表面安装元件的焊盘。</td>\n</tr>\n<tr>\n<td>Silk Screen (F.SilkS and B.SilkS) 丝印层</td>\n<td>主要用于放置印制信息，如元件的轮廓和标注，各种注释字符等。</td>\n</tr>\n<tr>\n<td>Solder Mask (F.Mask and B.Mask) 阻焊层</td>\n<td>这两个层定义了焊接的掩模，即不过绿油的区域；所有焊盘都要出现在这两个层的其中一个层（SMD 元件）或者所有两个层（通孔元件）以防止焊盘被过油，影响导电。</td>\n</tr>\n<tr>\n<td>Courtyard (F.CrtYd and B.CrtYd) 空间层</td>\n<td>用于显示元件在 PCB 上实际占用的空间大小。</td>\n</tr>\n<tr>\n<td>Fabrication (F.Fab and B.Fab) 制造层</td>\n<td>用于辅助元件贴装；主要用于记录目的，以将信息传达给例如 PCB 制造商或组装厂。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"独立技术层\"><a class=\"anchor\" href=\"#独立技术层\">#</a> 独立技术层</h4>\n<table>\n<thead>\n<tr>\n<th>技术层名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Edge.Cuts 边界层</td>\n<td>用于绘制电路板轮廓。一般用于设置电路板的外形尺寸，数据标记，对齐标记，装配说明以及其它的机械信息。所以请仅使用此图层绘制 PCB 的轮廓。</td>\n</tr>\n<tr>\n<td>Margin 电气边界层</td>\n<td>用于定义在电路板上能够有效放置元件和布线的区域。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"辅助层\"><a class=\"anchor\" href=\"#辅助层\">#</a> 辅助层</h4>\n<table>\n<thead>\n<tr>\n<th>技术层名称</th>\n<th>功能描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>E.C.O. 1/2 用户自定层</td>\n<td>2 层，用于拓展</td>\n</tr>\n<tr>\n<td>Comments 注释层</td>\n<td>描述性注释</td>\n</tr>\n<tr>\n<td>Drawings 图层</td>\n<td>图形说明</td>\n</tr>\n</tbody>\n</table>\n<p>这些层可以任意使用，它们可以是组装或布线等的说明文本，也可以是组装或加工的构造图，嘛，一般没啥用。</p>\n<h4 id=\"铜层\"><a class=\"anchor\" href=\"#铜层\">#</a> 铜层</h4>\n<p>该层在 Kicad 中最多可拓展 32 层。</p>\n<p>在 Pcbnew 中任何铜层的名字都是可以编辑的，我们一般使用默认的名称。当电路板是 2 层板时，只有 F.Cu 层和 B.Cu 层。当增加相应的层级数时，在 F.Cu 层和 B.Cu 层之间，将插入从上层到下层的顺序依次为 <span class=\"exturl\" data-url=\"aHR0cDovL0luMS5DdQ==\">In1.Cu</span>，<span class=\"exturl\" data-url=\"aHR0cDovL0luMi5DdQ==\">In2.Cu</span>，In3.Cu 和 In4.Cu 等的名称板层。</p>\n<ol>\n<li>\n<p>通常，电路板是 2 层时，采用如下结构：</p>\n<table>\n<thead>\n<tr>\n<th>层编号</th>\n<th>层名称</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0YuQ3U=\">F.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>2</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0IuQ3U=\">B.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>通常，电路板是 4 层时，采用如下结构：</p>\n<table>\n<thead>\n<tr>\n<th>层编号</th>\n<th>层名称</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0YuQ3U=\">F.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>2</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMS5DdQ==\">In1.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>3</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMi5DdQ==\">In2.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0IuQ3U=\">B.Cu</span></td>\n<td>Signal</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>通常，电路板是 6 层时，采用如下结构：</p>\n<table>\n<thead>\n<tr>\n<th>层编号</th>\n<th>层名称</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0YuQ3U=\">F.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>2</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMS5DdQ==\">In1.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>3</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMi5DdQ==\">In2.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMy5DdQ==\">In3.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>5</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNC5DdQ==\">In4.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>6</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0IuQ3U=\">B.Cu</span></td>\n<td>Signal</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>通常，电路板是 8 层时，采用如下结构：</p>\n<table>\n<thead>\n<tr>\n<th>层编号</th>\n<th>层名称</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0YuQ3U=\">F.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>2</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMS5DdQ==\">In1.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>3</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMi5DdQ==\">In2.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMy5DdQ==\">In3.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>5</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNC5DdQ==\">In4.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>6</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNS5DdQ==\">In5.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>7</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNi5DdQ==\">In6.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>8</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0IuQ3U=\">B.Cu</span></td>\n<td>Signal</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>通常，电路板是 10 层时，采用如下结构：</p>\n<table>\n<thead>\n<tr>\n<th>层编号</th>\n<th>层名称</th>\n<th>用途描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0YuQ3U=\">F.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>2</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMS5DdQ==\">In1.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>3</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMi5DdQ==\">In2.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>4</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luMy5DdQ==\">In3.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>5</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNC5DdQ==\">In4.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>6</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNS5DdQ==\">In5.Cu</span></td>\n<td>GND Plane</td>\n</tr>\n<tr>\n<td>7</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNi5DdQ==\">In6.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>8</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luNy5DdQ==\">In7.Cu</span></td>\n<td>Signal</td>\n</tr>\n<tr>\n<td>9</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0luOC5DdQ==\">In8.Cu</span></td>\n<td>VCC Plane</td>\n</tr>\n<tr>\n<td>10</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL0IuQ3U=\">B.Cu</span></td>\n<td>Signal</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ol>\n<p>&lt;br/&gt;</p>\n<h2 id=\"生产制造\"><a class=\"anchor\" href=\"#生产制造\">#</a> 生产制造</h2>\n<p>在使用本操作时，假定您已经在 KiCad 中完成了 PCB 的设计。</p>\n<h3 id=\"设置-pcb原点坐标\"><a class=\"anchor\" href=\"#设置-pcb原点坐标\">#</a> 设置 PCB 原点坐标</h3>\n<p>选择 “菜单栏”，放置 -&gt; 钻孔和位置偏移（或者在右边菜单栏直接选择），将原点放置到 PCB 板框左下角位置，再放置【层对齐标记】到刚刚放置的原点位置。</p>\n<p><img data-src=\"image-20210814222049491.png\" alt=\"image-20210814222049491\" /></p>\n<h3 id=\"gerber导出\"><a class=\"anchor\" href=\"#gerber导出\">#</a> Gerber 导出</h3>\n<p>从菜单栏中点击绘制按键：</p>\n<p><img data-src=\"image-20210814220901206.png\" alt=\"image-20210814220901206\" /></p>\n<p>绘制 Gerber，并输出到相应文件夹：</p>\n<p><img data-src=\"image-20210814221059310.png\" alt=\"image-20210814221059310\" /></p>\n<p>绘制完后，点击旁边的 “生成钻孔文件” 进入设置生成：</p>\n<p><img data-src=\"image-20210814222350241.png\" alt=\"image-20210814222350241\" /></p>\n<p>生成文件放置到同样的文件夹，同时需要注意一下钻孔单位一般要对应 Pcbnew 中所使用的单位。</p>\n<h3 id=\"bom输出\"><a class=\"anchor\" href=\"#bom输出\">#</a> BOM 输出</h3>\n<ol>\n<li>\n<p>从原理图输出</p>\n<p>点击生成 BOM：</p>\n<p><img data-src=\"image-20210814230416366.png\" alt=\"image-20210814230416366\" /></p>\n<p>选择生成插件：</p>\n<p><img data-src=\"image-20210814230521885.png\" alt=\"image-20210814230521885\" /></p>\n<p>值得注意的是，在箭头处需要添加后缀 “<strong>.csv</strong>&quot;</p>\n</li>\n<li>\n<p>从 PCB 中输出</p>\n<p><img data-src=\"image-20210814231010230.png\" alt=\"image-20210814231010230\" /></p>\n</li>\n</ol>\n",
            "tags": [
                "EDA",
                "history"
            ]
        },
        {
            "id": "https://arachnid.cc/Cortex-M-abnormal/",
            "url": "https://arachnid.cc/Cortex-M-abnormal/",
            "title": "Cortex-M3/M4/M7 故障异常分析",
            "date_published": "2021-07-17T04:58:01.000Z",
            "content_html": "<blockquote>\n<p>在程序开发阶段，少不了 Debug 调试，除去编程架构搭建不稳定所造成的错误外，大部分会出现或多或少的故障异常，而这些异常有可能是粗心或者对编程了解不到位所导致的 ‘ 堆栈溢出 ’ 、‘ 数组下标越界 ’ 、‘ 数学运算异常 ’ 等等；而本篇则主要以常见的进入 Hardfault 中断来进行分析错误来源。</p>\n</blockquote>\n<h1 id=\"arm-cortex-m核心\"><a class=\"anchor\" href=\"#arm-cortex-m核心\">#</a> ARM Cortex-M 核心</h1>\n<p><strong>ARM</strong> 架构，过去称作<strong>高级精简指令集机器</strong>（英语：Advanced RISC Machine，更早称作艾康精简指令集机器，Acorn RISC Machine），是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。</p>\n<p>而对于 <strong>ARM Cortex-M</strong> 是 ARM 架构处理器核心中，低阶系列的统称，由安谋控股所授权。这组核心的特点为低成本以及高能源效率的微处理器而优化设计，已有上千万个消费性设备中有此系列的微处理器。此系列核心包括 Cortex-M0、Cortex-M0+、Cortex-M1、Cortex-M3、Cortex-M4、Cortex-M7、Cortex-M23、Cortex-M33、Cortex-M35P 和 Cortex-M55。其中 Cortex-M4 / M7 / M33 / M35P / M55 核心有浮点运算器的选项，若有浮点运算器的选项，会在型号后面说明，例如 Cortex-Mx with FPU 或 Cortex-MxF，其中 x 是核心编号。</p>\n<p>如标题所述，其中 Cortex-M3/M4/M7 同属 <strong>ARMv7-M</strong> 架构，再细分一点，Cortex-M3 实现的是 <strong>ARMv7-M</strong> 架构，Cortex-M4 /Cortex-M7 实现的是 <strong>ARMv7E-M</strong> 架构。</p>\n<h1 id=\"armv7-m和-armv7e-m架构区别\"><a class=\"anchor\" href=\"#armv7-m和-armv7e-m架构区别\">#</a> ARMv7-M 和 ARMv7E-M 架构区别</h1>\n<p>如果有玩过过 Cortex-M3 系列的芯片跟 Cortex-M4/M7 的芯片，或多或少都知道 Cortex-M4/M7 比 Cortex-M3 多了 <strong>DSP</strong> 跟<strong>硬件浮点运算</strong>，以下是 ARMv7E-M 架构的拓展功能介绍：</p>\n<p><img data-src=\"image-20210717125804779.png\" alt=\"image-20210717125804779\" /></p>\n<p>由于 ARMv7E-M 是 ARMv7-M 的一个拓展子集，所以以下统称 <strong>ARMv7-M</strong> 为 “ARMv7-M” 和 “ ARMv7E-M ” 的集合。</p>\n<h1 id=\"arm-寄存器\"><a class=\"anchor\" href=\"#arm-寄存器\">#</a> ARM 寄存器</h1>\n<p><img data-src=\"image-20210717153032356.png\" alt=\"image-20210717153032356\" /></p>\n<h2 id=\"通用寄存器r0-r12\"><a class=\"anchor\" href=\"#通用寄存器r0-r12\">#</a> 通用寄存器（R0 - R12）</h2>\n<p>R0-R7 被称为低组寄存器。所有指令都能访问它们。它们的字长全是 32 位，复位后的初始值是不可预料的。</p>\n<p>R8-R12 被称为高组寄存器。这是因为只有很少的 16 位 Thumb 指令能访问它们，32 位的 thumb-2 指令则不受限制。它们也是 32 位字长，且复位后的初始值是不可预料的。</p>\n<h2 id=\"堆栈指针寄存器sp\"><a class=\"anchor\" href=\"#堆栈指针寄存器sp\">#</a> 堆栈指针寄存器（SP）</h2>\n<p>在 ARMv7-M 架构中，共有两个堆栈指针  <code>SP_main</code>  和  <code>SP_process</code> ，有时候也会把这个堆栈指针寄存器称为 <strong>R13</strong>。</p>\n<ul>\n<li>主堆栈指针（MSP），或写作  <code>SP_main</code> 。这是缺省的堆栈指针，它由 OS 内核、异常服务例程以及所有需要特权访问的应用程序代码来使用。</li>\n<li>进程堆栈指针（PSP），或写作  <code>SP_process</code> 。用于常规的应用程序代码（不处于异常服用例程中时）。</li>\n</ul>\n<h2 id=\"链接寄存器lr\"><a class=\"anchor\" href=\"#链接寄存器lr\">#</a> 链接寄存器（LR）</h2>\n<p>链接寄存器（LR） 主要用于在调用子程序时存储返回地址；有时候也会把这个链接寄存器称为 <strong>R14</strong>。</p>\n<h2 id=\"程序计数器pc\"><a class=\"anchor\" href=\"#程序计数器pc\">#</a> 程序计数器（PC）</h2>\n<p>程序计数器作为 PC（或称为 R15）访问，它根据所执行指令的大小（在 ARM 状态下始终为 4 个字节）递增；并通过分支指令将目标地址加载到 PC 中。 您还可以使用数据处理指令直接加载 PC。</p>\n<p><strong>Note：</strong> 寄存器 R0-R12、SP、LR 和 PC 被称为 Arm 核心寄存器。这些寄存器可以描述为 R0-R15。更详细的说明可以看《ARMv7-M Architecture Reference Manual》B1.4 章 Registers 部分</p>\n<h1 id=\"异常定义\"><a class=\"anchor\" href=\"#异常定义\">#</a> 异常定义</h1>\n<h2 id=\"异常类型\"><a class=\"anchor\" href=\"#异常类型\">#</a> 异常类型</h2>\n<p><img data-src=\"image-20210717132436090.png\" alt=\"image-20210717132436090\" /></p>\n<h2 id=\"异常更新\"><a class=\"anchor\" href=\"#异常更新\">#</a> 异常更新</h2>\n<p>在入栈和取向量操作完成之后，执行服务例程之前，需要更新一系列的寄存器：</p>\n<ul>\n<li>SP：在入栈后会把堆栈指针（PSP 或 MSP）更新到新的位置。在执行服务例程时，将由 MSP 负责对堆栈的访问。</li>\n<li>PSR：更新 IPSR 位段（地处 PSR 的最低部分）的值为新响应的异常编号。</li>\n<li>PC：在取向量完成后，PC 将指向服务例程的入口地址，</li>\n<li>LR：在出入 ISR 的时候，LR 的值将得到重新的诠释，这种特殊的值称为 “EXC_RETURN”，在异常进入时由系统计算并赋给 LR，并在异常返回时使用它。EXC_RETURN 的二进制值除了最低 4 位外全为 1，而其最低 4 位则有另外的含义。</li>\n</ul>\n<p>以上是在响应异常时核心寄存器的变化。另一方面，在 NVIC 中，也会更新若干个相关有寄存器。例如，新响应异常的悬起位将被清除，同时其活动位将被置位。</p>\n<h2 id=\"异常返回值\"><a class=\"anchor\" href=\"#异常返回值\">#</a> 异常返回值</h2>\n<p>在进入异常服务程序后，将自动更新 LR 的值为特殊的 EXC_RETURN。这是一个高 28 位全为 1 的值，只有 [3:0] 的值有特殊含义，如下图所示。当异常服务例程把这个值送往 PC 时，就会启动处理器的中断返回序列。因为 LR 的值是由内核自动设置的，所以只要没有特殊需求，就不要改动它。</p>\n<p><img data-src=\"image-20210717203515783.png\" alt=\"image-20210717203515783\" /></p>\n<p><img data-src=\"image-20210717203628501.png\" alt=\"image-20210717203628501\" /></p>\n<h1 id=\"异常入口的堆栈对齐\"><a class=\"anchor\" href=\"#异常入口的堆栈对齐\">#</a> 异常入口的堆栈对齐</h1>\n<p>Armv7-M 架构保证堆栈指针值至少是 4 字节对齐的。 但是，某些软件标准要求堆栈指针按 8 字节对齐，并且体系结构可以强制执行这种对齐。 在配置和控制寄存器的 CCR. STKALIGN 位指示中作为异常入口的一部分，决定着处理器是将 SP 对齐到 4 个字节还是 8 个字节。 该位是由编译器决定是否为：<br />\n・RW，在这种情况下，它的复位值是由编译器决定的。<br />\n・RO，在这种情况下它是 RAO，表示 8 字节 SP 对齐。<br />\n<strong>Arm 不赞成实现或使用 4 字节 SP 对齐。</strong></p>\n<p>Register --- CCR. STKALIGN bit：</p>\n<p><img data-src=\"image-20210717172228588.png\" alt=\"image-20210717172228588\" /></p>\n<p>下图显示了在异常发生时进入堆栈的信息框架，以及处理器如何在堆栈上保留一个额外的字（如果需要的话），以获得 8 字节堆栈对齐。（这里就是我们要分析地方）</p>\n<p><img data-src=\"image-20210717172649123.png\" alt=\"image-20210717172649123\" /></p>\n<h1 id=\"hardfault异常分析处理\"><a class=\"anchor\" href=\"#hardfault异常分析处理\">#</a> HardFault 异常分析处理</h1>\n<p>HardFault 是一种通用故障，它适用于所有不能被任何其他异常机制处理的故障类。通常，HardFault 用于不可恢复的系统故障，尽管这不是必需的，而且 HardFault 的某些用途可能是可恢复的。HardFault 永久启用，优先级固定为 -1。</p>\n<h2 id=\"方法一先来个简单的使用第三方组件-cm_backtrace\"><a class=\"anchor\" href=\"#方法一先来个简单的使用第三方组件-cm_backtrace\">#</a> 方法一：先来个简单的，使用第三方组件 “cm_backtrace”</h2>\n<p>项目地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FybWluay9DbUJhY2t0cmFjZQ==\">https://github.com/armink/CmBacktrace</span></p>\n<p>怎么用这里就不说了，毕竟官方已经写得很清楚了，而且还有相应的 Demo 例程。</p>\n<p>使用该方法的特点是不需要过多的关注更底层的东西，只需移植好后配置相应的功能就好了，而且它可以离线（脱离仿真器）来寻找错误点；但是前提是你的串口正常，而且还需要预留部分内存供其执行。</p>\n<h2 id=\"方法二仿真情况下的-bug寻找\"><a class=\"anchor\" href=\"#方法二仿真情况下的-bug寻找\">#</a> 方法二：仿真情况下的 bug 寻找</h2>\n<p>如果是平常的 while 循环执行，导致挂掉了无法切换任务，那么我们可以轻松通过上下文切换寻找问题；但是在 HardFault 异常中它并不给你显示执行错误的所在地方，而是直接跳到 HardFault 中断中，这往往让我们头大。</p>\n<p>Keil 平台的可以看：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vYXBwbm90ZXMvZmlsZXMvYXBudDIwOS5wZGY=\">https://www.keil.com/appnotes/files/apnt209.pdf</span></p>\n<p>IAR 平台的可以看：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuaWFyLmNvbS9rbm93bGVkZ2Uvc3VwcG9ydC90ZWNobmljYWwtbm90ZXMvZGVidWdnZXIvZGVidWdnaW5nLWEtaGFyZGZhdWx0LW9uLWNvcnRleC1tLw==\">https://www.iar.com/knowledge/support/technical-notes/debugger/debugging-a-hardfault-on-cortex-m/</span></p>\n<p>GCC 平台的可以看：</p>\n<p>方法三。。。</p>\n<h2 id=\"方法三通过-arm-寄存器逆向推导\"><a class=\"anchor\" href=\"#方法三通过-arm-寄存器逆向推导\">#</a> 方法三：通过 ARM 寄存器逆向推导</h2>\n<p>使用该方法的前提是获取到第五个大点最后一张图展示的核心寄存器（R0-R3、R12、LR、PC、xPSR 以及原 SP）的数值。</p>\n<p><strong>1、常见的核心寄存器数据获取</strong></p>\n<p>一般地，我们会使用以下代码嵌入到 HardFault 中断中，使其在入口处打印服务异常时各核心寄存器的值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Exception frame without floating-point storage</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* hard fault handler in C,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* with stack frame location as input parameter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">hard_fault_handler_c</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> hardfault_args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_lr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_pc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_psr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//Exception stack frame</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    stacked_r0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    stacked_r1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    stacked_r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    stacked_r3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    stacked_r12 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    stacked_lr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stacked_pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    stacked_psr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"[Hard fault handler]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R0 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R1 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R2 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R3 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R12 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"LR = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_lr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"PC = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"PSR = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_psr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CW</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"BFAR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"CFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED2C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"DFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED3C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"BFAR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"CFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED2C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"DFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED3C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">/* The prototype shows it is a naked function - in effect this is just an</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>assembly function. */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HardFault_Handler</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> naked <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/* The fault handler implementation calls a function called</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>prvGetRegistersFromStack(). */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HardFault_Handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CORTEX_M3_M4_M7</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">\" tst lr, #4                        \\n\"</span> <span class=\"token comment\">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token string\">\" ite eq                            \\n\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token string\">\" mrseq r0, msp                     \\n\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token string\">\" mrsne r0, psp                     \\n\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token string\">\"b hard_fault_handler_c             \\n\"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no output */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no input */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">\"r0\"</span> <span class=\"token comment\">/* clobber */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token string\">\"movs r0, #4                        \\n\"</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token string\">\"mov  r1, lr                        \\n\"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token string\">\"tst  r0, r1                        \\n\"</span> <span class=\"token comment\">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token string\">\"beq 1f                             \\n\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token string\">\"mrs r0, psp                        \\n\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token string\">\"ldr r1,=hard_fault_handler_c       \\n\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token string\">\"bx r1                              \\n\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token string\">\"1:mrs r0,msp                       \\n\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token string\">\"ldr r1,=hard_fault_handler_c       \\n\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no output */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no input */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">\"r0\"</span> <span class=\"token comment\">/* clobber */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Note：</p>\n<ol>\n<li>\n<p>值得注意的是 void HardFault_Handler (void); 函数是相应的 HardFault 中断函数，不同的厂家会定义不同的名称。</p>\n</li>\n<li>\n<p>对于不同的编译器，如：armcc、iar、gcc for arm 等，需要把相应的关键字替换掉（eg： <code>asm</code> 、 <code>naked</code> ）。</p>\n<p><code>naked</code>  拓展：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1jbGFuZ19yZWYvYXJtY2xhbmdfcmVmX2poZzE0NzY4OTM1NjQyOTguaHRt\">https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_jhg1476893564298.htm</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzkzMzg5MQ==\">https://zhuanlan.zhihu.com/p/33933891</span></p>\n</li>\n</ol>\n<p><strong>2、逆向定位入口</strong></p>\n<p>如果有看过方法二的两个链接，那么就很容易理解以下的分析了：</p>\n<ol>\n<li>确保你能正常获取输出数据（包括但不限于仿真查看、串口打印、SWO 输出、SEGGER_RTT 输出等等）。</li>\n<li>由于我们在第一点修改过代码，所以可以直接查看 LR 和 PC 两个的值；因为这两个的值是关键。</li>\n<li>使用 addr2line 软件定位故障代码位置（使用方法：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9iaW51dGlscy9kb2NzLTIuMjcvYmludXRpbHMvYWRkcjJsaW5lLmh0bWwjYWRkcjJsaW5lJUVGJUJDJTg5\">https://sourceware.org/binutils/docs-2.27/binutils/addr2line.html#addr2line）</span>\taddr2line 属于 GNU Binutils 组件之一，获取可以从方法一里面的 tools 文件夹里获取，也可以从  <code>安装路径\\GNU Tools ARM Embedded\\5.4 2016q3\\bin\\arm-none-eabi-addr2line.exe</code>  提取出来。</li>\n</ol>\n<p><strong>3、使用演示</strong></p>\n<p>先制造一个 HardFault：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fault_test_by_div0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> SCB_CCR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0xE000ED14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SCB->CCR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>SCB_CCR <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* bit4: DIV_0_TRP. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    z <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z:%d\\n\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/************************************************</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>函数名称 ： main</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>功    能 ： 主函数入口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>参    数 ： 无</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>返 回 值 ： 无</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*************************************************/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    BaseType_t xReturn <span class=\"token operator\">=</span> pdPASS<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 定义一个创建信息返回值，默认为 pdPASS */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">prvSetupHardware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">fault_test_by_div0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* Start the tasks defined within this file/specific to this demo. */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    xReturn <span class=\"token operator\">=</span> <span class=\"token function\">xTaskCreate</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>TaskFunction_t<span class=\"token punctuation\">)</span>prvUser_Task<span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">/* 任务入口函数 */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"prvUser_Task\"</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">/* 任务名字 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>configMINIMAL_STACK_SIZE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">/* 任务栈大小 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t<span class=\"token comment\">/* 任务入口函数参数 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                           <span class=\"token punctuation\">(</span>UBaseType_t<span class=\"token punctuation\">)</span>mainCREATOR_TASK_PRIORITY<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">/* 任务的优先级 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                           <span class=\"token punctuation\">(</span>TaskHandle_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UserTaskCreate_Handle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 任务控制块指针 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pdPASS <span class=\"token operator\">==</span> xReturn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/* Start the scheduler. */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">vTaskStartScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">/* Will only get here if there was not enough heap space to create the</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    idle task. */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*----------------------------- End -----------------------------*/</span></pre></td></tr></table></figure><p>接着可以观察到程序已经跑到 HardFault_Handler 里并输出相应信息了：</p>\n<p><img data-src=\"image-20210718160907873.png\" alt=\"image-20210718160907873\" /></p>\n<p>然后利用 addr2line，执行命令  <code>arm-none-eabi-addr2line.exe -e &quot;可执行映像&quot; -a -f &quot;相应的值&quot;</code>  （注：实际命令并不需要双引号  <code>“ ”</code> ，应用可看下图）：</p>\n<ul>\n<li><code>-e</code>  ：指定可执行映像名称</li>\n<li><code>-a</code>  ：显示函数地址</li>\n<li><code>-f</code>  ：显示函数名称</li>\n</ul>\n<p><img data-src=\"image-20210718160622030.png\" alt=\"image-20210718160622030\" /></p>\n<p>然后，对于不同的编译器，可执行映像并不一样（像 Keil 是  <code>.axf</code> 、IAR 是  <code>.out</code> ）；最后，如果细心的可以看到命令后面的两个值只有 PC 的值是对应上，第二个值并不是 LR 的值，而是其减去 4 的结果；若果你直接使用 LR 值，你会发现定位出来的下一条指令要执行的地方，至于为什么要减掉 4，是因为在 ARM 下执行指令的大小始终为 4 个字节递增，所以可以通过减掉 4，使其指向上一条内容。</p>\n<p><img data-src=\"image-20210718163058462.png\" alt=\"image-20210718163058462\" /></p>\n<p><img data-src=\"image-20210718163412930.png\" alt=\"image-20210718163412930\" /></p>\n<h2 id=\"方法四透过最底层进行分析\"><a class=\"anchor\" href=\"#方法四透过最底层进行分析\">#</a> 方法四：透过最底层进行分析</h2>\n<p>这种方法不需要修改什么，在进入 HardFault_Handler 后直接分析核心寄存器。</p>\n<p>同样的，还是先制造一个 HardFault，沿用方法三的 fault_test_by_div0 (); 函数代码，然后直到进入 HardFault_Handler 后，（注意，这里的 HardFault_Handler 中断函数并没有像方法三那样区嵌入代码，而是保持其原始的样子）：</p>\n<p><img data-src=\"image-20210718204135298.png\" alt=\"image-20210718204135298\" /></p>\n<p>接着跟上面的一样，获取各核心寄存器的值（ps：这里用的仿真查看）：</p>\n<p><img data-src=\"image-20210718204626787.png\" alt=\"image-20210718204626787\" /></p>\n<p>在这里就不是像方法三那样直接拿 LR 和 PC 这两个值来用了，必须进行层层分析：</p>\n<ol>\n<li>\n<p>查看 LR 值是对应下图的哪个：</p>\n<p><img data-src=\"image-20210718205017651.png\" alt=\"image-20210718205017651\" /></p>\n<p>通过转换，-7 为 0xFFFFFFF9，然后在第四大点的第三小点有讲过 LR=0xFFFF_FFF9 时是使用 MSP，而 LR=0xFFFF_FFFD 时则使用 PSP；所以我们可以确定该返回值是被压入到主堆栈指针（MSP）中。</p>\n</li>\n<li>\n<p>找到 MSP 指示的值：</p>\n<p><img data-src=\"image-20210718205953987.png\" alt=\"image-20210718205953987\" /></p>\n<p>得到该值为 0x2002ffc8。</p>\n</li>\n<li>\n<p>查看该值所对应的内存块：</p>\n<p><img data-src=\"image-20210718210515637.png\" alt=\"image-20210718210515637\" /></p>\n<p>得到紫色框里的两个数据（嘿嘿，是不是很神奇，居然跟方法三的 LR、PC 值一样），可能你会疑惑，为什么是提取该地址往后第六、七个数（4 字节递增），而不是其他呢？这就看第五个大点了，它的入栈顺序以及地址位置都是有规律的，可以归纳为下图：</p>\n<p><img data-src=\"image-20210718211434499.png\" alt=\"image-20210718211434499\" /></p>\n<p>按箭头方向，顺数第六、七是不是就是 LR、PC 值啊，而这里就是旧的内容信息；所以跟方法三比较一下，其实方法三的那段嵌入代码，就是让其改变各个核心寄存器的信息内容，使其不要存储跳转到 HardFault_Handler，而是存储跳转前的数据信息。</p>\n</li>\n<li>\n<p>到了这步，就是使用 addr2line 来定位，这里就不说了，方法三里面有写。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考：</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQVJNJUU2JTlFJUI2JUU2JUE3JThC\">ARM 架构</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQVJNX0NvcnRleC1N\">ARM Cortex-M</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3QuY29tL2NvbnRlbnQvc3RfY29tL3poL2FybS0zMi1iaXQtbWljcm9jb250cm9sbGVycy9hcm0tY29ydGV4LW00Lmh0bWw=\">Arm® Cortex®-M4 in a nutshell</span></p>\n<p>&lt;&lt;ARM Cortex-M3 权威指南&gt;&gt;</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uL2RkaTA0MDMvZWUvP2xhbmc9ZW4=\">ARMv7-M Architecture Reference Manual</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1hc20vYXJtYXNtX2RvbTEzNTk3MzExMjQ4NDAuaHRt\">Overview of the ARM Architecture</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb21tdW5pdHkuYXJtLmNvbS9kZXZlbG9wZXIvaXAtcHJvZHVjdHMvc3lzdGVtL2YvZW1iZWRkZWQtZm9ydW0vNDc0OS9lcnJvci1oYXJkLWZhdWx0LWhhbmRsZXI=\">error: Hard Fault Handler</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9pbnRlcnJ1cHQubWVtZmF1bHQuY29tL2Jsb2cvY29ydGV4LW0tZmF1bHQtZGVidWc=\">How to debug a HardFault on an ARM Cortex-M MCU</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvZGVidWdnaW5nLWEtYXJtLWNvcnRleC1tLWhhcmQtZmF1bHQvOTg3Mw==\">Debugging a ARM Cortex-M Hard Fault</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2VnZ2VyLmNvbS9kb3dubG9hZHMvYXBwbGljYXRpb24tbm90ZXMvQU4wMDAxNg==\">Analyzing HardFaults on Cortex-M CPU</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaG9zc2Jvc3MvZTFkMGU1MWZkYjk5YmMxMjVhYWRhYzY0ZjVkNjdmMDQ=\">ARM Cortex M3: Recovering from a Hard Fault</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2lsYWJzLmNvbS9jb21tdW5pdHkvbWN1LzMyLWJpdC9rbm93bGVkZ2UtYmFzZS5lbnRyeS5odG1sLzIwMTQvMDUvMjYvZGVidWdfYV9oYXJkZmF1bHQtNzhnYw==\">Debug a HardFault</span></p>\n",
            "tags": [
                "history",
                "MCU"
            ]
        }
    ]
}