<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wireshark使用</title>
      <link href="//docs/wireshark%E4%BD%BF%E7%94%A8/"/>
      <url>//docs/wireshark%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>官方说明：</p><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvSG9tZQ==">https://wiki.wireshark.org/Home</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkLw==">https://www.wireshark.org/docs/wsug_html_chunked/</span></p><h1 id="着色规则"><a class="anchor" href="#着色规则">#</a> 着色规则</h1><p>在 wireshark 监控界面上，不同的报文会显示不一样样的颜色，它们分别表示不同的含义；而这些颜色，都是是由着色规则设置的：</p><p><img data-src="image-20221006162351042.png" alt="image-20221006162351042" /></p><p>在默认的着色规则中，一般黑色背景代表报文的各类错误，红色背景代表各类异常情景，其它颜色代表正常。</p><p>官方的说明可以看：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQ3VzdENvbG9yaXphdGlvblNlY3Rpb24uaHRtbA==">https://www.wireshark.org/docs/wsug_html_chunked/ChCustColorizationSection.html</span></p><p>着色规则分析：</p><p><strong>1、Bad TCP：</strong> tcp.analysis.flags &amp;&amp; !tcp.analysis.window_update &amp;&amp; !tcp.analysis.keep_alive &amp;&amp; !tcp.analysis.keep_alive_ack</p><p>即 TCP 包损坏，通常表示为重传，乱序，丢包，重复响应等都在此条规则的范围内。具体看第三大点。</p><p>参看：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2VENQQW5hbHlzaXMuaHRtbA==">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html</span></p><p><strong>2、HSRP State Change：</strong> hsrp.state != 8 &amp;&amp; hsrp.state != 16</p><p>HSRP 即热备份路由协议（Hot Standby Router Protocol），这条规则表明当前报文状态非 Standby 和 Active。</p><p>HSRP 的状态值可以是以下几种：</p><ul><li>0 - Initial</li><li>1 - Learn</li><li>2 - Listen</li><li>4 - Speak</li><li>8 - Standby</li><li>16 - Active</li></ul><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzIyODE=">https://www.rfc-editor.org/rfc/rfc2281</span></p><p><strong>3、Spanning Tree Topology  Change：</strong> stp.type == 0x80</p><p>当生成树协议的状态标记为  <code>0x80</code> ，表示着生成树拓扑发生变化。即 STP 协议数据单元 (BPDU) 的  <code>flag</code>  字段发生变化（使用 IEEE-802.1d）：</p><p><img data-src="bpdu.png" alt="img" /></p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly90ZWNoaHViLmhwZS5jb20vZWdpbmZvbGliL25ldHdvcmtpbmcvZG9jcy9zd2l0Y2hlcy81OTgwLzUyMDAtMzkyMV9sMi1sYW5fY2cvY29udGVudC80OTkwMzY2NzIuaHRt">https://techhub.hpe.com/eginfolib/networking/docs/switches/5980/5200-3921_l2-lan_cg/content/499036672.htm</span></p><p><strong>4、OSPF State Change：</strong> ospf.msg != 1</p><p>OSPF（Open Shortest Path First，开放式最短路径优先协议）的 msg 类型不是 Hello 报文。</p><p>OSPF 报文的类型，有下面几种类型：</p><ul><li>1：Hello 报文；</li><li>2：DD 报文；</li><li>3：LSR 报文；</li><li>4：LSU 报文；</li><li>5：LSAck 报文。</li></ul><p>参考：<span class="exturl" data-url="aHR0cDovL3d3dy4wMjN3Zy5jb20vbWVzc2FnZS9tZXNzYWdlL2NkX2ZlYXR1cmVfb3NwZl9tZXNzYWdlLmh0bWw=">http://www.023wg.com/message/message/cd_feature_ospf_message.html</span></p><p><strong>5、ICMP errors：</strong> icmp.type eq 3 || icmp.type eq 4 || icmp.type eq 5 || icmp.type eq 11 || icmpv6.type eq 1 || icmpv6.type eq 2 || icmpv6.type eq 3 || icmpv6.type eq 4</p><p>ICMP 协议错误，协议的 type 字段值错误。</p><p><strong>6、ARP：</strong> arp</p><p>即 ARP 协议。</p><p><strong>7、ICMP：</strong> icmp || icmpv6</p><p>即 ICMP 协议。</p><p><strong>8、TCP RST：</strong> tcp.flags.reset eq 1</p><p>TCP 流产生 reset。</p><p><strong>9、SCTP ABORT：</strong> sctp.chunk_type eq ABORT</p><p>SCTP（即流控制传输协议）发生中止。</p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzQ5NjAjc2VjdGlvbi0zLjMuNw==">https://www.rfc-editor.org/rfc/rfc4960#section-3.3.7</span></p><p><strong>10、TTL low or unexpected：</strong> ( ! ip.dst == 224.0.0.0/4 &amp;&amp; ip.ttl &lt; 5 &amp;&amp; !pim &amp;&amp; !ospf) || (ip.dst == 224.0.0.0/24 &amp;&amp; ip.dst != 224.0.0.251 &amp;&amp; ip.ttl != 1 &amp;&amp; !(vrrp || carp))</p><p>TTL (Time-To-Live) 指解析记录在本地 DNS 服务器中的缓存时间。该规则表示 TTL 产生异常。</p><p>在 IP 组播中，通过 TTL 控件来管理转发数据包的范围，按照惯例：</p><ul><li>0 - 仅限于同一主机上</li><li>1 - 被限制在同一个子网内</li><li>32 仅限于同一站点</li><li>64 - 仅限于同一区域</li><li>128 - 仅限于同一大陆</li><li>255 - 不受限制</li></ul><p>参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3RpbWUtdG8tbGl2ZQ==">https://www.techtarget.com/searchnetworking/definition/time-to-live</span></p><p><strong>11、Checksum Errors：</strong> eth.fcs.status == &quot;Bad&quot; || ip.checksum.status == &quot;Bad&quot; || tcp.checksum.status == &quot;Bad&quot; || udp.checksum.status == &quot;Bad&quot; || sctp.checksum.status == &quot;Bad&quot; || mstp.checksum.status == &quot;Bad&quot; || cdp.checksum.status == &quot;Bad&quot; || edp.checksum.status == &quot;Bad&quot; || wlan.fcs.status == &quot;Bad&quot; || stt.checksum.status == &quot;Bad&quot;</p><p>条件中的各类协议的 checksum 出现异常。</p><p><strong>12、SMB：</strong> smb || nbss || nbns || netbios</p><p>Server Message Block 类协议。</p><p><strong>13、HTTP：</strong> http || tcp.port == 80 || http2</p><p>Hyper Text Transfer Protocol（超文本传输协议），这是很简陋的识别方法。</p><p><strong>14、DCERPC：</strong> dcerpc</p><p>即 DCE/RPC，分散式运算环境 / 远端过程调用（Distributed Computing Environment / Remote Procedure Calls）协议。</p><p><strong>15、Routing：</strong> hsrp || eigrp || ospf || bgp || cdp || vrrp || carp || gvrp || igmp || ismp</p><p>路由类协议。</p><p>**16、TCP SYN/FIN： ** tcp.flags &amp; 0x02 || tcp.flags.fin == 1</p><p>TCP 连接的起始和关闭。</p><p><strong>17、TCP：</strong> tcp</p><p>TCP 协议。</p><p><strong>18、UDP：</strong> udp</p><p>UDP 协议。</p><p><strong>19、Broadcast：</strong> eth[0] &amp; 1</p><p>广播数据。</p><p><strong>20、System Event：</strong> systemd_journal || sysdig</p><p>系统调用及系统事件等系统活动。</p><h1 id="专家信息"><a class="anchor" href="#专家信息">#</a> 专家信息</h1><p>在报文的信息栏中，通常也有颜色限定，如下图：</p><p><img data-src="image-20221006185352059.png" alt="image-20221006185352059" /></p><p>而这次的颜色区别是属于对应的信息条目的：</p><p><img data-src="image-20221006185105048.png" alt="image-20221006185105048" /></p><p>每个专家信息项都有一个严重性级别。使用以下级别，从最低到最高。Wireshark 使用不同的颜色标记它们：</p><ul><li><p>聊天（蓝色）</p><p>有关常用的工作流程信息，例如设置了 SYN 标志的 TCP 数据包；数据包都符合常规流量的特征，包括 SYN、FIN、RST 以及各种状态码的 HTTP 事件。</p></li><li><p>注意（青色）</p><p>值得注意的事件，例如应用程序返回了一个常见的错误代码，例如 HTTP 404；数据包中有可能会引发故障的异常现象，例如 TCP 重传、重复确认、快速重传等现象。</p></li><li><p>警告（黄色）</p><p>警告，例如应用程序返回异常错误代码，如连接问题。</p><p>与 TCP 窗口有关的事件 TCP window full 或 TCP zero window，一般是连接设备忙不过来所致。</p><p>与 TCP 报文段丢失或失序有关的事件，丢失是因为未抓全某个 TCP 数据流的所有 TCP 报文段；失序是因其感知到了 TCP 报文段未按发出的顺序到达接收主机。</p></li><li><p>错误（红色）</p><p>严重的问题。</p><p>校验和错误：Ethernet 及 IP 校验和错误。</p><p>伪造的数据包：一般涉及具体的应用层协议。</p></li></ul><p>参看：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2RXhwZXJ0Lmh0bWw=">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvExpert.html</span></p><h1 id="tcp-info"><a class="anchor" href="#tcp-info">#</a> TCP Info</h1><p>参看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvVENQX0FuYWx5emVfU2VxdWVuY2VfTnVtYmVycw==">https://wiki.wireshark.org/TCP_Analyze_Sequence_Numbers</span></p><h2 id="a-ack信息"><a class="anchor" href="#a-ack信息">#</a> A、ACK 信息</h2><p><strong>1、TCP ACKed unseen segment</strong></p><p>表示 Wireshark 发现该条 ACK 在整个网络包中找不到所对应的 Seq（排除了乱序），就会提示。</p><p><img data-src="image-20221012210009741.png" alt="image-20221012210009741" /></p><p>如图，在这组网络中，第 296 号包出现这种情况，然后在上面的包中是找不到它所对应的 Seq 的。</p><p><strong>2、TCP Dup ACK <em>&lt;frame&gt;</em> #<em>&lt;acknowledgement number&gt;</em></strong></p><p>重复 ACK 包，当收发不稳定时，会出现重复响应的情况；而这种情况就是响应端会向请求端回复重复 ACK。 <code>#</code>  符号前面的数字表示对应的重复包号，后面的数字表示确认次数，也可以说是出现的次数。</p><p><img data-src="image-20221012221850769.png" alt="image-20221012221850769" /></p><p>如图，在第 31191 号包的信息中可以看到提示是说跟第 31188 号包出现重复，通过查看第 31188 号包，而这一包其实是为了响应第 31187 号的。</p><p><strong>3、TCP Fast Retransmission</strong></p><p>标志着前面接收到重复的 ACK 包（即出现了 [TCP Dup ACK] ）达 3 个或 3 个以上，进而触发了 TCP 的快速重传（这是 RFC 的规定）。</p><p><img data-src="image-20221012224854822.png" alt="image-20221012224854822" /></p><p>如图， [TCP Dup ACK] 出现了 3 次，而且都是对应第 1309 号包，因此触发快速重传包第 1330 号包，重传了第 1309 号包所响应的请求包第 1245 号包，如下图：</p><p><img data-src="image-20221012230828693.png" alt="image-20221012230828693" /></p><p>然后通过对比原包第 1245 号包和快速重传包第 1330 号包，你会发现并不相同，实际上原始数据应该是相同的，只不过数据加密了，才出现不同的现象。</p><h2 id="b-保活探测"><a class="anchor" href="#b-保活探测">#</a> B、保活探测</h2><p><strong>4、TCP Keep-Alive</strong></p><p>这个应该不陌生，一般 TCP 长链接时，如果启用保活功能，则在特定时间段没有数据交互，那么将会传输一条保活字段，如下图：</p><p><img data-src="image-20221012233735152.png" alt="image-20221012233735152" /></p><p><strong>5、TCP Keep-Alive ACK</strong></p><p>作为上一点 [TCP Keep-Alive] 的响应包，例图看上一张。</p><h2 id="c-乱序-or-丢包"><a class="anchor" href="#c-乱序-or-丢包">#</a> C、乱序 or 丢包</h2><p><strong>6、TCP Out-Of-Order</strong></p><p>标志着 TCP 传输出现乱序。</p><p><img data-src="image-20221013201521709.png" alt="image-20221013201521709" /></p><p>如图，在 TCP 传输过程中（不包括三次握手和四次挥手），同一台主机发出的数据包应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len；也可以说，后一个包的 Seq 会大于或等于前一个包的 Seq。当 Wireshark 发现后一个包的 Seq 值小于前一个包的 Seq + Len 时，就会认为是乱序了，因此标志 [TCP Out-of-Order]。</p><p>在连续传输数据过程中，可以看到从第 330 号包一直到第 337 包被标志为乱序这几个包，应当是连续的，但是可以发现第 336 号包跟第 337 号包调转了，因此第 336 号包被标志为上一包未捕获，而第 337 号包则被标志为乱序。</p><p>然后来分析一下，例如第 337 号包的 Seq = 83518，Len = 1380，那么 Seq + Len = 84898，可以发现其实该包列栏中  <code>Sequence Number</code>  的  <code>83518</code>  数据对应 Seq， <code>NextSequence Number</code>  的  <code>84898</code>  数据对应 Seq + Len。根据上面的结论，在发生错误前的第 335 号包它的  <code>NextSequence Number</code>  表明下一包第 336 号包的 Seq 值应当是  <code>83518</code>  ，但是实际上第 336 号包的 Seq 值为  <code>84898</code>  ，当到了第 337 号包的时候，才出现理应对应的值  <code>83518</code>  ，这时 Wireshark 通过对比在发生错误前的第 335 号包至理论连续的第 337 号包之间看是否有出现调转包，有则标志 [TCP Out-of-Order]。一般出现 [TCP Out-of-Order] 时都会伴随出现 [TCP Previous segment not captured] 。</p><p><strong>7、TCP Previous segment not captured</strong></p><p>在 TCP 传输过程中，同一台主机发出的数据段应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len（三次握手和四次挥手是例外）。如果 Wireshark 发现后一个包的 Seq 值大于前一个包的 Seq + Len，就知道中间缺失了一段数据。</p><p>依然沿用上一张图，在发生错误前的第 335 号包 Seq + Len 值为  <code>83518</code>  ，但下一包的 Seq 值为  <code>84898</code>  ，因此出现后一个包的 Seq 值大于前一个包的 Seq + Len，而非等于，所以预示着该数据包的上一个包未捕获到，但后面我们也有发现虽然显示上一个包未捕获到，实际紧随它的后一个包就是它们之间的数据包，只是调转了包而已。</p><h2 id="d-端口"><a class="anchor" href="#d-端口">#</a> D、端口</h2><p><strong>8、TCP Port numbers reused</strong></p><p>这个死活没捕捉出来，就简单说一下吧。</p><p>当发送 SYN 标志时（不是 SYN + ACK），如果已经存在一个使用相同地址和端口的现有会话，那么将会被 Wireshark 标记 [TCP Port numbers reused]。</p><h2 id="e-重传"><a class="anchor" href="#e-重传">#</a> E、重传</h2><p><strong>9、TCP Spurious Retransmission</strong></p><p>TCP 虚假重传，意味着发送端认为发送的包已经丢失了，然后就重传了，尽管此时接收端已经发送了对这些包的确认（确认还没收到或者已经丢失了）。</p><p><img data-src="image-20221013232224434.png" alt="image-20221013232224434" /></p><p>如图，第 459 号包出现虚拟重传现象，实际为第 453 号包的重传，可从显示来看第 453 号包是已经是得到接收端的 ACK 响应了，理论来讲是不会重传的，但前面也有说到了，可能会出现接收端确认了请求（已经发出去了），发送端却还没收到或者已经丢失了，那么发送端将会重传数据，而由于这时这段数据包在初包发送后接收端有回一次请求，这次重传相当于接收端又回了一次请求（即重复了两次响应，可以看到第 460 号包标志为 [TCP Dup ACK] 了），所以对于这种有回 ACK 还重传的数据包将被标志为 [TCP Spurious Retransmission] 。然后至于为什么是重传了第 453 号包，可以看到第 460 号包的信息提示，这是 ACK 响应第 459 号包的，但同时也是跟第 454 号包重复，而第 454 号包对应响应第 453 号包的，那自然而然地得到第 459 号包为第 453 号包的重传。</p><p><strong>10、TCP Retransmission</strong></p><p>TCP 重传，与上面不同的是如果一个包不确定是否丢了，但它又没有像上面 [TCP Spurious Retransmission] 那样得到接收端的 ACK 响应，那它大概率就是丢包了，就不会快速重传；而针对这种情况，发送方也就只好等到超时了再重传，此类重传包就会被 Wireshark 标志 [TCP Retransmission] 。</p><p><img data-src="image-20221014221501852.png" alt="image-20221014221501852" /></p><p>如图，第 33 号包被标志为 [TCP Previous segment not captured]，预示着有可能出现丢包，并且在后面一段时间内也没有像前面那样有标志 [TCP Out-Of-Order] 提示的包，排除了乱序情况，最终等待超时，重传数据包，于是第 33 号重传包就有了 [TCP Retransmission] 标志。TCP 重传是 TCP 通讯中常有的事情，有时候看到一大堆黑漆漆一片的 error 事件，可能就是这种情况。</p><h2 id="f-tcp-window"><a class="anchor" href="#f-tcp-window">#</a> F、TCP Window</h2><p><strong>11、TCP Window Full</strong></p><p>顾名思义，就是窗口已满，指的发送端发送的数据已经达到的接受窗口的上限；那么发送端暂停发送，等待新的接收窗口的通告。</p><p><img data-src="image-20221014235639055.png" alt="image-20221014235639055" /></p><p>如图，在这组数据中，从第 526323 号包开始，出现了 [TCP Window Full] 表明发送数据达到上限了，同时还有另一个 [TCP Spurious Retransmission] 表明了虚假重传，但可惜的是接收端后续都没有响应，最终导致在发送 RST 报文后，关闭 TCP 连接。</p><p><strong>12、TCP Window Update</strong></p><p>TCP 协议允许随时改变窗口的大小，并且通过发送标识有 WindowUpdate 的报文通知对端；或者当接收端的应用程序消耗完了已经从 RX 缓冲区接收到的数据时，也会发生 WindowUpdate，以指示缓冲区中现在有更多可用空间；以上这些数据包将被标志 [TCP Window Update]。[TCP Window Update] 是 TCP 通信中的一个状态，它可以发生的原因还有有很多，通常在 TCP ZeroWindow 条件发生后看到。</p><p><img data-src="image-20221014234941548.png" alt="image-20221014234941548" /></p><p><strong>13、TCP ZeroWindow</strong></p><p>如图，当接收窗口值大小为零（Win = 0）且非 SYN、FIN 或 RST 数据时设置。</p><p><img data-src="image-20221014223515008.png" alt="image-20221014223515008" /></p><p>在每个 TCP 报头中的窗口字段表明着接收端可以接受的数据量大小；如果接收端不能接受任何数据，它将把窗口值设置为零，这告诉发送端暂停其传输。在某些特定情况下，这是正常的，例如，打印机可能会在加载或翻转一张纸时使用零窗口暂停打印作业的传输；然而，在大多数情况下，这表明接收端存在性能或容量问题。恢复暂停的连接可能需要很长时间 (有时需要几分钟)，即使导致零窗口的底层条件很快就会清除。</p><p><strong>14、TCP ZeroWindowProbe</strong></p><p>当通信的一方接收到 TCP ZeroWindow 报文后，会定时发送 TCP ZeroWindowProbe 报文进行探测；探测报文是需要发送下一字节数据，然后通过接收端的响应，由此来判断接收端窗口值是否仍然为 0，如果接收方回复窗口大小仍然为零，则发送端继续探测。ZeroWindowProbe 它有助于证明发送端已经确认到接收端其 TCP 窗口大小为零，但仍试图让数据继续交互而非关闭通讯。</p><p><img data-src="windows-3.png" alt="img" /></p><p><strong>15、TCP ZeroWindowProbeAck</strong></p><p>作为 [TCP ZeroWindowProbe] 的 ACK 应答，结合 TCP ZeroWindowProbe 理解。ZeroWindowProbeAck 数据包的存在也表明网络正在传递数据包并且设备没有关闭。</p><h2 id="g-交互"><a class="anchor" href="#g-交互">#</a> G、交互</h2><p><strong>16、TCP Conversation Completeness</strong></p><ul><li>SYN</li><li>SYN-ACK</li><li>ACK</li><li>DATA</li><li>FIN</li><li>RST</li></ul><p><img data-src="0.jpg" alt="img" /></p><h1 id="常见表达式"><a class="anchor" href="#常见表达式">#</a> 常见表达式</h1><p><strong>1、运算符</strong></p><table><thead><tr><th style="text-align:center">英文写法</th><th style="text-align:center">别名</th><th style="text-align:center">C-like</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">eq</td><td style="text-align:center">any_eq</td><td style="text-align:center">==</td><td style="text-align:center">相等（如果超过一个）</td><td style="text-align:center"><code>ip.src == 10.0.0.5</code></td></tr><tr><td style="text-align:center">ne</td><td style="text-align:center">all_ne</td><td style="text-align:center">!=</td><td style="text-align:center">不相等（如果多于一个，则全部）</td><td style="text-align:center"><code>ip.src != 10.0.0.5</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">all_eq</td><td style="text-align:center">===</td><td style="text-align:center">相等（如果多于一个，则全部）</td><td style="text-align:center"><code>ip.src === 10.0.0.5</code></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">any_ne</td><td style="text-align:center">!==</td><td style="text-align:center">不相等（如果多于一个，则任意）</td><td style="text-align:center"><code>ip.src !== 10.0.0.5</code></td></tr><tr><td style="text-align:center">gt</td><td style="text-align:center"></td><td style="text-align:center">&gt;</td><td style="text-align:center">大于</td><td style="text-align:center"><code>frame.len &gt; 10</code></td></tr><tr><td style="text-align:center">lt</td><td style="text-align:center"></td><td style="text-align:center">&lt;</td><td style="text-align:center">小于</td><td style="text-align:center"><code>frame.len &lt; 128</code></td></tr><tr><td style="text-align:center">ge</td><td style="text-align:center"></td><td style="text-align:center">&gt;=</td><td style="text-align:center">大于或等于</td><td style="text-align:center"><code>frame.len ge 0x100</code></td></tr><tr><td style="text-align:center">le</td><td style="text-align:center"></td><td style="text-align:center">&lt;=</td><td style="text-align:center">小于或等于</td><td style="text-align:center"><code>frame.len &lt;= 0x20</code></td></tr></tbody></table><p><strong>2、逻辑符</strong></p><table><thead><tr><th style="text-align:center">英文写法</th><th style="text-align:center">C-like</th><th style="text-align:center">描述</th><th style="text-align:center">例子</th></tr></thead><tbody><tr><td style="text-align:center">and</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">逻辑与</td><td style="text-align:center"><code>ip.src==10.0.0.5 and tcp.flags.fin</code></td></tr><tr><td style="text-align:center">or</td><td style="text-align:center" rowspan="2">||</td><td style="text-align:center">逻辑或</td><td style="text-align:center"><code>ip.src==10.0.0.5 or ip.src==192.1.1.1</code></td></tr><tr><td style="text-align:center">xor</td><td style="text-align:center">异或</td><td style="text-align:center"><code>tr.dst[0:3] == 0.6.29 xor tr.src[0:3] == 0.6.29</code></td></tr><tr><td style="text-align:center">not</td><td style="text-align:center">!</td><td style="text-align:center">逻辑非</td><td style="text-align:center"><code>not llc</code></td></tr></tbody></table><p><strong>3、协议过滤</strong></p><pre><code>ip.proto == xxxnote: xxx表示为对应的协议，如 TCP：ip.proto == TCP</code></pre><ul><li>**TCP：** 只显示 TCP 协议的数据流</li><li>**UDP：** 只显示 UDP 协议的数据流</li><li>**HTTP：** 只显示 HTTP 协议的数据流</li><li>**ICMP：** 只显示 ICMP 协议的数据流</li><li>**ARP：** 只显示 ARP 协议的数据流</li><li>**DNS：** 只显示 DNS 协议的数据流</li></ul><p><strong>4、IP 过滤</strong></p><ul><li><code>ip.addr == 192.168.116.138</code>  ，只显示 <strong>IP 地址</strong>为  <code>192.168.116.138</code>  有关的数据流</li><li><code>ip.src == 192.168.116.138</code>  ，只显示<strong>源 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li><li><code>ip.dst == 192.168.116.138</code>  ，只显示<strong>目标 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li></ul><p><strong>5、端口过滤</strong></p><ul><li><code>tcp.port == 80</code>  ，只显示 80 端口 TCP 数据流</li><li><code>udp.prot == 67</code>  ，只显示 67 端口 UDP 数据流</li><li><code>tcp.srcport == 80</code>  , 只显示源地址的 80 端口数据流</li><li><code>tcp.dstport == 80</code>  ，只显示目的地址 80 端口数据流</li></ul><p><strong>6、过滤 HTTP 协议</strong></p><ul><li><code>http.request.method == &quot;GET&quot;</code>  ，显示 GET 请求</li><li><code>http.request.method == &quot;POST&quot;</code>  ，显示 POST 请求</li><li><code>http.request.code == 404</code>  ，显示状态码为 404</li></ul><p>参看：<span class="exturl" data-url="aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoV29ya0J1aWxkRGlzcGxheUZpbHRlclNlY3Rpb24uaHRtbA==">https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html</span></p><h1 id="列信息增删"><a class="anchor" href="#列信息增删">#</a> 列信息增删</h1><p><strong>1、增加列信息</strong></p><p>在报文的信息栏，选着想要显示的信息，右键点击添加：</p><p><img data-src="image-20221006221325561.png" alt="image-20221006221325561" /></p><p><strong>2、删除列信息</strong></p><p>在监控报文栏，选择不需要的列，右键选中：</p><p><img data-src="image-20221006221434994.png" alt="image-20221006221434994" /></p><p><strong>3、隐藏列信息</strong></p><p>同样在监控报文栏操作，随便选择一列，右键选中，然后把想要隐藏的列去掉勾选，这里就不放图了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法测试</title>
      <link href="//docs/markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/"/>
      <url>//docs/markdown%E8%AF%AD%E6%B3%95%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="welcome-to-arachnids-blog"><a class="anchor" href="#welcome-to-arachnids-blog">#</a> Welcome to Arachnid‘s blog!</h1><h2 id="排版"><a class="anchor" href="#排版">#</a> 排版</h2><p><strong>粗体</strong> <em>斜体</em></p><p><s>这是一段错误的文本。</s></p><p>引用:</p><blockquote><p>引用鲁迅的话：我以为 “别人尊重我，是因为我很优秀”，后来才明白，“别人尊重我，是因为别人很优秀。</p></blockquote><p>有序列表:</p><ol><li>支持 Vim</li><li>支持 Emacs</li></ol><p>无序列表:</p><ul><li>项目 1</li><li>项目 2</li></ul><h2 id="图片与链接"><a class="anchor" href="#图片与链接">#</a> 图片与链接</h2><p>图片:</p><p><img data-src="https://avatars.githubusercontent.com/u/48347583?v=4" alt="test Image" title="test Image" /></p><p>链接:</p><p><a href="https://arachnid.cc">这是去往 Arachnid 博客的链接</a></p><h2 id="标题"><a class="anchor" href="#标题">#</a> 标题</h2><p>以下是各级标题，最多支持 5 级标题</p><pre><code># h1## h2### h3#### h4##### h4###### h5</code></pre><h2 id="代码"><a class="anchor" href="#代码">#</a> 代码</h2><p>示例:</p><pre><code>function get(key) &#123;    return m[key];&#125;</code></pre><p>代码高亮示例:</p><figure class="highlight javascript"><figcaption data-lang="javascript"><span>t</span></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>* nth element in the fibonacci series.</pre></td></tr><tr><td data-num="3"></td><td><pre>* @param n >= 0</pre></td></tr><tr><td data-num="4"></td><td><pre>* @return the nth element, >= 0.</pre></td></tr><tr><td data-num="5"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">function</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token keyword">var</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>n <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    a <span class="token operator">+=</span> b<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token keyword">return</span> a<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre> </pre></td></tr><tr><td data-num="17"></td><td><pre>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">fib</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>   empCount <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="3"></td><td><pre> </pre></td></tr><tr><td data-num="4"></td><td><pre>   <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name</pre></td></tr><tr><td data-num="6"></td><td><pre>        self<span class="token punctuation">.</span>salary <span class="token operator">=</span> salary</pre></td></tr><tr><td data-num="7"></td><td><pre>        Employee<span class="token punctuation">.</span>empCount <span class="token operator">+=</span> <span class="token number">1</span></pre></td></tr></table></figure><h1 id="markdown-扩展"><a class="anchor" href="#markdown-扩展">#</a> Markdown 扩展</h1><p>Markdown 扩展支持:</p><ul><li>表格</li><li>定义型列表</li><li>Html 标签</li><li>脚注</li><li>目录</li><li>时序图与流程图</li><li>MathJax 公式</li></ul><h2 id="表格"><a class="anchor" href="#表格">#</a> 表格</h2><table><thead><tr><th>Item</th><th>Value</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以指定对齐方式，如 Item 列左对齐，Value 列右对齐，Qty 列居中对齐</p><table><thead><tr><th style="text-align:left">Item</th><th style="text-align:right">Value</th><th style="text-align:center">Qty</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">$1600</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">$12</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">$1</td><td style="text-align:center">234</td></tr></tbody></table><h2 id="定义型列表"><a class="anchor" href="#定义型列表">#</a> 定义型列表</h2><dl><dt>名词 1</dt><dd><p>定义 1（左侧有一个可见的冒号和四个不可见的空格）</p></dd><dt>代码块 2</dt><dd><p>这是代码块的定义（左侧有一个可见的冒号和四个不可见的空格）</p><pre><code>  代码块（左侧有八个不可见的空格）</code></pre></dd></dl><h2 id="html-标签"><a class="anchor" href="#html-标签">#</a> Html 标签</h2><p>支持在 Markdown 语法中嵌套 Html 标签，譬如，你可以用 Html 写一个纵跨两行的表格，最后使用  <code>` `</code>  把 Html 代码包裹起来应该就可以了：</p><pre><code>&lt;table&gt;    &lt;tr&gt;        &lt;th rowspan=&quot;2&quot;&gt;值班人员&lt;/th&gt;        &lt;th&gt;星期一&lt;/th&gt;        &lt;th&gt;星期二&lt;/th&gt;        &lt;th&gt;星期三&lt;/th&gt;    &lt;/tr&gt;    &lt;tr&gt;        &lt;td&gt;李强&lt;/td&gt;        &lt;td&gt;张明&lt;/td&gt;        &lt;td&gt;王平&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;</code></pre><p><table>    <tr>        <th rowspan="2">值班人员</th>        <th>星期一</th>        <th>星期二</th>        <th>星期三</th>    </tr>    <tr>        <td>李强</td>        <td>张明</td>        <td>王平</td>    </tr></table></p><p><strong>提示</strong>，如果想对图片的宽度和高度进行控制，你也可以通过 img 标签，如:</p><p><img data-src="https://avatars.githubusercontent.com/u/48347583?v=4" width="50px" /></p><h2 id="脚注"><a class="anchor" href="#脚注">#</a> 脚注</h2><p>Markdown<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> 来创建一个脚注</p><h2 id="目录"><a class="anchor" href="#目录">#</a> 目录</h2><p>通过  <code>[TOC]</code>  在文档中插入目录，如:</p><p>[TOC]</p><h2 id="时序图与流程图"><a class="anchor" href="#时序图与流程图">#</a> 时序图与流程图</h2><figure class="highlight mermaid"><figcaption data-lang="mermaid"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">sequenceDiagram</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    Alice<span class="token arrow operator">-></span>Bob<span class="token operator">:</span> Hello Bob, how are you?</pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">Note right of</span> Bob<span class="token operator">:</span> Bob thinks</pre></td></tr><tr><td data-num="4"></td><td><pre>    Bob<span class="token arrow operator">--></span>Alice<span class="token operator">:</span> I am good thanks!</pre></td></tr></table></figure><p>流程图:</p><figure class="highlight mermaid"><figcaption data-lang="mermaid"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">graph</span> TB</pre></td></tr><tr><td data-num="2"></td><td><pre>    A<span class="token text string">[Hard]</span> <span class="token arrow operator">--></span><span class="token label property">|Text|</span> B<span class="token text string">(Round)</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    B <span class="token arrow operator">--></span> C<span class="token text string">&#123;Decision&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    C <span class="token arrow operator">--></span><span class="token label property">|One|</span> D<span class="token text string">[Result 1]</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    C <span class="token arrow operator">--></span><span class="token label property">|Two|</span> E<span class="token text string">[Result 2]</span></pre></td></tr></table></figure><blockquote><p><strong>提示:</strong> 更多关于时序图与流程图的语法请参考:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21lcm1haWQtanMvbWVybWFpZC9ibG9iL2RldmVsb3AvUkVBRE1FLnpoLUNOLm1k">Mermaid</span></li></ul></blockquote><h2 id="katex-数学公式"><a class="anchor" href="#katex-数学公式">#</a> KaTex 数学公式</h2><p>$ 表示行内公式：</p><p>质能守恒方程可以用一个很简洁的方程式 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mo>=</mo><mi>m</mi><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">E=mc^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord mathnormal">m</span><span class="mord"><span class="mord mathnormal">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span> 来表达。</p><p><code>$$</code>  表示整行公式：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\sum_{i=1}^n a_i=0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mi>x</mi></msub><mo separator="true">,</mo><mo>…</mo><mo separator="true">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy="false">)</mo><mo>=</mo><msubsup><mi>x</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>x</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><msubsup><mi>x</mi><mi>n</mi><mn>2</mn></msubsup></mrow><annotation encoding="application/x-tex">f(x_1,x_x,\ldots,x_n) = x_1^2 + x_2^2 + \cdots + x_n^2 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1111079999999998em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><munderover><mo>∑</mo><mrow><mi>k</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></munderover><mrow><msub><mover accent="true"><mi>γ</mi><mo stretchy="true">^</mo></mover><mrow><mi>k</mi><mi>j</mi></mrow></msub><msub><mi>z</mi><mi>k</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\sum^{j-1}_{k=0}{\widehat{\gamma}_{kj} z_k} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.16089em;vertical-align:-1.302113em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.8587770000000001em;"><span style="top:-1.8478869999999998em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.347113em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.302113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05556em;">γ</span></span></span><span class="svg-align" style="top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361079999999999em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span></p><p>更复杂的公式：</p>\begin{eqnarray}\vec\nabla \times (\vec\nabla f) & = & 0  \cdots\cdots梯度场必是无旋场\\\vec\nabla \cdot(\vec\nabla \times \vec F) & = & 0\cdots\cdots旋度场必是无散场\\\vec\nabla \cdot (\vec\nabla f) & = & {\vec\nabla}^2f\\\vec\nabla \times(\vec\nabla \times \vec F) & = & \vec\nabla(\vec\nabla \cdot \vec F) - {\vec\nabla}^2 \vec F\\\end{eqnarray} <p>访问 <span class="exturl" data-url="aHR0cHM6Ly9rYXRleC5vcmcv">KaTex</span> 参考更多使用方法。</p><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>Markdown 是一种轻量级标记语言. <a href="#fnref1" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于官方指导安装 Arch Linux</title>
      <link href="//docs/Linux/%E5%9F%BA%E4%BA%8E%E5%AE%98%E6%96%B9%E6%8C%87%E5%AF%BC%E5%AE%89%E8%A3%85%20Arch%20Linux/"/>
      <url>//docs/Linux/%E5%9F%BA%E4%BA%8E%E5%AE%98%E6%96%B9%E6%8C%87%E5%AF%BC%E5%AE%89%E8%A3%85%20Arch%20Linux/</url>
      
        <content type="html"><![CDATA[<blockquote><p>官方 wiki 安装中文指导：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSW5zdGFsbGF0aW9uX2d1aWRlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">https://wiki.archlinux.org/title/Installation_guide_(简体中文)</span></p><p>最好还是以<strong>英文版</strong>的为基准，因为 ArchLinux 是一个激进的系统，更新比较快，可能刚写完这篇笔记，转头已经有些对应不上了，哈哈哈。</p></blockquote><h2 id="系统镜像"><a class="anchor" href="#系统镜像">#</a> 系统镜像</h2><p>官方镜像下载地址：<span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL2Rvd25sb2FkLw==">https://archlinux.org/download/</span></p><p>当然，也可以去各大高校提供的镜像源网站下载。</p><h2 id="启动盘制作"><a class="anchor" href="#启动盘制作">#</a> 启动盘制作</h2><p><strong>1、windows 平台</strong></p><p>可以使用 Rufus：<span class="exturl" data-url="aHR0cHM6Ly9ydWZ1cy5pZS96aC8=">https://rufus.ie/zh/</span></p><p>这是一款开源、免费、小巧（1.1mb）纯粹的系统启动盘制作工具。<br />目前所支持的 ISO 镜像如下：</p><p><img data-src="image-20220412112425056.png" alt="image-20220412112425056" /></p><p><strong>2、Uinx 平台</strong></p><p>类 Unix 系统可以直接使用  <code>dd</code>  命令来制作启动盘。</p><p><code>dd</code>  命令使用可参考：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC1jb21tLWRkLmh0bWw=">https://www.runoob.com/linux/linux-comm-dd.html</span></p><p><strong>3、多平台</strong></p><p>可以使用开源的 etcher：<span class="exturl" data-url="aHR0cHM6Ly93d3cuYmFsZW5hLmlvL2V0Y2hlci8=">https://www.balena.io/etcher/</span></p><blockquote><p>然后本篇文章是基于官方指导的总结分析安装的笔记，如下开始正式安装配置，因为是以官方 wiki 安装为指导，所以下面用到的操作的标题将一一对应官方 wiki 的标题，没用到的将忽略不写，以及需要增加的将给出说明。目前使用的镜像版本： <code>archlinux-2022.04.01-x86_64.iso</code></p></blockquote><h2 id="引导安装"><a class="anchor" href="#引导安装">#</a> 引导安装</h2><p>Arch 的启动引导过程有两种：<span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQklPUw==">BIOS</span> 和 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvVUVGSQ==">UEFI</span> 系统，这两者的引导过程是完全不同的。在 Arch 中它们的引导加载及区别可看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQXJjaF9ib290X3Byb2Nlc3M=">https://wiki.archlinux.org/title/Arch_boot_process</span></p><p>目前大部分设备的引导方式主要分为  <code>UEFI 引导 + GPT 分区表</code>  和  <code>BIOS(LEGACY) 引导 + MBR 分区表</code>  这两种，而在新的机器里大部分都采用了  <code>UEFI/GPT</code>  引导的方式，当然，同时也兼容  <code>BIOS/MBR</code>  。</p><p>UEFI 进入：</p><p><img data-src="image-20220412115757611.png" alt="image-20220412115757611" /></p><p>BIOS 进入：</p><p><img data-src="image-20220412120426116.png" alt="image-20220412120426116" /></p><p>启动安装后，最终界面出现的效果是一样的：</p><p><img data-src="image-20220412153955531.png" alt="image-20220412153955531" /></p><h2 id="验证引导模式"><a class="anchor" href="#验证引导模式">#</a> 验证引导模式</h2><p>键入如下命令：（ <code>ls</code> ：表示列出目录内容；后面的路径可以利用 Tab 键 自动补全，即键入命令或文件名的前几个字符，然后按 [Tab] 键）</p><pre><code>ls /sys/firmware/efi/efivars</code></pre><p>如果命令结果显示了目录且没有报告错误，则系统以 UEFI 模式引导。</p><p>如果目录不存在，则系统可能 **（注意是可能，并不一定确是 BIOS 模式）** 以 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvemg6QklPUw==">BIOS</span> 模式 (或 <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcGF0aWJpbGl0eV9TdXBwb3J0X01vZHVsZQ==">CSM</span> 模式) 引导，如显示：</p><pre><code>ls: cannot access '/sys/firmware/efi/efivars': No such file or directory</code></pre><p>对于一些不是新的 / 格式过的磁盘，可能就不太适用了，当然，最好方法就是查看安装的主分区磁盘的属性。</p><h2 id="连接到因特网"><a class="anchor" href="#连接到因特网">#</a> 连接到因特网</h2><p>1、检查网络接口是否启用</p><pre><code>ip link</code></pre><p>2、连接到网络</p><ul><li>有线：连接网线，并保证上级路由有网。</li><li>无线：使用 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvSXdkXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI2l3Y3Rs">iwctl</span> 验证无线网络，具体操作点击链接查看。</li></ul><p>3、配置网络连接</p><ul><li><p>动态：需要支持 DHCP，然后执行以下命令。</p><pre><code>dhcpcd</code></pre></li><li><p>静态：直接按照 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0d29ya19jb25maWd1cmF0aW9uXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFOSU5RCU5OSVFNiU4MCU4MV9JUF8lRTUlOUMlQjAlRTUlOUQlODA=">静态 IP 地址</span> 这个链接进行操作。</p></li></ul><p>4、检查网络连接</p><p>在确认无误完成上面的操作后，通过 PING IP 来检查：</p><pre><code>ping archlinux.org</code></pre><p>**note：** 关于网络部分的，详情请看 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0d29ya19jb25maWd1cmF0aW9u">https://wiki.archlinux.org/title/Network_configuration</span></p><h2 id="更新系统时间"><a class="anchor" href="#更新系统时间">#</a> 更新系统时间</h2><p>执行：</p><pre><code>timedatectl set-ntp true</code></pre><p>然后正常情况下是并没有输出的，所谓没有消息就是最好的消息，这就是 Linux/Unix 系统的设计思想。</p><p>最后，执行如下命令来检查服务状态：</p><pre><code>timedatectl status</code></pre><h2 id="建立硬盘分区"><a class="anchor" href="#建立硬盘分区">#</a> 建立硬盘分区</h2><p>系统如果识别到磁盘，就会将其分配为一个块设备，如  <code>/dev/sda</code> 、 <code>/dev/nvme0n1</code>  或  <code>/dev/mmcblk0</code>  等等。然后可以执行如下命令查看：</p><pre><code>fdisk -l</code></pre><p>然后，针对不同的引导方式，其分区布局是不一样的，以官方给出的分区为例：</p><ul><li><p><strong>UEFI 与</strong> <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI0dVSURfJUU1JTg4JTg2JUU1JThDJUJBJUU4JUExJUE4">GPT</span></p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>/mnt/boot</td><td>/dev/<em>efi_system_partition</em></td><td>EFI 系统分区</td><td>至少 300 MiB</td></tr><tr><td>[SWAP]</td><td>/dev/<em>swap_partition</em></td><td>Linux swap (交换空间)</td><td>大于 512 MiB</td></tr><tr><td>/mnt</td><td>/dev/<em>root_partition</em></td><td>Linux x86-64 根目录 (/)</td><td>剩余空间</td></tr></tbody></table></li><li><p><strong>BIOS 与</strong> <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpI01hc3Rlcl9Cb290X1JlY29yZA==">MBR</span></p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>[SWAP]</td><td>/dev/<em>swap_partition</em></td><td>Linux swap (交换空间)</td><td>大于 512 MiB</td></tr><tr><td>/mnt</td><td>/dev/<em>root_partition</em></td><td>Linux x86-64 根目录 (/)</td><td>剩余空间</td></tr></tbody></table><p>然后在这里拓展一下  <code>MiB</code>  跟  <code>MB</code>  这两个单位， <code>MB</code>  是国际单位制 SI 制定的十进制标准单位制，这个 M 是 1000K，而  <code>MiB</code>  是国际电工委员会 IEC 制定的二进制标准，这个 M 是 1024K 。参看：<span class="exturl" data-url="aHR0cHM6Ly9waHlzaWNzLm5pc3QuZ292L2N1dS9Vbml0cy9iaW5hcnkuaHRtbA==">https://physics.nist.gov/cuu/Units/binary.html</span></p></li><li><p>其它的布局实例可看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGFydGl0aW9uaW5nXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNSVCOCU4MyVFNSVCMSU4MCVFNyVBNCVCQSVFNCVCRSU4Qg==">https://wiki.archlinux.org/title/Partitioning_(简体中文)# 布局示例</span></p></li></ul><p>在了解上面的布局后，然后我们常用的引导方式有  <code>UEFI 引导 + GPT 分区表</code>  和  <code>BIOS(LEGACY) 引导 + MBR 分区表</code>  这两种，所以下面分开说明：</p><ol><li><p><strong>BIOS/MBR</strong></p><p>这种方式相对于另一种比较简单，所以就先说了。</p><p>首先，先来了解一下  <code>[SWAP]</code>  挂载点和  <code>/mnt</code>  挂载点：</p><ul><li><p><code>[SWAP]</code> ：swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存（物理内存，可以理解为内存条容量）不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间（有点类似于 windows 系统下的虚拟内存）。也就是说，当内存不够用时，我们使用 swap 分区来临时顶替，等到那些程序要运行时，再从 swap 中恢复保存的数据到内存中。这种 “拆东墙，补西墙” 的方式应用于几乎所有的操作系统中。</p><p>使用 swap 交换分区，显著的优点是，通过操作系统的调度，应用程序实际可以使用的内存空间将远远超过系统的物理内存。</p><p>那么 swap 分区到底设置成多大才最优？少了又觉得不够，多了又感觉浪费，那么我们可以参考 Redhat 官方文档中 <span class="exturl" data-url="aHR0cHM6Ly9hY2Nlc3MucmVkaGF0LmNvbS9kb2N1bWVudGF0aW9uL2VuLXVzL3JlZF9oYXRfZW50ZXJwcmlzZV9saW51eC82L2h0bWwvaW5zdGFsbGF0aW9uX2d1aWRlL3MyLWRpc2twYXJ0cmVjb21tZW5kLXBwYyNpZDQzOTQwMDc=">关于 swap 分区大小设置的建议</span>：</p><table><thead><tr><th style="text-align:center">物理内存</th><th style="text-align:center">建议的交换空间大小</th><th style="text-align:center">如果开启休眠功能建议的交换空间大小</th></tr></thead><tbody><tr><td style="text-align:center">⩽ 2GB</td><td style="text-align:center">内存的 2 倍</td><td style="text-align:center">内存的 3 倍</td></tr><tr><td style="text-align:center">&gt; 2GB – 8GB</td><td style="text-align:center">等于内存大小</td><td style="text-align:center">内存的 2 倍</td></tr><tr><td style="text-align:center">&gt; 8GB – 64GB</td><td style="text-align:center">至少 4G</td><td style="text-align:center">内存的 1.5 倍</td></tr><tr><td style="text-align:center">&gt; 64GB</td><td style="text-align:center">至少 4G</td><td style="text-align:center">不建议使用休眠</td></tr></tbody></table><p>最后结合日常使用，一般来说可以按照如下规则设置 swap 大小：</p><ul><li>4G 以内的物理内存，SWAP 设置为内存的 2 倍，不超过 4G。</li><li>4-8G 的物理内存，SWAP 等于内存大小。</li><li>8-64G 的物理内存，SWAP 设置为 8G。</li><li>64-256G 物理内存，SWAP 设置为 16G。</li></ul></li><li><p><code>/mnt</code> ：全称  <code>mount</code>  可直接理解为 “挂载”，用于存放手动挂载的硬件。这部分是根目录 <code>/</code>  下的目录，用来挂载文件系统。</p><p>一般的 Linux 根目录展开如下图：</p><p><img data-src="994198-20160908160724832-375737054.png" alt="img" /></p><p>然后按照官方的说明，是想把将根磁盘卷挂载到  <code>/mnt</code>  目录下，即  <code>/mnt</code>  变成  <code>/</code>  根目录。</p></li></ul><p><strong>好了，了解完后下面正式开始。</strong></p><p>执行命令：</p><pre><code>fdisk /dev/sdx （sdx可以为sda、sdb等，具体以你实际需要挂载的磁盘名称为准）</code></pre><p>接着你就进入了  <code>fdisk</code>  操作环境，为了获取该命令下的操作功能，根据提示输入  <code>m</code>  并回车查看各命令的作用：</p><p><img data-src="image-20220414144302934.png" alt="image-20220414144302934" /></p><p>在  <code>fdisk</code>  操作环境下：</p><p>1、对于一个全新的磁盘（格式化了），输入  <code>o</code>  来创建一个全新的  <code>MBR</code>  分区表（因为这里是 BIOS 引导）；如果是旧磁盘（要么原本有  <code>MBR</code>  分区表，要么不是  <code>MBR</code>  属性  <code>DOS</code>  的），那对于非  <code>MBR</code>  分区表可能得更改分区表或者格式化，而已有  <code>MBR</code>  分区表的直接执行第 2 步。</p><p>2、输入  <code>n</code>  创建一个新的分区，首先会让你选择类型分区，输入  <code>p</code>  选择主分区，回车接着选择分区号，这里一般直接回车使用默认数值，这样可以避免自己定义出现冲突；紧接着选择开始起扇区地址，如果不知道原有区域划分情况，那一般直接回车使用默认数值即可；随后，输入结束扇区地址或者容量大小，这里决定了你为该分区创建的容量大小；我们按照表格顺序创建分区，那这第一个就是  <code>swap</code>  交换分区，例如我分配的是 8G 容量，那可以直接输入容量大小： <code>+8G</code>  。</p><p>3、创建完毕后，可以输入  <code>p</code>  来查看创建的分区。</p><p>4、重复第 2 项创建根目录分区和第 3 项确认最后的分区信息，至此就有两个分区（对应表格）。</p><p>5、最后输入  <code>w</code>  将之前所有的操作写入磁盘并生效。</p></li><li><p><strong>UEFI/GPT</strong></p><p>与上一种引导方式相比，根据表格显示，只多了一个 <strong>EFI 系统分区</strong>，然后了解一下这个挂载点：</p><ul><li><code>/mnt/boot</code> ：上面说了官方是想把将根磁盘卷挂载到  <code>/mnt</code>  目录下，那这个 boot 引导自然就挂载到了新的  <code>/mnt</code>  目录下了。</li></ul><p>在该引导模式下的操作就如下。</p><p>执行命令如下进入  <code>fdisk</code>  操作环境：</p><pre><code>fdisk /dev/sdx （sdx可以为sda、sdb等，具体以你实际需要挂载的磁盘名称为准）</code></pre><p>在  <code>fdisk</code>  操作环境下：</p><p>1、对于一个全新的磁盘（格式化了），这里则输入  <code>g</code>  来创建一个全新的  <code>GPT</code>  分区表（因为到这里是 UEFI 引导）；同样的如果是旧磁盘那跟上面的 BIOS 引导操作差不多，只不过这里是  <code>GPT</code>  属性了。</p><p>2、输入  <code>n</code>  创建一个新的分区，让你选择分区号 **（UEFI 比 BIOS 少了类型分区选择）**，这里一般直接回车使用默认数值，这样可以避免自己定义出现冲突；紧接着选择开始起扇区地址，如果不知道原有区域划分情况，那一般直接回车使用默认数值即可；随后，输入结束扇区地址或者容量大小，这里决定了你为该分区创建的容量大小；我们按照表格顺序创建分区，那这第一个就是  <code>/mnt/boot</code>  引导分区，例如我取的是 512MiB 容量，那可以直接输入容量大小： <code>+512M</code>  。</p><p>3、创建完毕后，可以输入  <code>p</code>  来查看创建的分区。</p><p>4、重复第 2 项和第 3 项两次，分别创建  <code>[SWAP]</code>  和  <code>/mnt</code> ，至此就有三个分区（对应表格）。</p><p>5、最后输入  <code>w</code>  将之前所有的操作写入磁盘并生效。</p></li></ol><h2 id="格式化分区"><a class="anchor" href="#格式化分区">#</a> 格式化分区</h2><ul><li><p><strong>EFI 系统分区（仅对于 UEFI/GPT 引导方式）</strong></p><p>使用  <code>mkfs.fat</code>  命令将其格式化为 Fat32：</p><pre><code>mkfs.fat -F 32 /dev/sdxY （sdxY为上面创建的 EFI 系统分区符）</code></pre></li><li><p><strong>swap 交换分区</strong></p><p>如果有创建，则请使用  <code>mkswap</code>  命令将其初始化：</p><pre><code>mkswap /dev/sdxY （sdxY为上面创建的交换空间分区符）</code></pre></li><li><p><strong> <code>/mnt</code>  根目录分区</strong></p><p>执行以下命令创建一个 Ext4 文件系统：</p><pre><code>mkfs.ext4 /dev/sdxY （sdxY为上面创建的根分区符）</code></pre></li></ul><h2 id="挂载分区"><a class="anchor" href="#挂载分区">#</a> 挂载分区</h2><p>1、将根磁盘卷挂载到  <code>/mnt</code> ，执行：</p><pre><code>mount /dev/sdxY /mnt （把 sdxY替换为上面创建根分区符）</code></pre><p>2、如果创建了  <code>swap</code>  交换空间卷，执行：</p><pre><code>swapon /dev/sdxY （把 sdxY替换为上面创建的交换空间分区符）</code></pre><p>3、对于 UEFI 系统，挂载 EFI 系统分区：</p><pre><code>mkdir /mnt/bootmount /dev/sdxY /mnt/boot （把 sdxY替换为上面创建的 EFI 系统分区符）</code></pre><h2 id="选择镜像"><a class="anchor" href="#选择镜像">#</a> 选择镜像</h2><p>文件  <code>/etc/pacman.d/mirrorlist</code>  定义了软件包会从哪个镜像源下载。在列表中越前的镜像在下载软件包时有越高的优先权。</p><p>各地区镜像源获取：<span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL21pcnJvcmxpc3Qv">https://archlinux.org/mirrorlist/</span> ，然后点击生成：</p><p><img data-src="image-20220415095310180.png" alt="image-20220415095310180" /></p><p>编辑  <code>/etc/pacman.d/mirrorlist</code>  文件，执行：</p><pre><code>vim /etc/pacman.d/mirrorlist</code></pre><p>然后进入 VIM 环境，输入  <code>i</code>  进入编辑状态，然后根据上面生成提供的镜像表，选择几个放到文件最顶端，在这里笔者选择阿里云镜像：</p><p><img data-src="image-20220415103048537.png" alt="image-20220415103048537" /></p><p>如果其速度不佳，可以手动指定其他镜像源，像中科大或者清华的放在最上面即可：</p><pre><code>Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$archServer = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</code></pre><p>然后，按  <code>Esc</code>  键退出编程，最后输入  <code>:wq</code>  保存退出。</p><p>关于 vim 命令的使用，可看：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVub29iLmNvbS9saW51eC9saW51eC12aW0uaHRtbA==">https://www.runoob.com/linux/linux-vim.html</span></p><h2 id="安装必需的软件包"><a class="anchor" href="#安装必需的软件包">#</a> 安装必需的软件包</h2><p>使用  <code>pacstrap</code>  脚本，安装 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPWJhc2U=">base</span> 软件包和 Linux <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS2VybmVsXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">内核</span>以及常规硬件的固件：</p><pre><code>pacstrap /mnt base base-devel linux linux-headers linux-firmware （base-devel在 AUR包的安装是必须的）</code></pre><h2 id="fstab配置"><a class="anchor" href="#fstab配置">#</a> Fstab 配置</h2><p>生成自动挂载分区的  <code>fstab</code>  文件，执行命令：</p><pre><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></pre><p>然后  <code>cat</code>  一下检查生成的  <code>/mnt/etc/fstab</code>  文件是否正确：</p><pre><code>cat /mnt/etc/fstab</code></pre><p>执行后将显示各分区挂载情况及属性信息。</p><h2 id="chroot配置"><a class="anchor" href="#chroot配置">#</a> Chroot 配置</h2><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQ2hhbmdlX3Jvb3RfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4Nyk=">Change root</span> 到新安装的系统：</p><pre><code>arch-chroot /mnt</code></pre><p>执行了这步以后，我们的操作都相当于在磁盘上新装的系统中进行。</p><h2 id="时区配置"><a class="anchor" href="#时区配置">#</a> 时区配置</h2><p>设置时区：</p><pre><code>ln -sf /usr/share/zoneinfo/Region（地区名）/City（城市名） /etc/localtime</code></pre><p>eg：以上海为例，执行  <code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p><p>然后运行  <code>hwclock</code>  以生成  <code>/etc/adjtime</code> ：</p><pre><code>hwclock --systohc</code></pre><h2 id="本地化配置"><a class="anchor" href="#本地化配置">#</a> 本地化配置</h2><p>程序和库如果需要本地化文本，则需要根据区域设置 Locale，以明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准。</p><p>需在这两个文件设置： <code>locale.gen</code>  与  <code>locale.conf</code> 。</p><p>通过前面的 Chroot 配置，我们已经处于 chroot 环境下了，这就意味这现在所在的系统中只有一些最基本的包（组件），而 VIM 组件并未包含在里面，这时候就需要自己安装组件包了。利用 Archlinux 下非常强大的包管理工具  <code>pacman</code> ，其安装包的命令格式为  <code>pacman -S 包名</code> ， <code>pacman</code>  会自动检查这个包所需要的其他包（即为依赖）并一起装上。</p><p>然后我们安装 VIM 组件，执行：</p><pre><code>pacman -S vim</code></pre><p>1、利用刚安装的  <code>vim</code>  ，编辑  <code>locale.gen</code>  文件：</p><pre><code>vim /etc/locale.gen</code></pre><p>找到  <code>zh_CN.UTF-8 UTF-8</code> 、 <code>en_US.UTF-8 UTF-8</code>  这两行，去掉注释并保存。</p><p>紧接着执行  <code>locale-gen</code>  以生成 locale 信息：</p><pre><code>locale-gen</code></pre><p>2、然后创建 <span class="exturl" data-url="aHR0cHM6Ly9tYW4uYXJjaGxpbnV4Lm9yZy9tYW4vbG9jYWxlLmNvbmYuNQ==">locale.conf</span> 文件，并 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTG9jYWxlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcpIyVFNyVCMyVCQiVFNyVCQiU5RiVFNSU4QyVCQSVFNSU5RiU5RiVFOCVBRSVCRSVFNyVCRCVBRQ==">编辑设定 LANG 变量</span>，</p><pre><code>echo LANG=en_US.UTF-8 &gt; /etc/locale.conf</code></pre><h2 id="网络配置"><a class="anchor" href="#网络配置">#</a> 网络配置</h2><p>创建  <code>/etc/hostname</code>  文件，并设定的一个  <code>myhostname</code> ：</p><pre><code>echo myhostname &gt; /etc/hostname （myhostname是你想要为该系统设置的名称）</code></pre><p>这步在我目前使用的功能里好像没用到。。。</p><p>然后，在官方文档中有一条说明：</p><blockquote><p>请注意，目前的 <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL3BhY2thZ2VzLz9uYW1lPWJhc2U=">base</span> 不含有任何网络管理工具。对于新安装的系统环境，请接着完成<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvJUU3JUJEJTkxJUU3JUJCJTlDJUU5JTg1JThEJUU3JUJEJUFF">网络配置</span>，配置过程中可能包括要安装合适的<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvJUU3JUJEJTkxJUU3JUJCJTlDJUU3JUFFJUExJUU3JTkwJTg2">网络管理</span>软件。</p></blockquote><p>因此，我们需要安装网络配置管理包（<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvRGhjcGNkXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">DHCP</span> 客户端和 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTmV0Y3RsXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">netctl</span> 网络管理器）：</p><pre><code>pacman -S dhcpcd netctl</code></pre><h2 id="root-密码"><a class="anchor" href="#root-密码">#</a> Root 密码</h2><p><code>Root</code>  是  <code>Linux</code>  中具有最高权限帐户，有些敏感的操作必须通过  <code>Root</code>  用户进行，比如使用 <code>pacman</code>  命令。</p><p>执行以下命令，然后根据提示输入两次密码即可（注意输入是不显示出来）：</p><pre><code>passwd root</code></pre><h2 id="安装引导程序"><a class="anchor" href="#安装引导程序">#</a> 安装引导程序</h2><p>如果是 Intel 或 AMD 的 CPU，启用 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvTWljcm9jb2RlXyglRTclQUUlODAlRTQlQkQlOTMlRTQlQjglQUQlRTYlOTYlODcp">微码</span> 更新：</p><ul><li><p>Intel</p><pre><code>pacman -S intel-ucode</code></pre></li><li><p>AMD</p><pre><code>pacman -S amd-ucode</code></pre></li></ul><p>接着，官方推荐的引导加载是 <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvR1JVQl8oJUU3JUFFJTgwJUU0JUJEJTkzJUU0JUI4JUFEJUU2JTk2JTg3KQ==">GRUB</span> （其他的引导加载可看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvQXJjaF9ib290X3Byb2Nlc3NfKCVFNyVBRSU4MCVFNCVCRCU5MyVFNCVCOCVBRCVFNiU5NiU4NykjJUU1JThBJTlGJUU4JTgzJUJEJUU2JUFGJTk0JUU4JUJFJTgz">引导功能比较</span>），因此我们对其安装并配置，不同的引导系统，其操作不一样：</p><ul><li><p><strong>BIOS/MBR</strong></p><p>1、安装  <code>grub</code> ：</p><pre><code>pacman -S grub</code></pre><p>2、部署  <code>grub</code> ：</p><pre><code>grub-install --target=i386-pc /dev/sdx （sdx为要安装 GRUB 的磁盘，注意不是分区）</code></pre></li><li><p><strong>UEFI/GPT</strong></p><p>1、安装  <code>grub</code>  和  <code>efibootmgr</code> ：</p><pre><code>pacman -S grub efibootmgr</code></pre><p>2、部署  <code>grub</code> ：</p><pre><code>grub-install --target=x86_64-efi --efi-directory=esp --bootloader-id=GRUB （这里的 esp 替换成挂载点）</code></pre><p>像在这里，那就是：</p><pre><code>grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=GRUB</code></pre></li></ul><p><strong>最后，不管是哪个引导方式，都执行第三步：</strong></p><p>3、生成配置文件：</p><pre><code>grub-mkconfig -o /boot/grub/grub.cfg</code></pre><p>执行后，最后显示  <code>done</code>  即完成操作。</p><p><strong>note：这一步是至关重要的一步，请检查是否正确安装好引导加载程序后再重新启动，否则下次重启后将无法正常进入系统。</strong></p><h2 id="重启"><a class="anchor" href="#重启">#</a> 重启</h2><p>最最最后，你需要进行重启来启动已经安装好的系统。</p><p>1、输入以下命令退出 chroot 环境：</p><pre><code>exit</code></pre><p>2、手动取消挂载的分区（这有助于发现任何「繁忙」的分区）：</p><p><strong>如果挂载了  <code>/mnt/boot</code> ，先  <code>umount -r /mnt/boot</code> ，再  <code>umount -r /mnt</code> ，否则直接  <code>umount /mnt</code> 。</strong></p><pre><code>umount -r /mnt/bootumount -r /mnt</code></pre><p>3、执行重启：</p><pre><code>reboot</code></pre><h2 id="other"><a class="anchor" href="#other">#</a> Other</h2><p>另外一些比较详细的安装教程：</p><p><span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhzdHVkaW8uZ2l0aHViLmlvL0FyY2hMaW51eFR1dG9yaWFsLyMvP2lkPWFyY2gtbGludXgtJUU1JUFFJTg5JUU4JUEzJTg1JUU0JUJEJUJGJUU3JTk0JUE4JUU2JTk1JTk5JUU3JUE4JThCLWFyY2h0dXRvcmlhbC1hcmNoLWxpbnV4LXN0dWRpbw==">Arch Linux 安装使用教程</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlzZWF0b3IuY29tLzIwMTcvMDUvMTcvYXJjaF9pbnN0YWxsLw==">以官方 Wiki 的方式安装 ArchLinux</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X/YModem传输协议</title>
      <link href="//docs/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/XYModem%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
      <url>//docs/%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE/XYModem%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="文件传输"><a class="anchor" href="#文件传输">#</a> 文件传输</h1><p>最常用的几种文件传输协议有：XModem、YModem、ZModem 等。</p><ul><li><p>XModem 是最早的文件传输协议之一，由于出现较早，几乎大部分的通讯程序所支持的文件传输都使用该协议，通常是传输 128 字节的信息块；这种古老的传输协议速度虽然较慢，但由于使用了 CRC 错误校验方法，传输的准确率可高达 99.6%。</p></li><li><p>YModem 协议是 XModem 的改进版，它最早用于调制解调器之间的文件传输，具有快速，稳定传输的优点。它的传输速度比 XModem 快，这是由于它可以一次传输 1024 字节的信息块，同时它还支持传输多个文件，也就是常说的批文件传输。</p></li><li><p>ZModem 协议的处理速度快于 XModem 和 YModem，这是因为它采用了串流式（streaming）传输方式，而且还具有自动改变区段大小和断点续传、快速错误侦测等功能，可以很好地进行断开后恢复传输。这是目前最流行的文件传输协议。</p></li><li><p>除开上面介绍的三种 X / Y / ZModem 协议，还有个常见的传输协议 --- ASCII 协议，这是最快的传输协议，但只能传送文本文件。</p></li></ul><p>X / Ymodem 协议：<br /><span class="exturl" data-url="aHR0cDovL3BhdWlsbGFjLmlucmlhLmZyL35kb2xpZ2V6L3ptb2RlbS95bW9kZW0udHh0">http://pauillac.inria.fr/~doligez/zmodem/ymodem.txt</span></p><p>Zmodem 协议：<br /><span class="exturl" data-url="aHR0cDovL2dhbGxpdW0uaW5yaWEuZnIvfmRvbGlnZXovem1vZGVtL3ptb2RlbS50eHQ=">http://gallium.inria.fr/~doligez/zmodem/zmodem.txt</span></p><h1 id="控制字符定义"><a class="anchor" href="#控制字符定义">#</a> 控制字符定义</h1><pre><code>&lt;SOH&gt; 01H       // 传输 128Byte 启动标志&lt;STX&gt; 02H // 传输 1024Byte 启动标志&lt;EOT&gt; 04H       // 传输结束&lt;ACK&gt; 06H       // 应答&lt;NAK&gt; 15H       // 没应答&lt;CAN&gt; 18H       // 取消传输&lt;C&gt; 43H         // ASCII 'C' CRC校验请求&lt;NUL&gt; 00H       // 空符填充&lt;CPMEOF&gt; 1AH    // 数据填充 (^Z)</code></pre><h1 id="xmodem通讯"><a class="anchor" href="#xmodem通讯">#</a> XModem 通讯</h1><p>Xmodem 是使用最广泛的文件传输协议之一。原始的 Xmodem 协议使用 128 字节数据包和一个简单的 “校验和 &quot; 错误检测方法。后面增强为 Xmodem-CRC，使用了更安全的循环冗余校验 (CRC) 用于错误检测方法。Xmodem 协议总是首先尝试使用 CRC。如果发件人不确认对 CRC 的请求，接收器将转移到 ” 校验和 “ 模式并继续其传输请求。</p><p>增强型 Xmodem-1K 本质上是 Xmodem CRC 模式传输 1K (1024 字节) 数据包。在某些系统和通报上它也可以称为 Ymodem。</p><p>Xmodem 协议传输由接收程序和发送程序完成，先由接收程序发送协商字符，协商校验方式，协商通过之后发送程序就开始发送数据包，接收程序接收到完整的一个数据包之后按照协商的方式对数据包进行校验。校验通过之后发送确认字符，然后发送程序继续发送下一包；如果校验失败，则发送否认字符，发送程序重传此数据包。<strong>信息报中如果剩余的数据不足 128 字节，不足的部分将以  <code>0x1A</code>  填充。</strong></p><h2 id="校验和模式"><a class="anchor" href="#校验和模式">#</a> 校验和模式</h2><h3 id="帧包格式"><a class="anchor" href="#帧包格式">#</a> 帧包格式</h3><table><thead><tr><th style="text-align:center">Byte1</th><th style="text-align:center">Byte2</th><th style="text-align:center">Byte3</th><th style="text-align:center">Byte4~131</th><th style="text-align:center">Byte132</th></tr></thead><tbody><tr><td style="text-align:center">Start Of Header(SOH)</td><td style="text-align:center">Packet NumberID</td><td style="text-align:center">~(Packet NumberID)</td><td style="text-align:center">Packet Data[128]</td><td style="text-align:center">CheckSUM</td></tr></tbody></table><h3 id="传输方式"><a class="anchor" href="#传输方式">#</a> 传输方式</h3><table><thead><tr><th style="text-align:center">Sender</th><th style="text-align:center">Flow</th><th style="text-align:center">Receiver</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">NAK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Time out after 3 Second</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">NAK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center"><strong>Line hit during transmission</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"><strong>ACK get garbaged</strong></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center"><strong>Duplicate packet</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center"><strong>UART Framing err on any byte</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center"><strong>UART Overrun err on any byte</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-127]&gt; &lt;Chksum&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"><strong>ACK get garbaged</strong></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center">Finished</td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr></tbody></table><h2 id="crc模式"><a class="anchor" href="#crc模式">#</a> CRC 模式</h2><p>计算 16 位 CRC 校验的除数多项式为： <code>X ^ 16 + X ^ 12 + X ^ 5 + 1</code> ，信息报中的 128 数据字节将参加 CRC 校验的计算，在发送端 CRC-16 的高字节在前，低字节在后。</p><h3 id="帧包格式-2"><a class="anchor" href="#帧包格式-2">#</a> 帧包格式</h3><table><thead><tr><th style="text-align:center">Byte1</th><th style="text-align:center">Byte2</th><th style="text-align:center">Byte3</th><th style="text-align:center">Byte4~131</th><th style="text-align:center">Byte132~133</th></tr></thead><tbody><tr><td style="text-align:center">Start Of Header(SOH)</td><td style="text-align:center">Packet NumberID</td><td style="text-align:center">~(Packet NumberID)</td><td style="text-align:center">Packet Data[128]</td><td style="text-align:center">16-Bit CRC</td></tr></tbody></table><h3 id="传输方式-2"><a class="anchor" href="#传输方式-2">#</a> 传输方式</h3><p>传输流程：接收方要求发送方以 CRC 校验方式发送时以 ‘C’ 来请求，发送方将对此作出应答。</p><table><thead><tr><th style="text-align:center">Sender</th><th style="text-align:center">Flow</th><th style="text-align:center">Receiver</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Time out after 3 Second</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center"><strong>Line hit during transmission</strong></td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-127]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center">ACK get garbaged</td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center">Finished</td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr></tbody></table><h2 id="扩展"><a class="anchor" href="#扩展">#</a> 扩展</h2><p>关于校验和和 CRC 校验可以看以前的文章《<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=">常用校验算法</span>》</p><p><span class="exturl" data-url="aHR0cHM6Ly93ZWIubWl0LmVkdS82LjExNS93d3cvYW11bGV0L3htb2RlbS5odG0=">XModem Protocol with CRC</span></p><h1 id="ymodem通讯"><a class="anchor" href="#ymodem通讯">#</a> YModem 通讯</h1><p>Ymodem 本质上是允许多个批处理文件传输的 Xmodem-1K，也可表示为 YModem-1K。</p><p>Ymodem 在 Xmodem-1K 基础上发展，沿用了  <code>TeLink</code>  协议的添加空头块的做法，也就是增加  <code>block 0</code> 。该 block 标识即将发送文件的  <code>文件名</code> ， <code>文件大小</code>  和   <code>文件创建时间戳(一般不填写)</code></p><p>Ymodem-g 是 Ymodem 的变体。它设计用于支持错误控制的调制解调器。该协议不提供软件纠错或恢复，但期望调制解调器提供服务。它是一种流式传输协议，以连续流的形式发送和接收 1K 个数据包，直到指示停止。YModem-g 传输形式与 YModem-1K 差不多，同时在发送完一个数据块后，它不会等待应答确认，而是快速连续地发送下一个数据块；如果有任何块不成功转移，整个转移被取消。</p><h2 id="起始帧block-0"><a class="anchor" href="#起始帧block-0">#</a> 起始帧（block 0）</h2><p>YModem 的起始帧并不直接传输文件的数据，而是将文件名与文件的大小放在数据帧中传输，它的帧长 = 3 字节数据首部 + 128 字节数据 + 2 字节 CRC16 校验码 = 33 字节。</p><table><thead><tr><th style="text-align:center">Byte1</th><th style="text-align:center">Byte2</th><th style="text-align:center">Byte3</th><th style="text-align:center">Byte4~131</th><th style="text-align:center">Byte132~133</th></tr></thead><tbody><tr><td style="text-align:center">Start Of Header(SOH)</td><td style="text-align:center">0x00</td><td style="text-align:center">0xFF</td><td style="text-align:center">[ &lt; <code>filename</code> &gt; &lt; <code>filezise</code> &gt; &lt;NUL&gt; ]</td><td style="text-align:center">16-Bit CRC</td></tr></tbody></table><p>说明：</p><ul><li>Byte 1~3：头标志是 SOH，起始帧序固定为 0x00，帧序取反为 0xFF。</li><li>Byte 4~131：<ul><li><code>filename</code>  是传输的文件名字，如文件名  <code>foo.c</code> ，它在起始帧中的格式为： <code>66 6F 6F 2E 63 00</code> ，也就是把 ASCII 码转成十六进制，最后的 0x00 代表文件名结束。</li><li><code>filesize</code>  是要传输的文件的大小，比如文件大小为 120 KByte，转换为  <code>120 * 1024 = 122880</code>  Byte，转化为十六进制为  <code>0x1E00</code> ，它在起始帧中的格式为： <code>31 45 30 30 00</code> ，对应 ASCII 为  <code>1E00</code> ，最后的 0x00 代表文件长度结束。</li><li>最后  <code>NUL</code>  代表剩余不足 128 Byte 部分用 0x00 填充。</li></ul></li><li>Byte 132~133：CRCH、CRCL 分别表示 16 位 CRC 校验码的高 8 位与低 8 位，高字节在前，低字节在后。</li></ul><h2 id="数据帧block-n"><a class="anchor" href="#数据帧block-n">#</a> 数据帧（block n）</h2><table><thead><tr><th style="text-align:center">Byte1</th><th style="text-align:center">Byte2</th><th style="text-align:center">Byte3</th><th style="text-align:center">Byte4~1027</th><th style="text-align:center">Byte1028~1029</th></tr></thead><tbody><tr><td style="text-align:center">Start Of Header(STX)</td><td style="text-align:center">Packet NumberID</td><td style="text-align:center">~(Packet NumberID)</td><td style="text-align:center">Packet Data[1024]</td><td style="text-align:center">16-Bit CRC</td></tr></tbody></table><p>注意：有一种特殊的情况是，如果文件总大小小于等于 128 字节或者文件数据最后剩余的数据小于 128 字节，则 YModem 会选择 SOH 数据帧格式用 128 字节来传输数据，而数据不满 128 字节，剩余的数据用  <code>0x1A</code>  填充。</p><p>这时数据帧的结构就变成了：</p><p>文件大小小于 128 字节： <code>&lt;SOH&gt; &lt;01&gt; &lt;FE&gt; &lt;data1&gt; &lt;data2&gt; ... &lt;datan&gt;  &lt;CPMEOF&gt; ... &lt;CRCH&gt; &lt;CRCL&gt;</code></p><p>文件最后剩余数据小于 128 字节： <code>&lt;SOH&gt; &lt;ID&gt; &lt;~ID&gt; &lt;data1&gt; &lt;data2&gt; ... &lt;datan&gt; &lt;CPMEOF&gt; ... &lt;CRCH&gt; &lt;CRCL&gt;</code></p><h2 id="结束帧block-n1"><a class="anchor" href="#结束帧block-n1">#</a> 结束帧（block n+1）</h2><p>YModem 的结束帧数据也采用 SOH 的 128 字节数据帧</p><table><thead><tr><th style="text-align:center">Byte1</th><th style="text-align:center">Byte2</th><th style="text-align:center">Byte3</th><th style="text-align:center">Byte4~131</th><th style="text-align:center">Byte132~133</th></tr></thead><tbody><tr><td style="text-align:center">Start Of Header(SOH)</td><td style="text-align:center">0x00</td><td style="text-align:center">0xFF</td><td style="text-align:center">&lt;NUL&gt;</td><td style="text-align:center">16-Bit CRC</td></tr></tbody></table><h2 id="传输流程"><a class="anchor" href="#传输流程">#</a> 传输流程</h2><p>以把 foo.c，大小为 4196Byte（16 进制为 0x1064）的文件作为传输的对象：</p><table><thead><tr><th style="text-align:center">Sender</th><th style="text-align:center">Flow</th><th style="text-align:center">Receiver</th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">Time out after 3 Second</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x00&gt; &lt;0xFF&gt; &lt;Data[  <code>&lt;foo.c&gt;</code>  |  <code>&lt;0x1064&gt;</code>  | &lt;NUL&gt; ]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center">&lt;STX&gt; &lt;0x01&gt; &lt;0xFE&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;STX&gt; &lt;0x02&gt; &lt;0xFD&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;STX&gt; &lt;0x03&gt; &lt;0xFC&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;STX&gt; &lt;0x04&gt; &lt;0xFB&gt; &lt;Data[0-1023]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x05&gt; &lt;0xFA&gt; &lt;Data[0-99]&gt; &lt;CPMEOF[0-27]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center"><strong>NAK</strong></td></tr><tr><td style="text-align:center">EOT</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">&lt;---</td><td style="text-align:center">'C'</td></tr><tr><td style="text-align:center">&lt;SOH&gt; &lt;0x00&gt; &lt;0xFF&gt; &lt;NUL[0-127]&gt; &lt;CRC16&gt;</td><td style="text-align:center">---&gt;</td><td style="text-align:center">Packet OK</td></tr><tr><td style="text-align:center">Finished</td><td style="text-align:center">&lt;---</td><td style="text-align:center">ACK</td></tr></tbody></table><h1 id="参考"><a class="anchor" href="#参考">#</a> 参考</h1><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWE1PREVN">https://en.wikipedia.org/wiki/XMODEM</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWU1PREVN">https://en.wikipedia.org/wiki/YMODEM</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvWk1PREVN">https://en.wikipedia.org/wiki/ZMODEM</span></p><p><span class="exturl" data-url="aHR0cDovL3dlYi5jZWNzLnBkeC5lZHUvfnJvb3RkL2NhdGRvYy9ndWlkZS9UaGVHdWlkZV90b2MuaHRtbCNTRUMyMzc=">XMODEM, YMODEM, and ZMODEM</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zbGlkZXBsYXllci5wbC9zbGlkZS80MzQ1NzIv">Transmisja modemowa - Xmodem, Ymodem, Zmodem</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cub2hzZS5kZS91d2Uvc29mdHdhcmUvbHJ6c3ouaHRtbA==">lrzsz: free x/y/zmodem implementation</span></p><h1 id="附录"><a class="anchor" href="#附录">#</a> 附录</h1><p>CRC 校验计算：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> <span class="token function">calcrc</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span>  crc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">char</span> i<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    crc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        crc <span class="token operator">=</span> crc <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>ptr<span class="token operator">++</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        i <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">do</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>crc <span class="token operator">&amp;</span> <span class="token number">0x8000</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                crc <span class="token operator">=</span> crc <span class="token operator">&lt;&lt;</span> <span class="token number">1</span> <span class="token operator">^</span> <span class="token number">0x1021</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">else</span></pre></td></tr><tr><td data-num="15"></td><td><pre>                crc <span class="token operator">=</span> crc <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span>crc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 传输协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> Modem </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modbus家族之 ASCII</title>
      <link href="//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%20ASCII/"/>
      <url>//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%20ASCII/</url>
      
        <content type="html"><![CDATA[<blockquote><p>嗨，相信在上一篇经过我的兄弟 RTU 的介绍之后，已经对 Modbus 有了一定的了解了吧；那么本篇就跟紧我的脚步一起学习新的知识吧。</p></blockquote><h1 id="描述"><a class="anchor" href="#描述">#</a> 描述</h1><p>Modbus 在串行设备中通过实现主从模型结构，解决了电子设备之间的数据通讯问题；在采用 Modbus 协议时，它有两种主要的原始传输方式 ---- Modbus RTU 和 Modbus ASCII。而 Modbus RTU 已经在上一篇介绍了，那么就在本篇中瞅瞅 ASCII 吧。</p><h1 id="通讯方式"><a class="anchor" href="#通讯方式">#</a> 通讯方式</h1><h2 id="帧格式"><a class="anchor" href="#帧格式">#</a> 帧格式</h2><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Length (bytes)</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Start</td><td style="text-align:center">1</td><td style="text-align:center">Starts with colon : (ASCII hex value is 3A)&lt;br/&gt;（以冒号  <code>:</code>  开头，ASCII 十六进制值为 3A）</td></tr><tr><td style="text-align:center">Address</td><td style="text-align:center">2</td><td style="text-align:center">Node address in hex&lt;br/&gt;（十六进制节点地址，字符表示）</td></tr><tr><td style="text-align:center">Function</td><td style="text-align:center">2</td><td style="text-align:center">Function code in hex&lt;br/&gt;（十六进制功能码，字符表示）</td></tr><tr><td style="text-align:center">Data</td><td style="text-align:center">n x 2</td><td style="text-align:center">n is the number of data bytes, it depends on function&lt;br/&gt;（n 是数据字节数，它取决于功能码）</td></tr><tr><td style="text-align:center">LRC</td><td style="text-align:center">2</td><td style="text-align:center">Longitudinal redundancy check&lt;br/&gt;（LRC 校验码）</td></tr><tr><td style="text-align:center">End</td><td style="text-align:center">2</td><td style="text-align:center">CR / LF</td></tr></tbody></table><p>注：地址、功能、数据和 LRC 都是表示 8 位值 (0-255) 的<strong>大写</strong>十六进制可读字符对；即：在 Modbus ASCII 中，每个数据字节被分割成表示十六进制值中的两个 ASCII 字符的两个字节。</p><p>在 ASCII 模式下，消息以冒号  <code>:</code>  字符开头（ASCII 表示为 0x3A），以回车换行对  <code>\r\n</code>  （ASCII 表示为 0x0D 和 0x0A）结尾；所有其他字段传输的数据所允许的十六进制表示字符为的  <code>0-9</code> 、 <code>A-F</code> 。</p><table><thead><tr><th style="text-align:center">START</th><th style="text-align:center">ADDRESS</th><th style="text-align:center">FUNCTION</th><th style="text-align:center">DATA</th><th style="text-align:center">LRC CHECK</th><th style="text-align:center">END</th></tr></thead><tbody><tr><td style="text-align:center">1 CHAR&lt;br/&gt;:</td><td style="text-align:center">2 CHARS</td><td style="text-align:center">2 CHARS</td><td style="text-align:center">n CHARS</td><td style="text-align:center">2 CHARS</td><td style="text-align:center">2 CHARS&lt;br/&gt;CRLF</td></tr></tbody></table><p><img data-src="image-20220326235527004.png" alt="image-20220326235527004" /></p><h2 id="功能码"><a class="anchor" href="#功能码">#</a> 功能码</h2><p>ASCII 最常用的功能代码跟 RTU 的功能代码定义是一样的，这里就不多说了，可以去查看 《<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMjM2MDU5MTI=">Modbus 家族之 RTU</span>》篇章的功能码部分，这里只是格式上有所不同而已，<s>下一篇会对这两个原始传输方式进行对比的。</s> 嘛，还是直接合并到本篇，对 RTU 和 ASCII 进行对比分析吧，顺便回顾一下 RTU 协议。</p><table><thead><tr><th style="text-align:center">访问地址：address</th><th style="text-align:center">映射地址</th><th style="text-align:center">描述</th><th style="text-align:center">功能</th><th style="text-align:center">R/W</th></tr></thead><tbody><tr><td style="text-align:center">1 ~ 10000</td><td style="text-align:center">address-1</td><td style="text-align:center">Coils</td><td style="text-align:center">01/05/15</td><td style="text-align:center">R/W</td></tr><tr><td style="text-align:center">10001 ~ 20000</td><td style="text-align:center">address-10001</td><td style="text-align:center">Discrete Inputs</td><td style="text-align:center">02</td><td style="text-align:center">R</td></tr><tr><td style="text-align:center">30001 ~ 40000</td><td style="text-align:center">address-30001</td><td style="text-align:center">Input Registers</td><td style="text-align:center">04</td><td style="text-align:center">R</td></tr><tr><td style="text-align:center">40001 ~ 50000</td><td style="text-align:center">address-40001</td><td style="text-align:center">Holding Registers</td><td style="text-align:center">03/06/16</td><td style="text-align:center">R/W</td></tr></tbody></table><p>在这里，简单的举个 ASCII 传输例子：</p><p>例如，要读取 VAR1，你需要从地址 0x20C1 读取 2 个寄存器，所以你需要发送以下 ASCII 消息：</p><p><code>:010420C1000218&lt;CRLF&gt;</code></p><ul><li><p>请求：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">‘:’</td><td style="text-align:center">Start of message - 0x3A</td></tr><tr><td style="text-align:center">‘0’ ‘1’</td><td style="text-align:center">Node address – 0x01</td></tr><tr><td style="text-align:center">‘0’ ‘4’</td><td style="text-align:center">Function code (Read Input Registers) – 0x04</td></tr><tr><td style="text-align:center">‘2’ ‘0’ ‘C’ ‘1’</td><td style="text-align:center">Register address for reading VAR1 – 0x20C1</td></tr><tr><td style="text-align:center">‘0’ ‘0’ ‘0’ ‘2’</td><td style="text-align:center">Length of registers to be read (must be 2) – 0x0002</td></tr><tr><td style="text-align:center">‘1’ ‘8’</td><td style="text-align:center">LRC</td></tr><tr><td style="text-align:center">&lt;CRLF&gt;</td><td style="text-align:center">End of message, carriage return and line feed – 0x0D0A</td></tr></tbody></table></li></ul><p>此消息的响应如下：</p><p><code>:01040400001234B1&lt;CRLF&gt;</code></p><ul><li><p>响应：</p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">‘:’</td><td style="text-align:center">Start of message - 0x3A</td></tr><tr><td style="text-align:center">‘0’ ‘1’</td><td style="text-align:center">Node address – 0x01</td></tr><tr><td style="text-align:center">‘0’ ‘4’</td><td style="text-align:center">Function code (Read Input Registers) – 0x04</td></tr><tr><td style="text-align:center">‘0’ ‘4’</td><td style="text-align:center">Read data length (4 bytes) – 0x04</td></tr><tr><td style="text-align:center">‘0’ ‘0’ ‘0’ ‘0’ ‘1’ ‘2’ ‘3’ ‘4’</td><td style="text-align:center">Value read from VAR1 – 0x00001234</td></tr><tr><td style="text-align:center">‘B’ ‘1’</td><td style="text-align:center">LRC</td></tr><tr><td style="text-align:center">&lt;CRLF&gt;</td><td style="text-align:center">End of message, carriage return and line feed – 0x0D0A</td></tr></tbody></table></li></ul><p>好了，那么就直入主题吧，常用功能码部分依然是如下几个：</p><h3 id="功能-0101h读线圈"><a class="anchor" href="#功能-0101h读线圈">#</a> 功能 01（01H）读线圈</h3><ul><li><p>请求</p><p>读取从机中线圈的 ON/OFF 状态。不支持广播。请求消息指定了开始线圈和要读取的线圈数量。</p><p>下面是一个请求读取线圈的例子：19 - 55（Coil 20 to 56），37 个线圈，从设备节点 3（注意起始地址是 19 或 0x13，比线圈 20 小 1）：</p><p><img data-src="image-20220327151916968.png" alt="image-20220327151916968" /></p></li><li><p>响应</p><p>线圈状态响应消息被打包为数据字段的每比特表示一个线圈。状态表示为：1 = ON，0 = OFF。第一个数据字节的 LSB 包含请求中寻址的线圈。其他线圈跟随这个字节的高阶末端，并在随后的字节中从低阶到高阶。</p><p>例如，当线圈 20 - 27 的状态显示  <code>ON - ON - OFF - OFF - ON - OFF - ON - OFF - ON - OFF</code>  时，以字节值二进制  <code>0101 0011 (0x53)</code>  表示。一个字节包含八个线圈的状态。如果返回的线圈数量不是 8 的倍数，则最终数据字节中的剩余位将用 0 填充 (朝向字节的高阶末端)；字节计数字段指定数据的完整字节数。</p><blockquote><p>Figure 6 shows an example of a response to the query shown in Figure 5：</p></blockquote><p><img data-src="image-20220327152253123.png" alt="image-20220327152253123" /></p></li></ul><h3 id="功能-0202h读离散输入"><a class="anchor" href="#功能-0202h读离散输入">#</a> 功能 02（02H）读离散输入</h3><ul><li><p>请求</p><p>读取从机中离散输入的 ON/OFF 状态。不支持广播。请求消息指定起始输入和要读取的输入数量。</p><p>下面是一个从从设备节点 3 读取离散输入 10101 - 10120，总共 20 个输入的例子（注意起始地址是 100 或 0x64，比输入 10101 小 10001）：</p><p><img data-src="image-20220327155421391.png" alt="image-20220327155421391" /></p></li><li><p>响应</p><p>离散输入状态响应消息的构造与线圈状态 (01H) 操作相同。</p><blockquote><p>Figure 8 shows an example of a response to the query shown in Figure 7：</p></blockquote><p><img data-src="image-20220327155851480.png" alt="image-20220327155851480" /></p></li></ul><h3 id="功能-0303h读保持寄存器"><a class="anchor" href="#功能-0303h读保持寄存器">#</a> 功能 03（03H）读保持寄存器</h3><ul><li><p>请求</p><p>读取从机中保持寄存器的二进制内容。不支持广播。请求消息指定起始寄存器和要读取的寄存器数量。</p><p>下面是一个从从设备节点 7 读取保持寄存器 40201 - 40203，总共 3 个寄存器的请求的例子（注意起始地址是 200 或 0xC8，比寄存器 40201 小 40001）：</p><p><img data-src="image-20220327160332698.png" alt="image-20220327160332698" /></p></li><li><p>响应</p><p>响应消息中的保持寄存器数据在每个寄存器中打包为两个字节，二进制内容在每个字节中右对齐；对于每个寄存器，第一个字节包含高阶位，第二个字节包含低阶位。</p><blockquote><p>Figure 10 shows an example of a response to the query shown in Figure 9：</p></blockquote><p><img data-src="image-20220327160607639.png" alt="image-20220327160607639" /></p></li></ul><h3 id="功能-0404h读输入寄存器"><a class="anchor" href="#功能-0404h读输入寄存器">#</a> 功能 04（04H）读输入寄存器</h3><ul><li><p>请求</p><p>读取从机中保持寄存器的二进制内容。不支持广播。请求消息指定起始寄存器和要读取的寄存器数量。</p><p>下面是一个从从设备节点 7 读取输入寄存器 30301 - 30303，总共 3 个寄存器的请求的例子（注意起始地址是 300 或 0x12C，比寄存器 30301 小 30001）：</p><p><img data-src="image-20220327171629490.png" alt="image-20220327171629490" /></p></li><li><p>响应</p><p>读输入寄存器数据的响应消息的构造与读取保持寄存器 (03H) 操作相同。</p><blockquote><p>Figure 12 shows an example of a response to the query shown in Figure 11：</p></blockquote><p><img data-src="image-20220327171942458.png" alt="image-20220327171942458" /></p></li></ul><h3 id="功能-0505h写单线圈"><a class="anchor" href="#功能-0505h写单线圈">#</a> 功能 05（05H）写单线圈</h3><ul><li><p>请求</p><p>将单个线圈写入 ON 或 OFF。当广播时，该函数强制所有附加的从机使用相同的线圈引用。请求消息指定要写入的线圈引用（启动线圈和状态）。</p><p><code>FF 00</code>  的值要求线圈打开，值为  <code>00 00</code>  的请求为关闭，所有其他值都是非法的，不会影响线圈。</p><p>下面是一个在从设备节点 3 中请求打开线圈 150 的例子（注意起始地址是 149 或 0x95，比线圈 150 小 1）：</p><p><img data-src="image-20220327172937327.png" alt="image-20220327172937327" /></p></li><li><p>响应</p><p>正常的响应是请求的回显，在写入线圈状态之后返回。</p><blockquote><p>Figure 14 shows an example of a response to the query shown in Figure 13：</p></blockquote><p><img data-src="image-20220327173100544.png" alt="image-20220327173100544" /></p></li></ul><h3 id="功能-0606h写单个保持寄存器"><a class="anchor" href="#功能-0606h写单个保持寄存器">#</a> 功能 06（06H）写单个保持寄存器</h3><ul><li><p>请求</p><p>将一个值写入单个保持寄存器中。当广播时，该函数在所有附加的从机上设置相同的寄存器引用。请求消息指定要写入的寄存器引用（指定地址和数值）。</p><p>下面是一个请求从从设备节点 3 中的保持寄存器 40150 写入 1000 数值的例子（注意起始地址为 149 或 0x95，比寄存器 40150 小 40001）：</p><p><img data-src="image-20220327175033869.png" alt="image-20220327175033869" /></p></li><li><p>响应</p><p>正常的响应是请求的回显，在写入保持寄存器内容之后返回。</p><blockquote><p>Figure 16 shows an example of a response to the query shown in Figure 15：</p></blockquote><p><img data-src="image-20220327175344005.png" alt="image-20220327175344005" /></p></li></ul><h3 id="功能-150fh写多个线圈"><a class="anchor" href="#功能-150fh写多个线圈">#</a> 功能 15（0FH）写多个线圈</h3><ul><li><p>请求</p><p>将一个线圈序列中的每个线圈写入 ON 或 OFF。当广播时，该函数强制所有附加的从机使用相同的线圈引用。请求消息指定要写入的线圈引用（起始线圈和状态）。</p><p>下面的示例显示了从设备节点 5 中的线圈 20 开始写入一系列 10 个线圈状态的请求。二进制位与线圈的对应方式如下（注意起始地址是 19 或 0x13，比线圈 20 小 1）：</p><table><thead><tr><th>Bit</th><th>1</th><th>1</th><th>0</th><th>1</th><th>0</th><th>0</th><th>0</th><th>1</th><th>0</th><th>0</th><th>0</th><th>0</th><th>0</th><th>1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>Coil</td><td>27</td><td>26</td><td>25</td><td>24</td><td>23</td><td>22</td><td>21</td><td>20</td><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td><td>30</td><td>29</td><td>28</td></tr></tbody></table><p><img data-src="image-20220327182406708.png" alt="image-20220327182406708" /></p></li><li><p>响应</p><p>正常响应返回从地址、功能代码、起始地址和写入的线圈数量，不包括字节数和对应写入的状态。</p><blockquote><p>Figure 24 shows an example of a response to the query shown in Figure 23：</p></blockquote><p><img data-src="image-20220327182618637.png" alt="image-20220327182618637" /></p></li></ul><h3 id="功能-1610h写多个保持寄存器"><a class="anchor" href="#功能-1610h写多个保持寄存器">#</a> 功能 16（10H）写多个保持寄存器</h3><ul><li><p>请求</p><p>将值写入到一个保持寄存器序列中。当广播时，该函数在所有附加的从机上设置相同的寄存器引用。请求消息指定要写入的寄存器引用（起始寄存器和数值）。</p><p>下面是一个请求从从设备节点 5 中的保持寄存器 40020 到 40022 写入以下数据的示例（注意起始地址是 19 或 0x13，比寄存器 40020 小 40001）：</p><table><thead><tr><th>address</th><th>data</th></tr></thead><tbody><tr><td>40020</td><td>0x0164</td></tr><tr><td>40021</td><td>0x0165</td></tr><tr><td>40022</td><td>0x0166</td></tr></tbody></table><p><img data-src="image-20220327184941057.png" alt="image-20220327184941057" /></p></li><li><p>响应</p><p>正常响应返回从地址、功能代码、起始地址和写入的寄存器数量，不包括字节数和对应写入的数据。</p><blockquote><p>Figure 26 shows an example of a response to the query shown in Figure 25：</p></blockquote><p><img data-src="image-20220327185223421.png" alt="image-20220327185223421" /></p></li></ul><h2 id="lrc校验"><a class="anchor" href="#lrc校验">#</a> LRC 校验</h2><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">char</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">ucMBLRC</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> pucFrame<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> usLen <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> ucLRC <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">/* LRC char initialized */</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span> usLen<span class="token operator">--</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        ucLRC <span class="token operator">+=</span> <span class="token operator">*</span>pucFrame<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">/* Add buffer byte without carry */</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment">/* Return twos complement */</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    ucLRC <span class="token operator">=</span> <span class="token punctuation">(</span> UCHAR <span class="token punctuation">)</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> CHAR <span class="token punctuation">)</span> ucLRC <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> ucLRC<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>校验原理可看 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=">常用校验算法</span> - LRC 章节</p>]]></content>
      
      
      <categories>
          
          <category> 传输协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> modbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modbus家族之 RTU</title>
      <link href="//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%20RTU/"/>
      <url>//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%20RTU/</url>
      
        <content type="html"><![CDATA[<blockquote><p>您好啊，我是 Modbus 家族成员的 RTU，同时期诞生的还有我的兄弟，它就是 ASCII。本篇呢就来让大家熟悉一下我吧，下一篇则由我兄弟 ASCII 进行介绍。好了，废话不多说，接下来就带你们来认识一下我吧。</p></blockquote><h1 id="描述"><a class="anchor" href="#描述">#</a> 描述</h1><p>Modbus RTU（远程终端单元）是原始 Modbus 规范中定义的两种传输模式之一。 这两种模式是 Modbus RTU 和 ASCII，它们被设计用于支持 RS232，RS485 和 RS422 接口的串行设备。 Modbus RTU 的一个显着特点是它使用二进制编码和强大的 CRC 错误检查。 Modbus RTU 是 Modbus 协议的实现，最常用于工业应用和自动化生产设施。嘻嘻，我可是很受工业场景应用的哦。</p><h1 id="通讯方式"><a class="anchor" href="#通讯方式">#</a> 通讯方式</h1><h2 id="帧格式"><a class="anchor" href="#帧格式">#</a> 帧格式</h2><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Length (bytes)</th><th style="text-align:center">Description</th></tr></thead><tbody><tr><td style="text-align:center">Address</td><td style="text-align:center">1</td><td style="text-align:center">Node address（节点地址）</td></tr><tr><td style="text-align:center">Function</td><td style="text-align:center">1</td><td style="text-align:center">Function code（功能代码）</td></tr><tr><td style="text-align:center">Data</td><td style="text-align:center">n</td><td style="text-align:center">n is the number of data bytes, it depends on function&lt;br/&gt;（n 是数据字节数，它取决于功能码）</td></tr><tr><td style="text-align:center">CRC</td><td style="text-align:center">2</td><td style="text-align:center">Cyclic redundancy check&lt;br/&gt;（CRC 校验码）</td></tr></tbody></table><p>在 RTU 模式下，消息以至少 3.5 个字符的静默间隔为开始，以至少 3.5 个字符的类似间隔结束。这是最容易实现的以波特率在网络上使用的字符次数的倍数 (如下图中所示的 T1 - T2 - T3 - T4)。</p><table><thead><tr><th>START</th><th>ADDRESS</th><th>FUNCTION</th><th>DATA</th><th>CRC CHECK</th><th>END</th></tr></thead><tbody><tr><td><strong>*T1–T2–T3–T4</strong></td><td>8 BITS</td><td>8 BITS</td><td>n x 8 BITS</td><td>16 BITS</td><td><strong>*T1–T2–T3–T4</strong></td></tr></tbody></table><p><strong>*T1-T2-T3-T4</strong>：表示不通信时的 3.5 个字符。</p><p>所有其他字段都由 8 位数据组成。</p><p><img data-src="image-20220319201759692.png" alt="image-20220319201759692" /></p><h2 id="功能码"><a class="anchor" href="#功能码">#</a> 功能码</h2><p>Modbus 设备最常用的功能代码如下表所示：</p><p><img data-src="image-20220319195917761.png" alt="image-20220319195917761" /></p><h3 id="功能-0101h读线圈"><a class="anchor" href="#功能-0101h读线圈">#</a> 功能 01（01H）读线圈</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x01</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>线圈数量</td><td>2 字节</td><td>1 to 2000 (0x7D0)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 起始地址（2byte）+ 线圈数（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x01</strong></td></tr><tr><td>线圈数量对应的字节数</td><td>1 字节</td><td><strong>*N</strong></td></tr><tr><td>线圈数据 1</td><td>1 字节</td><td></td></tr><tr><td>线圈数据 2</td><td>1 字节</td><td></td></tr><tr><td>线圈数据 n</td><td>1 字节</td><td>n = N or N+1</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p><strong>*N</strong> = 线圈数量 / 8，如果余数非 0，则 N = N+1</p><p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 字节数（1byte）+ 线圈状态（Nbyte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x81</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319211327513.png" alt="image-20220319211327513" /></p><h3 id="功能-0202h读离散输入"><a class="anchor" href="#功能-0202h读离散输入">#</a> 功能 02（02H）读离散输入</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x02</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>离散状态数量</td><td>2 字节</td><td>1 to 2000 (0x7D0)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x02</strong>（1byte）+ 起始地址（2byte）+ 离散数（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x02</strong></td></tr><tr><td>离散状态数量对应的字节数</td><td>1 字节</td><td><strong>*N</strong></td></tr><tr><td>离散数据 1</td><td>1 字节</td><td></td></tr><tr><td>离散数据 2</td><td>1 字节</td><td></td></tr><tr><td>离散数据 n</td><td>1 字节</td><td>n = N or N+1</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p><strong>*N</strong> = 离散状态数量 / 8，如果余数非 0，则 N = N+1</p><p>指令：设备地址（1byte）+ <strong>0x01</strong>（1byte）+ 字节数（1byte）+ 离散状态（Nbyte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x82</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319212623922.png" alt="image-20220319212623922" /></p><h3 id="功能-0303h读保持寄存器"><a class="anchor" href="#功能-0303h读保持寄存器">#</a> 功能 03（03H）读保持寄存器</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x03</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>保持寄存器数量</td><td>2 字节</td><td>1 to 125 (0x7D)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x03</strong>（1byte）+ 起始地址（2byte）+ 保持寄存器数（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x03</strong></td></tr><tr><td>保持寄存器数量对应的字节数</td><td>1 字节</td><td>2 * N</td></tr><tr><td>寄存器数值 1</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 2</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 n</td><td>2 字节</td><td>n = N</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x03</strong>（1byte）+ 字节数（1byte）+ 保持寄存器值（2 * Nbyte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x83</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319213419588.png" alt="image-20220319213419588" /></p><h3 id="功能-0404h读输入寄存器"><a class="anchor" href="#功能-0404h读输入寄存器">#</a> 功能 04（04H）读输入寄存器</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x04</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>输入寄存器数量</td><td>2 字节</td><td>1 to 125 (0x7D)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x04</strong>（1byte）+ 起始地址（2byte）+ 输入寄存器数（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x04</strong></td></tr><tr><td>保持寄存器数量对应的字节数</td><td>1 字节</td><td>2 * N</td></tr><tr><td>寄存器数值 1</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 2</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 n</td><td>2 字节</td><td>n = N</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x04</strong>（1byte）+ 字节数（1byte）+ 输入寄存器值（2 * Nbyte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x84</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319214513539.png" alt="image-20220319214513539" /></p><h3 id="功能-0505h写单线圈"><a class="anchor" href="#功能-0505h写单线圈">#</a> 功能 05（05H）写单线圈</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x05</strong></td></tr><tr><td>输出地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td><strong>* 线圈数值</strong></td><td>2 字节</td><td>0x0000 or 0xFF00</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>*<strong> 线圈数值</strong> ：0xFF00 -&gt; 请求线圈状态为 ON</p><p>​0x0000 -&gt; 请求线圈状态为 OFF</p><p>​其他值 -&gt; 非法且对线圈不起作用</p><p>指令：设备地址（1byte）+ <strong>0x05</strong>（1byte）+ 输出地址（2byte）+ 线圈值（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x05</strong></td></tr><tr><td>输出地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>线圈数值</td><td>2 字节</td><td>0x0000 or 0xFF00</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：正常响应是请求的应答</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x85</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319215633462.png" alt="image-20220319215633462" /></p><h3 id="功能-0606h写单个保持寄存器"><a class="anchor" href="#功能-0606h写单个保持寄存器">#</a> 功能 06（06H）写单个保持寄存器</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x06</strong></td></tr><tr><td>寄存器地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>寄存器数值</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x06</strong>（1byte）+ 保持寄存器地址（2byte）+ 保持寄存器值（2byte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x06</strong></td></tr><tr><td>寄存器地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>寄存器数值</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：正常响应是请求的应答</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x86</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319220604204.png" alt="image-20220319220604204" /></p><h3 id="功能-150fh写多个线圈"><a class="anchor" href="#功能-150fh写多个线圈">#</a> 功能 15（0FH）写多个线圈</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x0F</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>线圈输出数量</td><td>2 字节</td><td>1 to 1968 (0x7B0)</td></tr><tr><td>线圈数量对应的字节数</td><td>1 字节</td><td><strong>*N</strong></td></tr><tr><td>线圈输出数据 1</td><td>1 字节</td><td></td></tr><tr><td>线圈输出数据 2</td><td>1 字节</td><td></td></tr><tr><td>线圈输出数据 n</td><td>1 字节</td><td>n = N or N+1</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p><strong>*N</strong> = 线圈输出数量 / 8，如果余数非 0，则 N = N+1</p><p>指令：设备地址（1byte）+ <strong>0x0F</strong>（1byte）+ 起始地址（2byte）+ 线圈输出数（2byte）+ 字节数（1byte）+ 线圈输出数据（Nbyte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x0F</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>线圈输出数量</td><td>2 字节</td><td>1 to 1968 (0x7B0)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x0F</strong>（1byte）+ 起始地址（2byte）+ 线圈输出数（2byte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x8F</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319223636555.png" alt="image-20220319223636555" /></p><h3 id="功能-1610h写多个保持寄存器"><a class="anchor" href="#功能-1610h写多个保持寄存器">#</a> 功能 16（10H）写多个保持寄存器</h3><ul><li><p>请求：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x10</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>寄存器数量</td><td>2 字节</td><td>1 to 123 (0x7B)</td></tr><tr><td>寄存器数量对应的字节数</td><td>1 字节</td><td>2 * N</td></tr><tr><td>寄存器数值 1</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 2</td><td>2 字节</td><td></td></tr><tr><td>寄存器数值 n</td><td>2 字节</td><td>n = N</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x10</strong>（1byte）+ 起始地址（2byte）+ 寄存器数（2byte）+ 字节数（1byte）+ 寄存器数值（2 * Nbyte）+ CRC（2byte）</p></li><li><p>应答：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x10</strong></td></tr><tr><td>开始地址</td><td>2 字节</td><td>0x0000 to 0xFFFF</td></tr><tr><td>寄存器数量</td><td>2 字节</td><td>1 to 123 (0x7B)</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table><p>指令：设备地址（1byte）+ <strong>0x10</strong>（1byte）+ 起始地址（2byte）+ 保持寄存器数（2byte）+ CRC（2byte）</p></li><li><p>错误返回：</p><table><thead><tr><th>名称</th><th>长度</th><th>说明</th></tr></thead><tbody><tr><td>设备地址</td><td>1 字节</td><td></td></tr><tr><td>功能码</td><td>1 字节</td><td><strong>0x90</strong></td></tr><tr><td>错误码</td><td>1 字节</td><td>01 or 02 or 03 or 04</td></tr><tr><td>CRC 校验码</td><td>2 字节</td><td></td></tr></tbody></table></li></ul><p><strong>流程图：</strong></p><p><img data-src="image-20220319224924985.png" alt="image-20220319224924985" /></p><h2 id="crc校验"><a class="anchor" href="#crc校验">#</a> CRC 校验</h2><ul><li><p>CRC16_MODBUS 查表法：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> aucCRCHi<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x40</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> aucCRCLo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> </pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x40</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre></pre></td></tr><tr><td data-num="51"></td><td><pre><span class="token keyword">unsigned</span> <span class="token keyword">short</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token function">usMBCRC16</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span> pucFrame<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> usLen <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="54"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   ucCRCHi <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="55"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span>   ucCRCLo <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="56"></td><td><pre>    <span class="token keyword">int</span>             iIndex<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre>    <span class="token keyword">while</span><span class="token punctuation">(</span> usLen<span class="token operator">--</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>        iIndex <span class="token operator">=</span> ucCRCLo <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span> pucFrame<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>        ucCRCLo <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> ucCRCHi <span class="token operator">^</span> aucCRCHi<span class="token punctuation">[</span>iIndex<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>        ucCRCHi <span class="token operator">=</span> aucCRCLo<span class="token punctuation">[</span>iIndex<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    <span class="token keyword">return</span> <span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">short</span> <span class="token punctuation">)</span><span class="token punctuation">(</span> ucCRCHi <span class="token operator">&lt;&lt;</span> <span class="token number">8</span> <span class="token operator">|</span> ucCRCLo <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>CRC16_MODBUS 运算法：</p><p>运算分析及计算，可看文章 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMTY0NjYwMjk=">常用校验算法</span> - CRC 章节</p></li></ul><h1 id="实例应用"><a class="anchor" href="#实例应用">#</a> 实例应用</h1><p>测试应用可看以前的文章：</p><p><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDc1OTA4MDM=">Nano130 之 FreeModbus 移植</span></p>]]></content>
      
      
      <categories>
          
          <category> 传输协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> modbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RT-Thread 应用总结</title>
      <link href="//docs/RTOS/RT-Thread%20%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>//docs/RTOS/RT-Thread%20%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>官方文档介绍：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvcnQtdGhyZWFkLXZlcnNpb24vcnQtdGhyZWFkLXN0YW5kYXJkL1JFQURNRQ==">RT-Thread 文档中心</span></p><h1 id="各模块-api接口"><a class="anchor" href="#各模块-api接口">#</a> 各模块 API 接口</h1><p>由于 RT-Thread 实时操作系统跟各大类 RTOS 应用原理大致相同，因此不再详述各模块功能的作用了（各模块功能的详细信息可参考以前的 《<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2NhdGVnb3J5Xzk2ODQyNTQuaHRtbA==">FreeRTOS 专栏</span>》），只总结各类功能接口的 API 调用函数。</p><p>官方 API 参考手册：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9hcGkvaW5kZXguaHRtbA==">RT-Thread API 参考手册</span></p><p><img data-src="04thread_sta.png" alt="" /></p><h2 id="线程管理"><a class="anchor" href="#线程管理">#</a> 线程管理</h2><h3 id="a-线程使用"><a class="anchor" href="#a-线程使用">#</a> A、线程使用</h3><p><img data-src="04thread_ops.png" alt="线程相关操作" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建线程</td><td>rt_thread_t rt_thread_create(const char *name, void (*entry)(void *parameter), void *parameter, rt_uint32_t stack_size, rt_uint8_t priority, rt_uint32_t tick);</td><td>该函数将<strong>从动态堆内存中</strong>创建一个线程对象并分配线程对象内存和堆栈。</td><td>xTaskCreate()</td></tr><tr><td>删除线程</td><td>rt_err_t rt_thread_delete(rt_thread_t thread);</td><td>调用该函数后，线程对象将会被移出线程队列并且从内核对象管理器中删除，线程占用的堆栈空间也会被释放，收回的空间将重新用于其他的内存分配。</td><td>vTaskDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始线程</td><td>rt_err_t rt_thread_init(struct rt_thread *thread, const char *name, void (*entry)(void *parameter),  void *parameter, void *stack_start,  rt_uint32_t stack_size, rt_uint8_t priority,  rt_uint32_t tick);</td><td>使用该函数创建的线程，线程句柄 (或者说线程控制块指针) 、线程栈所占用的内存空间，均通过全局变量的方式进行分配，内核不负责动态分配内存空间（即由用户提供，<strong>属于静态分配</strong>，在编译时就被确定、被分配处理）。</td><td>xTaskCreateStatic()</td></tr><tr><td>脱离线程</td><td>rt_err_t rt_thread_detach (rt_thread_t thread);</td><td>与 rt_thread_delete () 函数相对应，使线程对象在线程队列和内核对象管理器中被脱离。注：线程本身不应调用这个接口脱离线程本身</td><td>vTaskDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>启动线程</td><td>rt_err_t rt_thread_startup(rt_thread_t thread);</td><td>当调用这个函数时，将把线程的状态更改为就绪状态，并放到相应优先级队列中等待调度。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>线程睡眠</td><td>rt_err_t rt_thread_sleep(rt_tick_t tick); rt_err_t rt_thread_delay(rt_tick_t tick); rt_err_t rt_thread_mdelay(rt_int32_t ms);</td><td>这三个函数接口的作用相同，调用它们可以使当前线程挂起一段指定的时间，当这个时间过后，线程会被唤醒并再次进入就绪状态。</td><td>vTaskDelay()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzNjA5NjI=">FreeRTOS 篇章之任务管理</span></p><h3 id="b-挂起和恢复"><a class="anchor" href="#b-挂起和恢复">#</a> B、挂起和恢复</h3><ul class="task-list"><li><p><strong>线程挂起的函数接口：</strong></p><p><code>rt_err_t rt_thread_suspend (rt_thread_t thread);</code></p><p>线程挂起接口 rt_thread_suspend () 的参数和返回值见下表：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>thread</td><td>线程句柄</td></tr><tr><td><strong>返回</strong></td><td>——</td></tr><tr><td>RT_EOK</td><td>线程挂起成功</td></tr><tr><td>RT_ERROR</td><td>线程挂起失败，因为该线程的状态并不是就绪状态</td></tr></tbody></table></li><li class="task-list-item"><p><input type="checkbox" id="cbx_0" disabled="true" /><label for="cbx_0"> 注：RT-Thread 对此此函数有严格的使用限制，该函数只能使用来挂起当前线程（即自己挂起自己），不可以在线程 A 中尝试挂起线程 B，而且在挂起线程自己后，需要立刻调用  <code>rt_schedule()</code>  函数进行手动的线程上下文切换。用户只需要了解该接口的作用即可，强烈不建议在程序中使用该接口，该接口可以视为是内部接口。这是因为 A 线程在尝试挂起 B 线程时，A 线程并不清楚 B 线程正在运行什么程序，一旦 B 线程正在使用例如互斥量、信号量等影响、阻塞其他线程的内核对象，那么 A 线程尝试挂起 B 线程的操作将会引发连锁反应，严重危及系统的实时性（有些地方会将其描述为死锁，实际上这种现象不是死锁，但是也不比死锁好到哪去）。</label></p></li><li><p><strong>线程恢复的函数接口：</strong></p><p><code>rt_err_t rt_thread_resume (rt_thread_t thread);</code></p><p>线程恢复接口 rt_thread_resume () 的参数和返回值见下表：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>thread</td><td>线程句柄</td></tr><tr><td><strong>返回</strong></td><td>——</td></tr><tr><td>RT_EOK</td><td>线程恢复成功</td></tr><tr><td>RT_ERROR</td><td>线程恢复失败，因为该个线程的状态并不是 RT_THREAD_SUSPEND 状态</td></tr></tbody></table></li></ul><p>以上这两个函数类似于 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0OTg1NTg=">FreeRTOS 篇章之临界区与调度器</span> 里面的调度器中的操作，但其要求并不一样。</p><h2 id="信号量"><a class="anchor" href="#信号量">#</a> 信号量</h2><p><img data-src="06sem_ops.png" alt="信号量相关接口" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建信号量</td><td>rt_sem_t rt_sem_create(const char *name, rt_uint32_t value, rt_uint8_t flag);</td><td>系统<strong>动态分配</strong>一个 semaphore 对象，并初始化这个对象，然后初始化父类 IPC 对象以及与 semaphore 相关的部分。</td><td>xSemaphoreCreateBinary()</td></tr><tr><td>删除信号量</td><td>rt_err_t rt_sem_delete(rt_sem_t sem);</td><td>通过删除信号量以释放系统资源，适用于动态创建的信号量。</td><td>vSemaphoreDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始信号量</td><td>rt_err_t rt_sem_init(rt_sem_t sem, const char *name, rt_uint32_t value, rt_uint8_t flag);</td><td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td><td>xSemaphoreCreateBinaryStatic()</td></tr><tr><td>脱离信号量</td><td>rt_err_t rt_sem_detach(rt_sem_t sem);</td><td>让信号量对象从内核对象管理器中脱离，适用于静态初始化的信号量。</td><td>vSemaphoreDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>获取信号量</td><td>rt_err_t rt_sem_take (rt_sem_t sem, rt_int32_t time);</td><td>通过获取信号量来获得信号量资源实例，当信号量值大于零时，线程将获得信号量，并且相应的信号量值会减 1。</td><td>xSemaphoreTake() / xSemaphoreTakeFromISR()</td></tr><tr><td>无等待获取信号量</td><td>rt_err_t rt_sem_trytake(rt_sem_t sem);</td><td>与  <code>rt_sem_take(sem, RT_WAITING_NO)</code>  的作用相同，即当线程申请的信号量资源实例不可用的时候，它不会等待在该信号量上，而是直接返回 -  <code>RT_ETIMEOUT</code> 。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>释放信号量</td><td>rt_err_t rt_sem_release(rt_sem_t sem);</td><td>释放之前所获得的信号量资源实例。</td><td>xSemaphoreGive() / xSemaphoreGiveFromISR()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0MTI2NTk=">FreeRTOS 篇章之二值信号量</span></p><h2 id="互斥量"><a class="anchor" href="#互斥量">#</a> 互斥量</h2><p><img data-src="06mutex_ops.png" alt="互斥量相关接口" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建互斥量</td><td>rt_mutex_t rt_mutex_create (const char *name, rt_uint8_t flag);</td><td>系统将先从对象管理器中<strong>动态分配</strong>一个 mutex 对象，并初始化这个对象，然后初始化父类 IPC 对象以及与 mutex 相关的部分。</td><td>xSemaphoreCreateMutex()</td></tr><tr><td>删除互斥量</td><td>rt_err_t rt_mutex_delete (rt_mutex_t mutex);</td><td>通过删除互斥量以释放系统资源，适用于动态创建的互斥量。</td><td>vSemaphoreDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始互斥量</td><td>rt_err_t rt_mutex_init (rt_mutex_t mutex, const char *name, rt_uint8_t flag);</td><td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td><td>xSemaphoreCreateMutexStatic()</td></tr><tr><td>脱离互斥量</td><td>rt_err_t rt_mutex_detach (rt_mutex_t mutex);</td><td>把互斥量对象从内核对象管理器中脱离，适用于静态初始化的互斥量。</td><td>vSemaphoreDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>获取互斥量</td><td>rt_err_t rt_mutex_take (rt_mutex_t mutex, rt_int32_t time);</td><td>当线程获取了互斥量，那么线程就有了对该互斥量的所有权，即某一个时刻一个互斥量只能被一个线程持有。</td><td>xSemaphoreTake()</td></tr><tr><td>无等待获取互斥量</td><td>rt_err_t rt_mutex_trytake(rt_mutex_t mutex);</td><td>与  <code>rt_mutex_take(mutex, RT_WAITING_NO)</code>  的作用相同，即当线程申请的互斥量资源实例不可用的时候，它不会等待在该互斥量上，而是直接返回 -  <code>RT_ETIMEOUT</code> 。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>释放互斥量</td><td>rt_err_t rt_mutex_release(rt_mutex_t mutex);</td><td>使用该函数接口时，只有已经拥有互斥量控制权的线程才能释放它，每释放一次该互斥量，它的持有计数就减 1。</td><td>xSemaphoreGive()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0NzkwNjk=">FreeRTOS 篇章之互斥量</span></p><h2 id="事件集"><a class="anchor" href="#事件集">#</a> 事件集</h2><p><img data-src="06event_ops.png" alt="事件相关接口" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建事件集</td><td>rt_event_t rt_event_create(const char *name, rt_uint8_t flag);</td><td>系统从对象管理器中<strong>动态分配</strong>事件集对象，并初始化这个对象，然后初始化父类 IPC 对象。</td><td>xEventGroupCreate()</td></tr><tr><td>删除事件集</td><td>rt_err_t rt_event_delete(rt_event_t event);</td><td>通过删除事件集对象控制块来释放系统资源，适用于动态创建的事件集。</td><td>vEventGroupDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始事件集</td><td>rt_err_t rt_event_init(rt_event_t event, const char *name, rt_uint8_t flag);</td><td><strong>属于静态分配</strong>，它的内存空间在编译时期就被编译器分配出来，放在读写数据段或未初始化数据段上。</td><td>xEventGroupCreateStatic()</td></tr><tr><td>脱离事件集</td><td>rt_err_t rt_event_detach(rt_event_t event);</td><td>将该事件集从内核对象管理器中脱离，适用于静态初始化的事件集。</td><td>vEventGroupDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>发送事件</td><td>rt_err_t rt_event_send(rt_event_t event, rt_uint32_t set);</td><td>通过参数 set 指定的事件标志来设定 event 事件集对象的事件标志值，然后遍历等待在 event 事件集对象上的等待线程链表，判断是否有线程的事件激活要求与当前 event 对象事件标志值匹配，如果有，则唤醒该线程。</td><td>xEventGroupSetBits() / xEventGroupSetBitsFromISR()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>接收事件</td><td>rt_err_t rt_event_recv(rt_event_t event, rt_uint32_t set, rt_uint8_t option, rt_int32_t timeout, rt_uint32_t *recved);</td><td>系统首先根据 set 参数和接收选项 option 来判断它要接收的事件是否发生，如果已经发生，则根据参数 option 上是否设置有  <code>RT_EVENT_FLAG_CLEAR</code>  来决定是否重置事件的相应标志位，然后返回（其中 recved 参数返回接收到的事件）；如果没有发生，则把等待的 set 和 option 参数填入线程本身的结构中，然后把线程挂起在此事件上，直到其等待的事件满足条件或等待时间超过指定的超时时间。如果超时时间设置为零，则表示当线程要接受的事件没有满足其要求时就不等待，而直接返回 -  <code>RT_ETIMEOUT</code> 。</td><td>xEventGroupWaitBits()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ2MDIyNzQ=">FreeRTOS 篇章之事件位和事件组</span></p><h2 id="邮箱"><a class="anchor" href="#邮箱">#</a> 邮箱</h2><p><img data-src="07mb_ops.png" alt="邮箱相关接口" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建邮箱</td><td>rt_mailbox_t rt_mb_create (const char *name, rt_size_t size, rt_uint8_t flag);</td><td>创建邮箱对象时会先从对象管理器中分配一个邮箱对象，然后给邮箱<strong>动态分配一块内存空间</strong>用来存放邮件，这块内存的大小等于邮件大小（4 字节）与邮箱容量的乘积，接着初始化接收邮件数目和发送邮件在邮箱中的偏移量。</td><td>xQueueCreate()</td></tr><tr><td>删除邮箱</td><td>rt_err_t rt_mb_delete (rt_mailbox_t mb);</td><td>释放相应的系统资源，当操作一旦完成，邮箱将被永久性的删除。</td><td>vQueueDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始邮箱</td><td>rt_err_t rt_mb_init(rt_mailbox_t mb, const char *name, void *msgpool, rt_size_t size, rt_uint8_t flag);</td><td><strong>属于静态分配</strong>，与创建邮箱不同的是，静态邮箱对象的内存是在系统编译时由编译器分配的，一般放于读写数据段或未初始化数据段中，其余的初始化工作与创建邮箱时相同。</td><td>xQueueCreateStatic()</td></tr><tr><td>脱离邮箱</td><td>rt_err_t rt_mb_detach(rt_mailbox_t mb);</td><td>把静态初始化的邮箱对象从内核对象管理器中脱离。</td><td>vQueueDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>发送邮件</td><td>rt_err_t rt_mb_send (rt_mailbox_t mb, rt_uint32_t value);</td><td>发送的邮件可以是 32 位任意格式的数据，一个整型值或者一个指向缓冲区的指针；当邮箱中的邮件已经满时，发送邮件的线程或者中断程序会收到 - <code>RT_EFULL</code>  的返回值。</td><td>xQueueOverwrite() / xQueueOverwriteFromISR()</td></tr><tr><td>等待方式发送邮件</td><td>rt_err_t rt_mb_send_wait (rt_mailbox_t mb, rt_uint32_t value, rt_int32_t timeout);</td><td>与 rt_mb_send () 的区别在于有等待时间，如果邮箱已经满了，那么发送线程将根据设定的 timeout 参数等待邮箱中因为收取邮件而空出空间；如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。</td><td></td></tr><tr><td>发送紧急邮件</td><td>rt_err_t rt_mb_urgent (rt_mailbox_t mb, rt_ubase_t value);</td><td>与发送邮件几乎一样，唯一的不同是，当发送紧急邮件时，邮件被<strong>直接插队放入了邮件队首</strong>，这样，接收者就能够优先接收到紧急邮件，从而及时进行处理。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>接收邮件</td><td>rt_err_t rt_mb_recv (rt_mailbox_t mb, rt_uint32_t *value, rt_int32_t timeout);</td><td>只有当接收者接收的邮箱中有邮件时，接收者才能立即取到邮件并返回  <code>RT_EOK</code>  的返回值，否则接收线程会根据超时时间设置，或挂起在邮箱的等待线程队列上，或直接返回。</td><td>xQueueReceive() / xQueueReceiveFromISR()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzOTk1MzE=">FreeRTOS 篇章之队列管理</span> 中的消息数目为 1 的队列</p><p>注：由于 FreeRTOS 中并没有邮箱这一概念（邮箱这概念在 uCOS 中有），但是其原理类似于利用队列发送单一数目的信息，由于在 32 系统上 4 字节（32 bit）的内容恰好可以放置一个指针，因此该信息通常为<strong>数据指针</strong>。</p><h2 id="消息队列"><a class="anchor" href="#消息队列">#</a> 消息队列</h2><p><img data-src="07msg_ops.png" alt="消息队列相关接口" /></p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>创建队列</td><td>rt_mq_t rt_mq_create(const char *name, rt_size_t msg_size, rt_size_t max_msgs, rt_uint8_t flag);</td><td>从对象管理器中<strong>动态分配</strong>一个消息队列对象，然后给消息队列对象分配一块内存空间，组织成空闲消息链表，这块 <code>内存的大小 = [消息大小 + 消息头（用于链表连接）的大小] x 消息队列最大个数</code> ，接着再初始化消息队列，此时消息队列为空。</td><td>xQueueCreate()</td></tr><tr><td>删除队列</td><td>rt_err_t rt_mq_delete(rt_mq_t mq);</td><td>删除它以释放系统资源，一旦操作完成，消息队列将被永久性地删除。</td><td>vQueueDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>初始队列</td><td>rt_err_t rt_mq_init(rt_mq_t mq, const char *name, void *msgpool, rt_size_t msg_size, rt_size_t pool_size, rt_uint8_t flag);</td><td><strong>属于静态分配</strong>，跟创建消息队列对象类似，只是静态消息队列对象的内存是在系统编译时由编译器分配的，一般放于读数据段或未初始化数据段中。</td><td>xQueueCreateStatic()</td></tr><tr><td>脱离队列</td><td>rt_err_t rt_mq_detach(rt_mq_t mq);</td><td>将使消息队列对象被从内核对象管理器中脱离。</td><td>vQueueDelete()</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>发送信息</td><td>rt_err_t rt_mq_send (rt_mq_t mq, void *buffer, rt_size_t size);</td><td>线程或者中断服务程序都可以给消息队列发送消息。当发送消息时，消息队列对象先从空闲消息链表上取下一个空闲消息块，把线程或者中断服务程序发送的消息内容复制到消息块上，然后把该消息块挂到消息队列的尾部。当且仅当空闲消息链表上有可用的空闲消息块时，发送者才能成功发送消息；当空闲消息链表上无可用消息块，说明消息队列已满，此时，发送消息的的线程或者中断程序会收到一个错误码（- <code>RT_EFULL</code> ）。</td><td>xQueueSend() / xQueueSendFromISR() xQueueSendToFront() / xQueueSendToFrontFromISR()</td></tr><tr><td>等待方式发送信息</td><td>rt_err_t rt_mq_send_wait(rt_mq_t     mq, const void *buffer, rt_size_t size, rt_int32_t  timeout);</td><td>与 rt_mq_send () 的区别在于有等待时间，如果消息队列已经满了，那么发送线程将根据设定的 timeout 参数进行等待。如果设置的超时时间到达依然没有空出空间，这时发送线程将被唤醒并返回错误码。</td><td></td></tr><tr><td>发送紧急信息</td><td>rt_err_t rt_mq_urgent(rt_mq_t mq, void *buffer, rt_size_t size);</td><td>与发送消息几乎一样，唯一的不同是，当发送紧急消息时，从空闲消息链表上取下来的消息块不是挂到消息队列的队尾，而是挂到队首，这样，接收者就能够优先接收到紧急消息，从而及时进行消息处理。</td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>接收信息</td><td>rt_err_t rt_mq_recv (rt_mq_t mq, void *buffer, rt_size_t size, rt_int32_t timeout);</td><td>当消息队列中有消息时，接收者才能接收消息，否则接收者会根据超时时间设置，或挂起在消息队列的等待线程队列上，或直接返回。</td><td>xQueueReceive() / xQueueReceiveFromISR()</td></tr></tbody></table><p>对比：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQzOTk1MzE=">FreeRTOS 篇章之队列管理</span></p><h1 id="中断管理"><a class="anchor" href="#中断管理">#</a> 中断管理</h1><p><img data-src="09interrupt_ops.png" alt="中断相关接口" /></p><p>对于上图，通常用的较多的是：</p><h2 id="全局中断开关"><a class="anchor" href="#全局中断开关">#</a> 全局中断开关</h2><p><strong>全局中断开关也称为</strong>中断锁，是禁止多线程访问临界区最简单的一种方式，即通过关闭中断的方式，来保证当前线程不会被其他事件打断（因为整个系统已经不再响应那些可以触发线程重新调度的外部事件），也就是当前线程不会被抢占，除非这个线程主动放弃了处理器控制权。</p><table><thead><tr><th>函数功能</th><th>API 接口</th><th>函数描述</th><th>与 FreeRTOS 相匹配的函数</th></tr></thead><tbody><tr><td>关闭整个系统的中断</td><td>rt_base_t rt_hw_interrupt_disable(void);</td><td>关闭整个系统的中断</td><td>taskENTER_CRITICAL() / taskENTER_CRITICAL_FROM_ISR()</td></tr><tr><td>恢复整个系统的中断</td><td>void rt_hw_interrupt_enable(rt_base_t level);</td><td>恢复系统的上一个中断状态</td><td>taskEXIT_CRITICAL() / taskEXIT_CRITICAL_FROM_ISR( x )</td></tr></tbody></table><p><strong>（1）rt_hw_interrupt_disable () API 函数</strong></p><p>原型： <code>rt_base_t rt_hw_interrupt_disable(void);</code></p><p>返回参数：</p><ul><li>rt_hw_interrupt_disable 函数运行前的中断状态</li></ul><p><strong>（2）rt_hw_interrupt_enable () API 函数</strong></p><p>原型： <code>void rt_hw_interrupt_enable(rt_base_t level);</code></p><p>输入参数：</p><ul><li>前一次 rt_hw_interrupt_disable 返回的中断状态</li></ul><p>注：在这里就相当于 <span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy8xMDQ0OTg1NTg=">FreeRTOS 篇章之临界区与调度器</span> 里面的临界段中的操作。</p><h2 id="中断通知"><a class="anchor" href="#中断通知">#</a> 中断通知</h2><p>当整个系统被中断打断，进入中断处理函数时，需要通知内核当前已经进入到中断状态。</p><p>针对这种情况，RT-Thread 提供如下两个接口：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">rt_interrupt_enter</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用于通知内核，当前已经进入了中断状态，并增加中断嵌套深度（执行 rt_interrupt_nest++）</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">void</span> <span class="token function">rt_interrupt_leave</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 用于通知内核，当前已经离开了中断状态，并减少中断嵌套深度（执行 rt_interrupt_nest--）</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>注：不要在应用程序中调用这两个接口函数。</pre></td></tr></table></figure><p>其实这两个函数等同于 FreeRTOS 中带 FromISR 后缀的函数说明。</p><h1 id="rt-thread-studio上手"><a class="anchor" href="#rt-thread-studio上手">#</a> RT-Thread Studio 上手</h1><p>安装及环境搭建过程可以直接参看官方的指导文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvZGV2ZWxvcG1lbnQtdG9vbHMvcnR0aHJlYWQtc3R1ZGlvL3VtL3N0dWRpby11c2VyLWJlZ2lu">RT-Thread Studio 使用文档</span></p><p><strong>以下只是简单记录部分关键点：</strong></p><h2 id="控制台调试口修改"><a class="anchor" href="#控制台调试口修改">#</a> 控制台调试口修改</h2><p>在新建项目过程中，可从 GUI 窗口中选择配置，如下图：</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226114622.png" alt="TIM截图20220226114622" /></p><p>当后期需要重新分配时，则需要在代码和 RT-Thread setting 中修改了，（以修改为  <code>UART 3</code>  为例）修改内容如下：</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226120341.png" alt="TIM截图20220226120341" /></p><h2 id="串口终端集成显示"><a class="anchor" href="#串口终端集成显示">#</a> 串口终端集成显示</h2><p>在 RT-Thread Studio 上，是可以通过点击工具栏  <code>终端</code>  按钮，来打开对应的终端功能窗口查看输出信息的，并且同样支持与 RT-Thread 特有的  <code>finsh</code>  命令进行交互，串口终端显示操作如下：</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226141345.png" alt="TIM截图20220226141345" /></p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226142044.png" alt="TIM截图20220226142044" /></p><h2 id="与-cubemx联合编程"><a class="anchor" href="#与-cubemx联合编程">#</a> 与 CubeMX 联合编程</h2><p>此操作的前提条件是已经安装了 STM32CubeMX</p><h3 id="a-启动-cubemx-settings配置"><a class="anchor" href="#a-启动-cubemx-settings配置">#</a> A、启动 CubeMX settings 配置</h3><p>新建的工程，都是优先使用内部时钟源（如下图），但实际情况下，大部分是使用外部时钟的，因为其稳定性比较好；因此，以修改外部时钟为例。</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226115723.png" alt="TIM截图20220226115723" /></p><p>由于 RT-Thread Studio 支持与 CubeMX 联合编程，所以我们只需在项目资源管理器中启动  <code>CubeMX settings</code>  进行配置就好（如下图），进入界面后，其操作实际等同于操作 STM32CubeMX。</p><p><img data-src="image-20220226210308862.png" alt="image-20220226210308862" /></p><h3 id="b-cubemx-settings配置生成注意点"><a class="anchor" href="#b-cubemx-settings配置生成注意点">#</a> B、CubeMX settings 配置生成注意点</h3><ul><li><p>尽量生成 GCC 工程，因为 RT-Thread Studio 用的是 gcc 编译器<br /><img data-src="image-20220226233830986.png" alt="image-20220226233830986" /></p></li><li><p>选择生成独立的 .c .h 文件<br /><img data-src="313583-20201110104753899-295524523.png" alt="img" /></p></li><li><p>生成完成后返回界面，会提示替换了  <code>stm32xxx_hal_conf.h</code>  文件，因此，我们需要把原来的配置，同步过去，该哪些配置需要打开的，都一一打开。</p></li></ul><h3 id="c-添加编译规则"><a class="anchor" href="#c-添加编译规则">#</a> C、添加编译规则</h3><p>在生成 CubeMX 产生的工程后，打开  <code>drv_clk.c</code>  文件，你会发现  <code>clk_init()</code>  函数里面被自动更改了（如下图）；这也就意味着什么呢？记得备份啦，或者上 git /svn 进行版本管理啦。</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226143627.png" alt="TIM截图20220226143627" /></p><p>于是乎，对工程进行编译时，发现一堆报错，不禁怀疑 RT-Thread Studio 是否支持与 CubeMX 联合编程的。。。</p><p>在这里就需要对编译做相关操作了：</p><p>（1）在生成的 cubemx 文件夹里，先检查 cubemx 文件夹下有没有  <code>SConscript</code>  文件，如果有就跳过创建环节，检查内容。</p><p>（2）核查并更改  <code>SConscript</code>  文件里面的内容。</p><p>（3）有时候在生成 CubeMX 产生的工程后，RT-Thread Studio 会帮你生成一个  <code>SConscript</code>  文件，并写好了规则，如果是已有的，那么可以尝试先编译一下是否有新增的源码进行编译，如果没有，那么可以仿照如下的代码进行修改：</p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20220226150650.png" alt="TIM截图20220226150650" /></p><p>其中，上面规则里的  <code>src</code>  部分，需要根据实际内容增删需要编译的源文件（如下）：</p><figure class="highlight markdown"><figcaption data-lang="markdown"></figcaption><table><tr><td data-num="1"></td><td><pre>src = Split('''</pre></td></tr><tr><td data-num="2"></td><td><pre>Src/stm32g4xx_hal_msp.c</pre></td></tr><tr><td data-num="3"></td><td><pre>Src/main.c</pre></td></tr><tr><td data-num="4"></td><td><pre>Src/dma.c</pre></td></tr><tr><td data-num="5"></td><td><pre>Src/gpio.c</pre></td></tr><tr><td data-num="6"></td><td><pre>Src/usart.c</pre></td></tr><tr><td data-num="7"></td><td><pre>''')</pre></td></tr></table></figure><p>当然，为了一劳永逸，你也可以把它修改成这样子：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 引入 building 模块中所有的东西</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">from</span> building <span class="token keyword">import</span> <span class="token operator">*</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 获取当前路径。</span></pre></td></tr><tr><td data-num="5"></td><td><pre>cwd <span class="token operator">=</span> GetCurrentDir<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token comment"># 使能选择</span></pre></td></tr><tr><td data-num="8"></td><td><pre>search_EN <span class="token operator">=</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment"># add cubemx drivers</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token comment"># search_EN 为 0 时，手动选择添加需要编译的源文件</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># search_EN 为 1 时，自动搜寻与 SrcRemove 匹配以外的源文件</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> search_EN<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>src <span class="token operator">=</span> Split<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''</pre></td></tr><tr><td data-num="15"></td><td><pre>Src/stm32f4xx_hal_msp.c</pre></td></tr><tr><td data-num="16"></td><td><pre>Src/main.c</pre></td></tr><tr><td data-num="17"></td><td><pre>'''</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">else</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>src <span class="token operator">=</span> Glob<span class="token punctuation">(</span><span class="token string">'Src/*.c'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre>SrcRemove<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Src/stm32f4xx_it.c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>SrcRemove<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'Src/system_stm32f4xx.c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment"># 创建头文件路径列表，并保存至 path 中</span></pre></td></tr><tr><td data-num="24"></td><td><pre>path <span class="token operator">=</span> <span class="token punctuation">[</span>cwd <span class="token operator">+</span> <span class="token string">'/Inc'</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token comment"># 这是 RT-Thread 基于 SCons 扩展的一个方法（函数）。</span></pre></td></tr><tr><td data-num="27"></td><td><pre>group <span class="token operator">=</span> DefineGroup<span class="token punctuation">(</span><span class="token string">'cubemx'</span><span class="token punctuation">,</span> src<span class="token punctuation">,</span> depend <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span> CPPPATH <span class="token operator">=</span> path<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>Return<span class="token punctuation">(</span><span class="token string">'group'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><p>通过上面，你可能发现，为什么文件中的  <code>stm32f4xx_it.c</code>  和  <code>system_stm32f4xx.c</code>  不加入构建；其实你可以尝试一下加入编译一下，你就会发现玄机了。</p><p>更多的关于 SCons 工具的使用可以观看如下链接：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cucnQtdGhyZWFkLm9yZy9kb2N1bWVudC9zaXRlLyMvZGV2ZWxvcG1lbnQtdG9vbHMvc2NvbnMvc2NvbnM/aWQ9c2NvbnMtJUU3JUFFJTgwJUU0JUJCJThC">https://www.rt-thread.org/document/site/#/development-tools/scons/scons?id=scons-%e7%ae%80%e4%bb%8b</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9zY29ucy5vcmcvZG9jL3Byb2R1Y3Rpb24vSFRNTC9zY29ucy11c2VyL2luZGV4Lmh0bWw=">https://scons.org/doc/production/HTML/scons-user/index.html</span></p><p>最后记得更新 Sconscripts（在项目资源管理器选择目标工程 -&gt; 右键 -&gt; 更新  <code>Sconscripts</code> ）：</p><p><img data-src="image-20220226231733878.png" alt="image-20220226231733878" /></p><h3 id="d-迁移-cubemx产生的代码"><a class="anchor" href="#d-迁移-cubemx产生的代码">#</a> D、迁移 CubeMX 产生的代码</h3><p>当完成上面操作后，再次构建工程，或多或少还会出现错误，大概率是函数重复定义导致，比如  <code>multiple definition of main</code> 。这时候可以如下操作：</p><p><img data-src="20220226173146.png" alt="20220226173146" /></p><p>嘛，或许有时候在 CubeMX 初次生成的 main () 函数上自带了  <code>__WEAK</code>  弱处理关键字，但后期在多次更改 CubeMX settings 配置后，会有出现去掉  <code>__WEAK</code>  的情况，所以为了安全，还是把  <code>__WEAK</code>  添加到上述的保护区域位置去吧。</p><p>除了以上情况，在 CubeMX settings 配置更多外设时，需要把 cubemx/Src 里的 main.c 文件里的配置函数，手动移加到 RT-Thread 工程的 main.c 主文件函数中（一些 RTT 配置里面有的，就不用添加过去了，避免功能出错，例如 ETH 的配置）。如下图：</p><p><img data-src="20220226172930.png" alt="20220226172930" /></p>]]></content>
      
      
      <categories>
          
          <category> 实时系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> RTOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modbus家族之开篇</title>
      <link href="//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%E5%BC%80%E7%AF%87/"/>
      <url>//docs/Modbus/Modbus%E5%AE%B6%E6%97%8F%E4%B9%8B%E5%BC%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="历史溯源"><a class="anchor" href="#历史溯源">#</a> 历史溯源</h1><p>Modbus 是由 Modicon 公司（现在的施耐德电气 Schneider Electric）在 1979 年开发的一种消息传递结构，为使用可编程逻辑控制器（PLC）通信而发表，用于在智能设备之间建立客户端 - 服务器通信；这是一个划时代、里程碑式的网络协议，因此为工业网络拉开了序幕。Modbus 已经成为工业领域通信协议事实上的业界标准，并且现在是工业电子设备之间常用的连接方式。</p><p>Modbus 在工业环境下很流行，因为它是公开发表并且无著作权要求的。它是为工业应用开发的，与其他标准相比，它相对易于部署和维护，除了要传输的数据格式的大小外，几乎没有其他限制。Modbus 通常使用 <strong>RS485</strong> 作为其物理层。</p><h2 id="发展史"><a class="anchor" href="#发展史">#</a> 发展史</h2><p>Modicon，即今天的施耐德电气，于 1979 年向市场推出了 Modbus 原始协议（Modbus ASCII 和 Modbus RTU）；随着通信领域的迅速发展以及传输速度的提高，扩展版本 Modbus Plus（Modbus + 或者 MB+）紧接着出现，不过此协议是 Modicon 专有的，<strong>和 Modbus 并不相同</strong>；直到以太网技术的标准化和商品化，以太网成为了企业系统的业界标准，同时也成为了工业网络的业界标准；为了将 Modbus 带入 21 世纪，一个开放的 Modbus TCP/IP 规范于 1999 年修订发行；到了 2004 年 4 月，Modbus 协议从施耐德电气转移到 Modbus 组织，这标志着对开放的承诺（<strong>该规范可免费下载，并且</strong>使用 Modbus 或 Modbus TCP/IP 协议无需后续许可费用）；至此，在 Modbus TCP/IP 因为它的开放性、简单、低成本的开发以及支持它所需的最少硬件等特点，存在多个 Modbus TCP 变种，而 Modbus ASCII 和 Modbus RTU 在小型的嵌入式设备当中得到广泛应用。</p><p>&lt;br/&gt;</p><h1 id="协议版本"><a class="anchor" href="#协议版本">#</a> 协议版本</h1><p>Modbus 协议目前存在用于<strong>串口</strong>、<strong>以太网</strong>以及其他支持<strong>互联网协议</strong>的网络的版本。</p><p>Modbus 是一种请求 / 回复协议，提供由功能代码指定的服务。Modbus 功能代码是 Modbus Request (请求) / Response (响应)  PDU 的元素。</p><p>串行端口和以太网存在多种版本的 Modbus 协议，最常见的是：</p><ul><li>Modbus RTU</li><li>Modbus ASCII</li><li>Modbus TCP</li><li>Modbus Plus</li></ul><p><img data-src="Modbus-Different-Types.jpg" alt="" /></p><h2 id="modbus-rtu"><a class="anchor" href="#modbus-rtu">#</a> Modbus RTU</h2><p><code>Modbus RTU</code>  是一种紧凑的，采用二进制表示数据的方式；因为使用二进制编码和 CRC 错误检查的结合使得 Modbus RTU 适用于工业应用，因为它比 ASCII 字符的替代方案更有效地传输。在 Modbus RTU 与 ASCII 之间进行选择时，如果考虑性能，则 RTU 是首选。</p><h2 id="modbus-ascii"><a class="anchor" href="#modbus-ascii">#</a> Modbus ASCII</h2><p><code>Modbus ASCII</code>  是当设备设置为使用  <code>ASCII</code>  （<strong>美国信息交换标准代码</strong>）模式时，在  <code>MODBUS</code>  串行线上把通信消息中的每个 8 位字节将作为两个 ASCII 4 位字符发送。当物理通信链路或设备的功能不允许符合 RTU 计时器管理要求时，使用此模式。所以此模式的效率不如 RTU，因为每个字节需要两个字符。示例：字节 0x7D 编码为两个字符：  <code>0x35</code>  和  <code>0x42</code> （在  <code>ASCII</code>  表中为  <code>0x37</code>  =  <code>'7'</code> ，而  <code>0x44</code>  =  <code>'D'</code> ）。</p><h2 id="modbus-tcp"><a class="anchor" href="#modbus-tcp">#</a> Modbus TCP</h2><p><code>Modbus TCP</code>  是在  <code>TCP/IP</code>  网络上运行的 Modbus 的实现，旨在允许 Modbus ASCII / RTU 协议在基于 TCP / IP 的网络上传输。Modbus / TCP 将 Modbus 消息嵌入 TCP / IP 帧内。尽管实现起来非常简单，但是与网络相关的特性增加了一些挑战。例如，由于 Modbus 主机期望并要求在一定时间范围内对其轮询做出响应，因此必须考虑 TCP / IP 网络的不确定性（和其他方面）。Modbus ASCII 和 Modbus TCP 之间的主要区别在于，Modbus ASCII 所需的 LRC 错误检查由 IP 层执行。</p><blockquote><p>对于以上  <code>TCP</code> /  <code>RTU</code> /  <code>ASCII</code>  的这三种通信协议在数据模型和功能调用上都是相同的，只有封装方式是不同的。</p></blockquote><h2 id="modbus-plus"><a class="anchor" href="#modbus-plus">#</a> Modbus Plus</h2><p><code>Modbus Plus</code>  （Modbus + 或者 MB+）属于 Modbus 的一个扩展版本，不过此协议是 Modicon 专有的，和 Modbus 不同。它需要一个专门的协处理器来处理类似 HDLC 的高速令牌旋转。它使用 1Mbit/s 的双绞线，并且每个节点都有转换隔离设备，是一种采用转换／边缘触发而不是电压／水平触发的设备。连接 Modbus Plus 到计算机需要特别的接口，通常是支持 ISA（SA85），PCI 或者 PCMCIA 总线的板卡。</p><h1 id="通信和设备"><a class="anchor" href="#通信和设备">#</a> 通信和设备</h1><p>Modbus 有下列三种通信方式：</p><p>（1）以太网：对应的通信模式是 <strong>Modbus TCP/IP</strong></p><p>（2）异步串行传输（各种介质如有线 RS-232/422/485/、光纤、无线等）：对应的通信模式是 <strong>Modbus RTU</strong> 或 <strong>Modbus ASCII</strong></p><p>（3）高速令牌传递网络：对应的通信模式是 <strong>Modbus PLUS</strong></p><p>Modbus 通过多种类型的物理介质进行通信，例如：</p><ul><li>串行 RS-232</li><li>串行 RS-485</li><li>串行 RS-422</li><li>以太网</li></ul><p>Modbus RTU 和 Modbus ASCII 协议应用于串口链接（RS232、RS485、RS422），Modbus TCP/IP 协议应用于以太网链接。</p><p><img data-src="Modbus-Communication-Physical-Media.gif" alt="img" /></p><h1 id="消息结构"><a class="anchor" href="#消息结构">#</a> 消息结构</h1><p>Modbus 的主要消息结构是点对点，能够在点对点和多点网络上运行。</p><p><img data-src="image-20220208222537825.png" alt="image-20220208222537825" /></p><p>Modbus 协议遵循 ** 主 / 从（客户端 / 服务器）** 架构，主（客户端）向从（服务器）发送请求并等待响应。注意！目前 Modbus 中使用的术语 “主” 和 “从” 已被术语 “客户端” 和 “服务器” 所取代了。</p><p><img data-src="image-20220209165731722.png" alt="image-20220209165731722" /></p><h1 id="常见-modbus开源库"><a class="anchor" href="#常见-modbus开源库">#</a> 常见 Modbus 开源库</h1><h2 id="freemodbus"><a class="anchor" href="#freemodbus">#</a> <span class="exturl" data-url="aHR0cHM6Ly93d3cuZW1iZWRkZWQtZXhwZXJ0cy5hdC9lbi9mcmVlbW9kYnVzLw==">FreeModbus</span></h2><p>FreeMODBUS 是流行的 Modbus 协议的免费实现，专门针对嵌入式系统。FreeMODBUS 提供了 <em>Modbus 应用协议 v1.1a</em> 的实现，并支持 <em>Modbus over serial line 规范 1.0</em> 中定义的 <strong>RTU/ASCII</strong> 传输模式 ；自 0.7 版以来，FreeModbus 还支持 <strong>Modbus/TCP</strong>；0.9 版添加了第一个 Modbus/TCP 端口嵌入式使用 LWIP TCP/IP 堆栈的系统。唯一可惜的是，该 FreeMODBUS 只对从机开放了源码，主机部分并未实现开源。</p><p>以下是该 FreeMODBUS 的下载链接：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZW1iZWRkZWQtZXhwZXJ0cy5hdC9lbi9mcmVlbW9kYnVzLWRvd25sb2Fkcy8=">https://www.embedded-experts.at/en/freemodbus-downloads/</span></p><h2 id="libmodbus"><a class="anchor" href="#libmodbus">#</a> <span class="exturl" data-url="aHR0cHM6Ly9saWJtb2RidXMub3JnLw==">libmodbus</span></h2><p>libmodbus 是一个多平台的 Modbus 源库，适用于 Linux、Mac OS X、FreeBSD、QNX 和 Win32 等操作系统；可以根据 Modbus 协议发送和接收数据。支持 RTU（串行）和 TCP（以太网）通信。</p><p>以下是该 libmodbus 的下载链接：</p><p><span class="exturl" data-url="aHR0cHM6Ly9saWJtb2RidXMub3JnL2Rvd25sb2FkLw==">https://libmodbus.org/download/</span></p><h1 id="参考"><a class="anchor" href="#参考">#</a> 参考</h1><p><span class="exturl" data-url="aHR0cHM6Ly9tb2RidXMub3JnLw==">Modbus 主页</span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvTW9kYnVz">Modbus</span> - wiki</p><p><span class="exturl" data-url="aHR0cHM6Ly9yZWFscGFycy5jb20vbW9kYnVzLw==">WHAT IS MODBUS?</span></p><p>《<span class="exturl" data-url="aHR0cHM6Ly9wcm9jZXNzLmhvbmV5d2VsbC5jb20vdXMvZW4vc3VwcG9ydC9wcm9kdWN0LWRvY3VtZW50cy1kb3dubG9hZHM/c2VhcmNoPW1vZGJ1cyUyMGNvbW11bmljYXRpb24lMjBtYW51YWw=">modbus communication manual</span>》</p><p>《<span class="exturl" data-url="aHR0cHM6Ly9tb2RidXMub3JnL2RvY3MvTW9kYnVzX0FwcGxpY2F0aW9uX1Byb3RvY29sX1YxXzFiLnBkZg==">MODBUS APPLICATION PROTOCOL SPECIFICATION V1.1b</span>》</p><p>《<span class="exturl" data-url="aHR0cHM6Ly93d3cuZ2VuZXJhdGlvbnJvYm90cy5jb20vbWVkaWEvcm9ib3RlcS9tb2RidXMtbWFudWFsLnBkZg==">Modbus Fieldbus Networking</span>》</p><p>《<span class="exturl" data-url="aHR0cHM6Ly93d3cubS1zeXN0ZW0uY28uanAvbXNzZW5nbGlzaC9zZXJ2aWNlL2VtbW9kYnVzLnBkZg==">Modbus Protocol Reference Guide</span>》</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlydHVhbC1zZXJpYWwtcG9ydC5vcmcvY24vYXJ0aWNsZXMvbW9kYnVzLXJ0dS1ndWlkZS8=">Modbus RTU 通信指南</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlydHVhbC1zZXJpYWwtcG9ydC5vcmcvY24vYXJ0aWNsZXMvbW9kYnVzLWFzY2lpLWd1aWRlLw==">高级 Modbus ASCII 教程</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9kYnVzdG9vbHMuY29tL21vZGJ1cy5odG1s">modbus tools</span></p>]]></content>
      
      
      <categories>
          
          <category> 传输协议 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> modbus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>步进电机及丝杆</title>
      <link href="//docs/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%8F%8A%E4%B8%9D%E6%9D%86/"/>
      <url>//docs/%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA%E5%8F%8A%E4%B8%9D%E6%9D%86/</url>
      
        <content type="html"><![CDATA[<h1 id="步进电机"><a class="anchor" href="#步进电机">#</a> 步进电机</h1><h2 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h2><p>步进电机（英语：Stepper motor、Step motor）是直流无刷电机的一种，为具有如齿轮状突起（小齿）相锲合的定子和转子，可借由切换流向定子线圈中的电流，以一定角度逐步转动的电动机，能将电脉冲信号转换成相应角位移或线位移。</p><h3 id="a-构造上"><a class="anchor" href="#a-构造上">#</a> A、构造上</h3><p>步进电机在构造上有三种主要类型：反应式（Variable Reluctance, VR）、永磁式（Permanent Magnet, PM）和混合式（Hybrid Stepping, HS）</p><p><img data-src="15350977719637sn7os61sp.jpg" alt="" /></p><ul><li><p>反应式：也叫感应式、磁滞式或磁阻式步进电机。定子上有绕组、转子由软磁材料组成；定、转子周边均匀分布小齿和槽，通电后利用磁导的变化产生转矩。结构简单、成本低、步距角小，可达 1.2°、但动态性能差、效率低、发热大，可靠性难保证。</p><p><img data-src="2_10.png" alt="" /></p></li><li><p>永磁式：永磁式步进电机的转子用永磁材料制成，转子的极数与定子的极数相同。其特点是动态性能好、输出力矩大，但这种电机精度差，步矩角大（一般为 7.5° 或 15°）。</p><p><img data-src="3_11.png" alt="" /></p></li><li><p>混合式：也叫永磁反应式、永磁感应式步进电机，综合了反应式和永磁式的优点。其定子上有多相绕组、转子上采用永磁材料，转子和定子上均有多个小齿以提高步矩精度。其特点是输出力矩大、动态性能好，步距角小，但结构复杂、成本相对较高。</p><p><img data-src="4_10.png" alt="" /></p></li></ul><p>结构区别：</p><p><img data-src="step%20motor.jpg" alt="" /></p><h3 id="b-相数上"><a class="anchor" href="#b-相数上">#</a> B、相数上</h3><p>从定子上绕组来分类，共有二相、三相和五相等系列。目前最受欢迎的是两相混合式步进电机，约占 97% 以上的市场份额，其原因是性价比高，配上细分驱动器后效果良好。</p><p><img data-src="1535097802673o0o22s1864.jpg" alt="" /></p><ul><li><p>两相：</p><p><img data-src="5_6%20-%20%E5%89%AF%E6%9C%AC.png" alt="" /></p></li><li><p>三相：</p><p><img data-src="5_6.png" alt="" /></p></li></ul><h3 id="c-极数上"><a class="anchor" href="#c-极数上">#</a> C、极数上</h3><p>按照接线方式的不同，步进电机又可以分为单极步进电机（Unipolar Stepper Motor），和双极步进电机（Bipolar Stepper Motor）。</p><p><img data-src="153509774969411451pn716%20-%20%E5%89%AF%E6%9C%AC.jpg" alt="" /></p><ul><li><p>单极型：采用电流在一个绕组中始终沿固定方向流动的驱动方式（单极驱动）。虽然步进电机的结构较为复杂，但是由于仅需要电流 ON /OFF 的控制，因此步进电机的驱动电路较简单。</p><p><img data-src="MT1-30_f02.gif" alt="" /></p></li><li><p>双极型：采用电流在一个绕组中双向流动的驱动方式（双极驱动）。这种方式电机的结构比较简单，端子数也较少，但由于必须控制一个端子的极性，因此驱动电路较为复杂。</p><p><img data-src="MT1-30_f01.gif" alt="" /></p></li></ul><p>单极跟双极比较：</p><p>・双极连接<br />－采用电流在一个绕组中双向流动的驱动方式（双极驱动）。<br />－结构简单，但步进电机的驱动电路复杂。<br />－绕组利用率好，且可以进行精细的控制，因此步进电机能够获得很高的输出转矩。<br />－可以减小在线圈中产生的反电动势，因此可以使用耐压低的电机驱动器。</p><p>・单极连接<br />－具有中心抽头，采用电流在一个绕组中始终沿固定方向流动的驱动方式（单极驱动）。<br />－结构复杂，但步进电机的驱动电路简单。<br />－绕组利用率差，与双极连接相比，步进电机只能获得约一半的输出转矩。<br />－由于会在线圈中产生较高的反电动势，因此需要使用高耐压的电机驱动器。</p><h2 id="步进模式"><a class="anchor" href="#步进模式">#</a> 步进模式</h2><p>主要有 3 种步进模式 ：</p><ul><li>整步</li><li>半步</li><li>微步</li></ul><h3 id="a-整步"><a class="anchor" href="#a-整步">#</a> A、整步</h3><p><img data-src="full-step-mode-stepper-motor.png" alt="" /></p><p>顾名思义，就是每走一步都是取整的意思。而在整步控制上，也可分成<strong>单相通电驱动</strong>和<strong>双相通电驱动</strong>：</p><p><img data-src="11_2.png" alt="" /></p><p><img data-src="full_step_driving_1.png" alt="" /></p><p>它们之间最大的区别在于，双相通电驱动下，由于电机中流动的电流更多，产生的磁场也更强，因此扭矩也更大。</p><h3 id="b-半步"><a class="anchor" href="#b-半步">#</a> B、半步</h3><p><img data-src="half-step-operation-of-stepper-motor.png" alt="" /></p><p>半步模式属于单相通电驱动和双相通电驱动的组合，这种模式可以将步距减小一倍（旋转 45°，而不是 90°）。其唯一的缺点是电机产生的扭矩不是恒定的，当两相都通电时扭矩较高，只有一相通电时扭矩较小。</p><p><img data-src="half_step_driving.png" alt="" /></p><h3 id="c-微步"><a class="anchor" href="#c-微步">#</a> C、微步</h3><p><img data-src="modes-of-excitation-of-stepper-motor-stepper-microstepping.png" alt="" /></p><p>在微步模式下，可以看作是半步模式的增强版，因为它可以进一步减小步距，并且具有恒定的扭矩输出。这是通过控制每相流过的电流强度来实现的。最多可将电机步距角细分 256 倍，提高了低速光滑度和低速谐振效果。</p><p><img data-src="microstepping.png" alt="" /></p><h2 id="运作方式"><a class="anchor" href="#运作方式">#</a> 运作方式</h2><p>步进电机的运行一般分为三个部分：</p><ul><li>控制器</li><li>驱动器</li><li>电机马达</li></ul><p><img data-src="TIM%E6%88%AA%E5%9B%BE20211031144528.png" alt="" /></p><h3 id="a-控制器"><a class="anchor" href="#a-控制器">#</a> A、控制器</h3><p>控制器类似于人的大脑，指引着电机转动的方向以及操控着电机运转的快慢；当配合着一些控制策略，如：PID 控制、自适应控制等等，会使得其运作效果相当出色；而对于常见的控制方式有：传统方式的步进电机控制系统、基于 PLC 的步进电机控制系统、基于 DSP 的步进电机控制系统、基于 ARM 的步进电机控制系统等。</p><h3 id="b-驱动器"><a class="anchor" href="#b-驱动器">#</a> B、驱动器</h3><p>驱动器一般作两个功能：电机的精度控制和驱动运转控制。可分为恒流驱动与恒压驱动两种；恒压驱动方式因其电路构造简单，在高速领域时不易获得转矩的特性，现今已经很少使用；然而恒流驱动方式则是现在广为使用的驱动方式，在高速领域中能掌 握优良的转矩特性。</p><p>常见的驱动电路有：</p><ul><li><p>单极步进电机驱动电路</p><p><img data-src="9_5.png" alt="" /></p></li><li><p>双极步进电机驱动电路</p><p><img data-src="10_4.png" alt="" /></p></li></ul><h3 id="c-电机马达"><a class="anchor" href="#c-电机马达">#</a> C、电机马达</h3><p><img data-src="Image_506.png" alt="" /></p><p>略</p><p>&lt;br&gt;</p><h1 id="滚珠丝杆"><a class="anchor" href="#滚珠丝杆">#</a> 滚珠丝杆</h1><h2 id="种类"><a class="anchor" href="#种类">#</a> 种类</h2><p><img data-src="TIM%E6%88%AA%E5%9B%BE20211101201524.png" alt="" /></p><p><img data-src="TIM%E6%88%AA%E5%9B%BE20211101201817.png" alt="" /></p><h2 id="型号"><a class="anchor" href="#型号">#</a> 型号</h2><p><img data-src="image-20211101202146111.png" alt="image-20211101202146111" /></p><p><img data-src="image-20211101202211688.png" alt="image-20211101202211688" /></p><p><img data-src="image-20211101202236464.png" alt="image-20211101202236464" /></p><p><img data-src="image-20211101202300243.png" alt="image-20211101202300243" /></p><p><img data-src="image-20211101202323044.png" alt="image-20211101202323044" /></p><p><img data-src="image-20211101202343698.png" alt="image-20211101202343698" /></p><p><img data-src="image-20211101202416290.png" alt="image-20211101202416290" /></p><p><img data-src="image-20211101202437316.png" alt="image-20211101202437316" /></p><p><img data-src="image-20211101202459745.png" alt="image-20211101202459745" /></p><p><img data-src="image-20211101202522600.png" alt="image-20211101202522600" /></p><h1 id="传动装置"><a class="anchor" href="#传动装置">#</a> 传动装置</h1><h2 id="通电自锁"><a class="anchor" href="#通电自锁">#</a> 通电自锁</h2><p>绕组通电时步进电机具有全部的保持力矩。这就意味着步进电机可以在不使用机械刹车的情况下保持在停止位置。</p><p><img data-src="stop_position_self_hold.jpg" alt="" /></p><h2 id="刹车抱闸"><a class="anchor" href="#刹车抱闸">#</a> 刹车抱闸</h2><p>一旦电源被切断，电机自身的保持力矩丢失，电机不能在垂直操作中或施加外力作用下保持在停止位置。在提升和其它相似应用中需要使用带电磁刹车的电机。</p><p><img data-src="electromagnetic_brake_motor.jpg" alt="" /></p><p>&lt;br&gt;</p><h1 id="常用知识归纳"><a class="anchor" href="#常用知识归纳">#</a> 常用知识归纳</h1><h2 id="细分与步进数"><a class="anchor" href="#细分与步进数">#</a> 细分与步进数</h2><h3 id="a-定义"><a class="anchor" href="#a-定义">#</a> A、定义</h3><ul><li><p><strong>什么是步进数</strong></p><p>步进数，也叫脉冲数，是指步进电机转动一圈或是前进一段距离，需要电机需要接受的信号个数，单位为步。 因为电机的转动最终还是转化为直线运动，所以通常步进数指的是电机推动、拉动主轴，龙门等配件前进 1 毫米所需要的步数。</p><p>当步进数不对的后果：</p><p>例如当一台雕刻机的电机步进数不对，直接影响雕刻出来的结果大小不对。比如步进为 100 的机器，雕刻 1 毫米的直线，电机需要的信号是 100，如果设置步进数为 200，那就多走了一倍的距离，实际雕刻出来的线条就为 2 毫米了。</p></li><li><p><strong>什么是细分</strong></p><p>细分是步进电机驱动器的功能。步进电机的精度有限，一般的步进电机为 200 步走一圈，走一步转动的角度是 1.8 度。当我们需要电机走 0.9 度时，电机就没有办法了。好在步进电机驱动器，可以帮助步进电机把精度提高，把精度提高一倍，叫做半步细分，也叫 1/2 细分，此时电机一个信号脉冲就可以转动 0.9 度。再把精度提高一倍，叫 1/4 细分，走一步，相当于 0.45 度。细分都是一倍倍上去的，有 1/2, 1/4, 1/8, 1/16, 1/32 等，最大可达 256 细分。</p></li></ul><h3 id="b-应用"><a class="anchor" href="#b-应用">#</a> B、应用</h3><ul><li><p><strong>步进数计算三要素</strong></p><p>一个是电机转动一圈所需的脉冲数（原始步数）。这个一般为 200，对应的步进角为 1.8 度；当然也有其他的，像一些小电机只有 15 度，那么转一圈只需 24 个脉冲。</p><p>二是所采用的传动结构。如果用丝杆，要知道丝杆的导程，就是说丝杆转一圈时，前进的毫米数（这个稍后说）。如果是皮带轮，就要知道齿数和齿距，两个相乘得到皮带轮转一圈，皮带前进的毫米数。</p><p>三是步进电机驱动器的细分数。计算的公式是： <strong>原始脉冲数</strong> 除于 <strong>毫米数</strong> 再乘于 <strong>细分数</strong>。</p></li><li><p><strong>合理的步进数</strong></p><p>步进数越大，理论上来说精度越高；然在实际应用中，精度是由很多因素决定的，比如说齿轮可能有间隙，皮带有弹性，机架会抖动等。因此小于 0.01 精度的步进数是大部分是没有意义的。</p></li><li><p><strong>如何纠正步进参数</strong></p><p>有些不是我们自己购买的机器，我们可能不知道具体的电机，传动参数，那么还有一种调整的办法。 先随便设置一个步进数，如 200，然后在软件上控制电机走 100 毫米，如果设置对，实际走的距离就是 100 毫米，如果不对，那么有偏差，比如实际它只走了 80 毫米。那么可以用以下方式计算正确的步进数。</p><p>原理： 正确的步进数跟正确的距离之比 = 错误的步进数跟错误的距离之比</p><p>公式：正确的步进数 = 正确的距离 乘于 错误的步进数 除于 错误的距离 = 100 * 200 / 80= 250 设置步进数为 250 后，你会发现，走 100mm，就是 100mm，校对成功。</p></li></ul><h2 id="丝杆脉冲计算"><a class="anchor" href="#丝杆脉冲计算">#</a> 丝杆脉冲计算</h2><ol><li>首先认识丝杆的导程，一般来说常见的有 1205、1210、1605、1610 等这些说法，然后前两位是直径，后两位表示导程，导程 05 的丝杆就是每两个丝的间距为 5（单位：mm）。</li><li>以常规的步进电机 1.8 度 200 步进，那么走一圈就是 200 * 1.8 = 360 度</li><li>假设驱动器是 8 细分，那就是把 1.8 度再分成 8 份；所以经过驱动器的电机每一步进就是 1.8 度 / 8 = 0.225 度；最终在 8 细分下每转一圈就是 200 * 8 = 1600 步进。</li><li>当导程为 5 的丝杠，则每转一圈走 5 毫米，每一步进就是 5 / 1600 = 0.003125 毫米，这就是<strong>电机参数</strong>。如果是导程为 3 的参数，那就是 0.001875 毫米，以次类推。</li><li>用 1 除以电机参数就是<strong>脉冲当量</strong>，例如: 1 / 0.003125 = 320 步进，就是每走 1 毫米需要多少步进。</li></ol><h2 id="常规公式"><a class="anchor" href="#常规公式">#</a> 常规公式</h2><p>$ 步进电机运行步数 = 运行位移 / 导程 * 360 / 步距角 * 细分数 $</p><p>这是用步进电机接丝杆做驱动时用的，就是计算步进数的式子：各个变量如下：</p><ol><li>步进电机运行步进数 —— 这是你要计算的（也可以说是脉冲的数量），</li><li>运行位移 / 导程 —— 这是位移和导程的关系，这个除出来，就是移动这一段距离螺杆需要转几圈。</li><li>360 / 步距角 —— 因为正常步进电机是一个脉冲转一个步距角，这个算出来就是多少步电机转一圈。例如：步距角 = 7.5 度，这样算出来是 48，这就是 48 步就走一圈。</li><li>细分数 —— 一般情况这个数值是 1，但是采用了细分的方式驱动，可以控制电机一步只转半个步距角，这时细分数就为 2。合在上面式子里就会算出 96 步转一圈。</li><li>最后将 2、3、4 相乘。</li></ol><h1 id="参考"><a class="anchor" href="#参考">#</a> 参考：</h1><p><span class="exturl" data-url="aHR0cDovL25ld3MuZWV3b3JsZC5jb20uY24vbXAvVE9TSElCQS9hMjIyMTIuanNweA==">步进电机驱动器简介（上）—— 步进电机的特点、分类和工作原理</span></p><p><span class="exturl" data-url="aHR0cDovL25ld3MuZWV3b3JsZC5jb20uY24vbXAvVE9TSElCQS9hMjIzNDIuanNweA==">步进电机驱动器简介（下）—— 步进电机的控制驱动和安全技术</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cubW9ub2xpdGhpY3Bvd2VyLmNuL2NuL3N0ZXBwZXItbW90b3JzLWJhc2ljcy10eXBlcy11c2Vz">步进电机基础知识：类型、用途和工作原理</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> 电机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kicad应用总结</title>
      <link href="//docs/Kicad%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <url>//docs/Kicad%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在当前这个时代，对于 PCB 设计，有太多的 EDA 设计软件了，如：Cadence、PADS、Altium 等，但绝大多数是要授权的，而且如今人们版权意识正在提高；这对电子爱好者来说，要想 DIY 一个好东西，免不了依赖于这些设计软件，但如果有开源的、顺手的软件，那么我们更倾于应用这些软件，毕竟从版权意识上看以及投向开源社区来讲都是好的。</p></blockquote><h2 id="简介"><a class="anchor" href="#简介">#</a> 简介</h2><p>KiCad 是一个开源软件工具，用于设计电子原理图和 PCB 图形。</p><p>其官网地址：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2ljYWQub3JnLw==">https://www.kicad.org/</span></p><p>各操作文档说明：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmtpY2FkLm9yZy8=">https://docs.kicad.org/</span></p><p>由于 KiCad 是一个开源软件，所以我们可以获取到它的源码：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0tpQ2FkL2tpY2FkLXNvdXJjZS1taXJyb3I=">https://github.com/KiCad/kicad-source-mirror</span></p><p>当然，基于开源，它实现了跨平台：</p><p><img data-src="image-20210814170409099.png" alt="image-20210814170409099" /></p><p>然后在正式开篇之前，以下这些说明都是基于 V5.1.9 版本（最新版为 V5.1.10，修正了部分 Bug）；该死 V6.0 版本居然还没发布，对于想要了解 V6.0 版本的一些升级功能的，可以移到 <span class="exturl" data-url="aHR0cHM6Ly90ZWNoZXhwbG9yYXRpb25zLmNvbS9ibG9nL2tpY2FkL2tpY2FkLTYtcmV2aWV3LW5ldy1hbmQtaW1wcm92ZWQtZmVhdHVyZXMvI3QtMTYxMTAzMTU5OTI0MA==">KiCad 6 is coming!</span></p><p>&lt;br/&gt;</p><h2 id="入门"><a class="anchor" href="#入门">#</a> 入门</h2><h3 id="工作流程"><a class="anchor" href="#工作流程">#</a> 工作流程</h3><p>Kicad 有着其独特的工作流程：</p><p><img data-src="kicad_flowchart.png" alt="kicad_flowchart" /></p><p>设计一个 PCB 板，主要由两个任务来完成：绘制原理图和布置电路板。</p><h3 id="文件说明"><a class="anchor" href="#文件说明">#</a> 文件说明</h3><p>KiCad 在创建并使用时具有以下特定扩展名文件和文件夹，其主要用于原理图和电路板编辑。</p><ol><li><p>项目管理文件</p><table><thead><tr><th>文件扩展名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>*.pro</td><td style="text-align:left">Small file containing a few parameters for the current project, including the component library list.</td></tr></tbody></table></li><li><p>原理图编辑器文件</p><table><thead><tr><th>文件扩展名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>*.sch</td><td style="text-align:left">Schematic files, which do not contain the components themselves.</td></tr><tr><td>*.lib</td><td style="text-align:left">Schematic component library files, containing the component descriptions: graphic shape, pins, fields.</td></tr><tr><td>*.dcm</td><td style="text-align:left">Schematic component library documentation, containing some component descriptions: comments, keywords, reference to data sheets.</td></tr><tr><td>*_cache.lib</td><td style="text-align:left">Schematic component library cache file, containing a copy of the components used in the schematic project.</td></tr><tr><td>sym-lib-table</td><td style="text-align:left">Symbol library list (symbol library table): list of symbol libraries available in the schematic editor.</td></tr></tbody></table></li><li><p>制板编辑文件和文件夹</p><table><thead><tr><th>文件扩展名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>*.kicad_pcb</td><td style="text-align:left">Board file containing all info but the page layout.</td></tr><tr><td>*.pretty</td><td style="text-align:left">Footprint library folders. The folder itself is the library.</td></tr><tr><td>*.kicad_mod</td><td style="text-align:left">Footprint files, containing one footprint description each.</td></tr><tr><td>*.brd</td><td style="text-align:left">Board file in the legacy format. Can be read, but not written, by the current board editor.</td></tr><tr><td>*.mod</td><td style="text-align:left">Footprint library in the legacy format. Can be read by the footprint or the board editor, but not written.</td></tr><tr><td>fp-lib-table</td><td style="text-align:left">Footprint library list (footprint library table): list of footprint libraries (various formats) which are loaded by the board or the footprint editor or CvPcb.</td></tr></tbody></table></li><li><p>通用文件</p><table><thead><tr><th>文件扩展名</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td>*.kicad_wks</td><td style="text-align:left">Page layout description files, for people who want a worksheet with a custom look.</td></tr><tr><td>*.net</td><td style="text-align:left">Netlist file created by the schematic, and read by the board editor. This file is associated to the .cmp file, for users who prefer a separate file for the component/footprint association.</td></tr></tbody></table></li><li><p>特殊文件</p><table><thead><tr><th>文件扩展名</th><th>描述</th></tr></thead><tbody><tr><td>*.cmp</td><td>Association between components used in the schematic and their footprints. It can be created by Pcbnew and imported by Eeschema. Its purpose is to import changes from Pcbnew to Eeschema, for users who change footprints inside Pcbnew (for instance using Exchange Footprints command) and want to import these changes in schematic.</td></tr></tbody></table></li><li><p>其他文件</p><p>主要是生产生成文件</p><table><thead><tr><th>文件扩展名</th><th>描述</th></tr></thead><tbody><tr><td>*.gbr</td><td>Gerber files, for fabrication.</td></tr><tr><td>*.drl</td><td>Drill files (Excellon format), for fabrication.</td></tr><tr><td>*.pos</td><td>Position files (ASCII format), for automatic insertion machines.</td></tr><tr><td>*.rpt</td><td>Report files (ASCII format), for documentation.</td></tr><tr><td>*.ps</td><td>Plot files (Postscript), for documentation.</td></tr><tr><td>*.pdf</td><td>Plot files (PDF format), for documentation.</td></tr><tr><td>*.svg</td><td>Plot files (SVG format), for documentation.</td></tr><tr><td>*.dxf</td><td>Plot files (DXF format), for documentation.</td></tr><tr><td>*.plt</td><td>Plot files (HPGL format), for documentation.</td></tr></tbody></table></li></ol><p>&lt;br/&gt;</p><h2 id="常用快捷键"><a class="anchor" href="#常用快捷键">#</a> 常用快捷键</h2><p>首先说明一下，热键（即单个按键）直接用字母表示；组合键（是指先按住第一个键不放，然后按下第二个键，再放开这两个键。）则用 “+” 表示；多次按键（是指先按下第一个键并放开，然后按下第二个键并放开，以此类推。）则用 “ - ” 表示。</p><h3 id="常规"><a class="anchor" href="#常规">#</a> 常规</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>新建</td></tr><tr><td>Ctrl + O</td><td>打开</td></tr><tr><td>Ctrl + S</td><td>保存</td></tr><tr><td>Ctrl + Shift + S</td><td>另存为</td></tr><tr><td>Ctrl + Z</td><td>撤销</td></tr><tr><td>Ctrl + Y</td><td>重做</td></tr><tr><td>Ctrl + X</td><td>剪切</td></tr><tr><td>Ctrl + C</td><td>复制</td></tr><tr><td>Ctrl + V</td><td>粘贴</td></tr><tr><td>Ctrl + F</td><td>查找</td></tr><tr><td>F1</td><td>放大</td></tr><tr><td>F2</td><td>缩小</td></tr><tr><td>F3</td><td>缩放重绘</td></tr><tr><td>F4</td><td>缩放中心</td></tr><tr><td>Home</td><td>适合屏幕</td></tr><tr><td>E</td><td>编辑</td></tr></tbody></table><h3 id="原理图"><a class="anchor" href="#原理图">#</a> 原理图</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>C</td><td>重复的器件符号或标签</td></tr><tr><td>R</td><td>旋转</td></tr><tr><td>M</td><td>移动</td></tr><tr><td>A</td><td>添加器件符号</td></tr><tr><td>P</td><td>添加电源符号</td></tr><tr><td>X</td><td>X 轴镜像</td></tr><tr><td>Y</td><td>Y 轴镜像</td></tr><tr><td>W</td><td>画线</td></tr><tr><td>B</td><td>放置总线</td></tr><tr><td>L</td><td>添加标签</td></tr><tr><td>H</td><td>添加分层标签</td></tr><tr><td>Ctrl + L</td><td>添加全局标签</td></tr><tr><td>J</td><td>添加连接点</td></tr><tr><td>Q</td><td>添加禁止连接标志</td></tr><tr><td>F8</td><td>更新到 PCB</td></tr></tbody></table><h3 id="pcb"><a class="anchor" href="#pcb">#</a> PCB</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>O</td><td>放置封装</td></tr><tr><td>D</td><td>保持角度拖动布线</td></tr><tr><td>X</td><td>布线</td></tr><tr><td>Q</td><td>编辑线宽 / 过孔尺寸</td></tr><tr><td>L</td><td>锁定 / 解锁封装</td></tr><tr><td>V</td><td>常规状态下，切换层；布线状态下，放置过孔并切换层</td></tr><tr><td>N / Shift + N</td><td>切换网格大小</td></tr><tr><td>Ctrl + H</td><td>板层高对比模式（单层显示）</td></tr><tr><td>W / Shift + W</td><td>切换线宽</td></tr><tr><td>Ctrl</td><td>保持角度</td></tr><tr><td>/</td><td>布线轨迹切换</td></tr><tr><td>B</td><td>填充所有铜层区域</td></tr><tr><td>Ctrl + Shift + M</td><td>测量</td></tr><tr><td>Alt + 6</td><td>差分布线</td></tr><tr><td>G</td><td>调整铜层区域</td></tr></tbody></table><h3 id="库封装"><a class="anchor" href="#库封装">#</a> 库封装</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>M</td><td>移动</td></tr><tr><td>X</td><td>X 轴镜像</td></tr><tr><td>Y</td><td>Y 轴镜像</td></tr><tr><td>Instert</td><td>重复引脚</td></tr></tbody></table><p>&lt;br/&gt;</p><h2 id="常用插件"><a class="anchor" href="#常用插件">#</a> 常用插件</h2><h3 id="主题配色"><a class="anchor" href="#主题配色">#</a> 主题配色</h3><p>地址链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3BvaW50aGkva2ljYWQtY29sb3Itc2NoZW1lcw==">https://github.com/pointhi/kicad-color-schemes</span></p><p>例如笔者当前的主题配色为（<strong>behave-dark</strong>）：</p><p><img data-src="eeschema.png" alt="eeschema" /></p><p><img data-src="pcbnew.png" alt="pcbnew" /></p><h3 id="动态-bom"><a class="anchor" href="#动态-bom">#</a> 动态 BOM</h3><p>吾称之为最硬合交互式 BOM 操作：</p><p><img data-src="capture.gif" alt="Interactive HTML BOM" /></p><p>地址链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL29wZW5zY29wZXByb2plY3QvSW50ZXJhY3RpdmVIdG1sQm9t">https://github.com/openscopeproject/InteractiveHtmlBom</span></p><h3 id="泪滴生成"><a class="anchor" href="#泪滴生成">#</a> 泪滴生成</h3><p>地址链接：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL05pbHVqZVBlcmNodXQva2ljYWRfc2NyaXB0cw==">https://github.com/NilujePerchut/kicad_scripts</span></p><p>泪滴的作用，这里就不说啦，以前有讲过，然后演示：</p><p>焊盘：</p><p><img data-src="image-20210814210020179.png" alt="image-20210814210020179" /></p><p>通孔：</p><p><img data-src="image-20210814211109805.png" alt="image-20210814211109805" /></p><p>&lt;br/&gt;</p><h2 id="pcbnew中各层用途说明"><a class="anchor" href="#pcbnew中各层用途说明">#</a> Pcbnew 中各层用途说明</h2><h3 id="所支持的板层"><a class="anchor" href="#所支持的板层">#</a> 所支持的板层</h3><p>KiCAD 在 Pcbnew 中总计提供了 32 个铜层供导线走线（可覆铜），12 个固定技术层（按照正反面分为 6 对），2 个独立技术层，4 个辅助层。</p><p>在 KiCad 里 Pcbnew 的层描述中：</p><ul><li><p>F. 代表电路板上层（Front），B. 代表电路板的下层（Back）；</p></li><li><p>6 对固定技术层：Adhesive、Solder Paste、Silk Screen、Solder Mask、Courtyard、Fabrication；</p></li><li><p>2 个独立技术层：Edge Cuts、Margin；</p></li><li><p>4 个辅助层：Comments、E.C.O. 1、E.C.O. 2、Drawings；</p></li></ul><p><img data-src="image-20210814212055614.png" alt="image-20210814212055614" /></p><h3 id="层的使用说明"><a class="anchor" href="#层的使用说明">#</a> 层的使用说明</h3><h4 id="固定技术层"><a class="anchor" href="#固定技术层">#</a> 固定技术层</h4><p>KiCad 中 12 个技术层分为 6 对：上层一个，下层一个。可以通过 F. 或者 B. 来区分它们的位置。</p><table><thead><tr><th>技术层名称</th><th>功能描述</th></tr></thead><tbody><tr><td>Adhesive (F.Adhes and B.Adhes) 粘合层</td><td>用于在波峰焊前将 SMD 元件的粘合剂粘贴到电路板上的粘合层。</td></tr><tr><td>Solder Paste (F.Paste and B.Paste) 焊膏层</td><td>用于在回流焊接之前生产掩模以允许焊膏放置在 SMD 元件的焊盘上；通常这些层只有表面安装元件的焊盘。</td></tr><tr><td>Silk Screen (F.SilkS and B.SilkS) 丝印层</td><td>主要用于放置印制信息，如元件的轮廓和标注，各种注释字符等。</td></tr><tr><td>Solder Mask (F.Mask and B.Mask) 阻焊层</td><td>这两个层定义了焊接的掩模，即不过绿油的区域；所有焊盘都要出现在这两个层的其中一个层（SMD 元件）或者所有两个层（通孔元件）以防止焊盘被过油，影响导电。</td></tr><tr><td>Courtyard (F.CrtYd and B.CrtYd) 空间层</td><td>用于显示元件在 PCB 上实际占用的空间大小。</td></tr><tr><td>Fabrication (F.Fab and B.Fab) 制造层</td><td>用于辅助元件贴装；主要用于记录目的，以将信息传达给例如 PCB 制造商或组装厂。</td></tr></tbody></table><h4 id="独立技术层"><a class="anchor" href="#独立技术层">#</a> 独立技术层</h4><table><thead><tr><th>技术层名称</th><th>功能描述</th></tr></thead><tbody><tr><td>Edge.Cuts 边界层</td><td>用于绘制电路板轮廓。一般用于设置电路板的外形尺寸，数据标记，对齐标记，装配说明以及其它的机械信息。所以请仅使用此图层绘制 PCB 的轮廓。</td></tr><tr><td>Margin 电气边界层</td><td>用于定义在电路板上能够有效放置元件和布线的区域。</td></tr></tbody></table><h4 id="辅助层"><a class="anchor" href="#辅助层">#</a> 辅助层</h4><table><thead><tr><th>技术层名称</th><th>功能描述</th></tr></thead><tbody><tr><td>E.C.O. 1/2 用户自定层</td><td>2 层，用于拓展</td></tr><tr><td>Comments 注释层</td><td>描述性注释</td></tr><tr><td>Drawings 图层</td><td>图形说明</td></tr></tbody></table><p>这些层可以任意使用，它们可以是组装或布线等的说明文本，也可以是组装或加工的构造图，嘛，一般没啥用。</p><h4 id="铜层"><a class="anchor" href="#铜层">#</a> 铜层</h4><p>该层在 Kicad 中最多可拓展 32 层。</p><p>在 Pcbnew 中任何铜层的名字都是可以编辑的，我们一般使用默认的名称。当电路板是 2 层板时，只有 F.Cu 层和 B.Cu 层。当增加相应的层级数时，在 F.Cu 层和 B.Cu 层之间，将插入从上层到下层的顺序依次为 <span class="exturl" data-url="aHR0cDovL0luMS5DdQ==">In1.Cu</span>，<span class="exturl" data-url="aHR0cDovL0luMi5DdQ==">In2.Cu</span>，In3.Cu 和 In4.Cu 等的名称板层。</p><ol><li><p>通常，电路板是 2 层时，采用如下结构：</p><table><thead><tr><th>层编号</th><th>层名称</th><th>用途描述</th></tr></thead><tbody><tr><td>1</td><td><span class="exturl" data-url="aHR0cDovL0YuQ3U=">F.Cu</span></td><td>Signal</td></tr><tr><td>2</td><td><span class="exturl" data-url="aHR0cDovL0IuQ3U=">B.Cu</span></td><td>GND Plane</td></tr></tbody></table></li><li><p>通常，电路板是 4 层时，采用如下结构：</p><table><thead><tr><th>层编号</th><th>层名称</th><th>用途描述</th></tr></thead><tbody><tr><td>1</td><td><span class="exturl" data-url="aHR0cDovL0YuQ3U=">F.Cu</span></td><td>Signal</td></tr><tr><td>2</td><td><span class="exturl" data-url="aHR0cDovL0luMS5DdQ==">In1.Cu</span></td><td>GND Plane</td></tr><tr><td>3</td><td><span class="exturl" data-url="aHR0cDovL0luMi5DdQ==">In2.Cu</span></td><td>VCC Plane</td></tr><tr><td>4</td><td><span class="exturl" data-url="aHR0cDovL0IuQ3U=">B.Cu</span></td><td>Signal</td></tr></tbody></table></li><li><p>通常，电路板是 6 层时，采用如下结构：</p><table><thead><tr><th>层编号</th><th>层名称</th><th>用途描述</th></tr></thead><tbody><tr><td>1</td><td><span class="exturl" data-url="aHR0cDovL0YuQ3U=">F.Cu</span></td><td>Signal</td></tr><tr><td>2</td><td><span class="exturl" data-url="aHR0cDovL0luMS5DdQ==">In1.Cu</span></td><td>GND Plane</td></tr><tr><td>3</td><td><span class="exturl" data-url="aHR0cDovL0luMi5DdQ==">In2.Cu</span></td><td>Signal</td></tr><tr><td>4</td><td><span class="exturl" data-url="aHR0cDovL0luMy5DdQ==">In3.Cu</span></td><td>Signal</td></tr><tr><td>5</td><td><span class="exturl" data-url="aHR0cDovL0luNC5DdQ==">In4.Cu</span></td><td>VCC Plane</td></tr><tr><td>6</td><td><span class="exturl" data-url="aHR0cDovL0IuQ3U=">B.Cu</span></td><td>Signal</td></tr></tbody></table></li><li><p>通常，电路板是 8 层时，采用如下结构：</p><table><thead><tr><th>层编号</th><th>层名称</th><th>用途描述</th></tr></thead><tbody><tr><td>1</td><td><span class="exturl" data-url="aHR0cDovL0YuQ3U=">F.Cu</span></td><td>Signal</td></tr><tr><td>2</td><td><span class="exturl" data-url="aHR0cDovL0luMS5DdQ==">In1.Cu</span></td><td>GND Plane</td></tr><tr><td>3</td><td><span class="exturl" data-url="aHR0cDovL0luMi5DdQ==">In2.Cu</span></td><td>Signal</td></tr><tr><td>4</td><td><span class="exturl" data-url="aHR0cDovL0luMy5DdQ==">In3.Cu</span></td><td>VCC Plane</td></tr><tr><td>5</td><td><span class="exturl" data-url="aHR0cDovL0luNC5DdQ==">In4.Cu</span></td><td>GND Plane</td></tr><tr><td>6</td><td><span class="exturl" data-url="aHR0cDovL0luNS5DdQ==">In5.Cu</span></td><td>Signal</td></tr><tr><td>7</td><td><span class="exturl" data-url="aHR0cDovL0luNi5DdQ==">In6.Cu</span></td><td>VCC Plane</td></tr><tr><td>8</td><td><span class="exturl" data-url="aHR0cDovL0IuQ3U=">B.Cu</span></td><td>Signal</td></tr></tbody></table></li><li><p>通常，电路板是 10 层时，采用如下结构：</p><table><thead><tr><th>层编号</th><th>层名称</th><th>用途描述</th></tr></thead><tbody><tr><td>1</td><td><span class="exturl" data-url="aHR0cDovL0YuQ3U=">F.Cu</span></td><td>Signal</td></tr><tr><td>2</td><td><span class="exturl" data-url="aHR0cDovL0luMS5DdQ==">In1.Cu</span></td><td>GND Plane</td></tr><tr><td>3</td><td><span class="exturl" data-url="aHR0cDovL0luMi5DdQ==">In2.Cu</span></td><td>Signal</td></tr><tr><td>4</td><td><span class="exturl" data-url="aHR0cDovL0luMy5DdQ==">In3.Cu</span></td><td>Signal</td></tr><tr><td>5</td><td><span class="exturl" data-url="aHR0cDovL0luNC5DdQ==">In4.Cu</span></td><td>VCC Plane</td></tr><tr><td>6</td><td><span class="exturl" data-url="aHR0cDovL0luNS5DdQ==">In5.Cu</span></td><td>GND Plane</td></tr><tr><td>7</td><td><span class="exturl" data-url="aHR0cDovL0luNi5DdQ==">In6.Cu</span></td><td>Signal</td></tr><tr><td>8</td><td><span class="exturl" data-url="aHR0cDovL0luNy5DdQ==">In7.Cu</span></td><td>Signal</td></tr><tr><td>9</td><td><span class="exturl" data-url="aHR0cDovL0luOC5DdQ==">In8.Cu</span></td><td>VCC Plane</td></tr><tr><td>10</td><td><span class="exturl" data-url="aHR0cDovL0IuQ3U=">B.Cu</span></td><td>Signal</td></tr></tbody></table></li></ol><p>&lt;br/&gt;</p><h2 id="生产制造"><a class="anchor" href="#生产制造">#</a> 生产制造</h2><p>在使用本操作时，假定您已经在 KiCad 中完成了 PCB 的设计。</p><h3 id="设置-pcb原点坐标"><a class="anchor" href="#设置-pcb原点坐标">#</a> 设置 PCB 原点坐标</h3><p>选择 “菜单栏”，放置 -&gt; 钻孔和位置偏移（或者在右边菜单栏直接选择），将原点放置到 PCB 板框左下角位置，再放置【层对齐标记】到刚刚放置的原点位置。</p><p><img data-src="image-20210814222049491.png" alt="image-20210814222049491" /></p><h3 id="gerber导出"><a class="anchor" href="#gerber导出">#</a> Gerber 导出</h3><p>从菜单栏中点击绘制按键：</p><p><img data-src="image-20210814220901206.png" alt="image-20210814220901206" /></p><p>绘制 Gerber，并输出到相应文件夹：</p><p><img data-src="image-20210814221059310.png" alt="image-20210814221059310" /></p><p>绘制完后，点击旁边的 “生成钻孔文件” 进入设置生成：</p><p><img data-src="image-20210814222350241.png" alt="image-20210814222350241" /></p><p>生成文件放置到同样的文件夹，同时需要注意一下钻孔单位一般要对应 Pcbnew 中所使用的单位。</p><h3 id="bom输出"><a class="anchor" href="#bom输出">#</a> BOM 输出</h3><ol><li><p>从原理图输出</p><p>点击生成 BOM：</p><p><img data-src="image-20210814230416366.png" alt="image-20210814230416366" /></p><p>选择生成插件：</p><p><img data-src="image-20210814230521885.png" alt="image-20210814230521885" /></p><p>值得注意的是，在箭头处需要添加后缀 “<strong>.csv</strong>&quot;</p></li><li><p>从 PCB 中输出</p><p><img data-src="image-20210814231010230.png" alt="image-20210814231010230" /></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> EDA </tag>
            
            <tag> history </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cortex-M3/M4/M7 故障异常分析</title>
      <link href="//docs/Cortex-M3M4M7%20%E6%95%85%E9%9A%9C%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/"/>
      <url>//docs/Cortex-M3M4M7%20%E6%95%85%E9%9A%9C%E5%BC%82%E5%B8%B8%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在程序开发阶段，少不了 Debug 调试，除去编程架构搭建不稳定所造成的错误外，大部分会出现或多或少的故障异常，而这些异常有可能是粗心或者对编程了解不到位所导致的 ‘ 堆栈溢出 ’ 、‘ 数组下标越界 ’ 、‘ 数学运算异常 ’ 等等；而本篇则主要以常见的进入 Hardfault 中断来进行分析错误来源。</p></blockquote><h1 id="arm-cortex-m核心"><a class="anchor" href="#arm-cortex-m核心">#</a> ARM Cortex-M 核心</h1><p><strong>ARM</strong> 架构，过去称作<strong>高级精简指令集机器</strong>（英语：Advanced RISC Machine，更早称作艾康精简指令集机器，Acorn RISC Machine），是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。</p><p>而对于 <strong>ARM Cortex-M</strong> 是 ARM 架构处理器核心中，低阶系列的统称，由安谋控股所授权。这组核心的特点为低成本以及高能源效率的微处理器而优化设计，已有上千万个消费性设备中有此系列的微处理器。此系列核心包括 Cortex-M0、Cortex-M0+、Cortex-M1、Cortex-M3、Cortex-M4、Cortex-M7、Cortex-M23、Cortex-M33、Cortex-M35P 和 Cortex-M55。其中 Cortex-M4 / M7 / M33 / M35P / M55 核心有浮点运算器的选项，若有浮点运算器的选项，会在型号后面说明，例如 Cortex-Mx with FPU 或 Cortex-MxF，其中 x 是核心编号。</p><p>如标题所述，其中 Cortex-M3/M4/M7 同属 <strong>ARMv7-M</strong> 架构，再细分一点，Cortex-M3 实现的是 <strong>ARMv7-M</strong> 架构，Cortex-M4 /Cortex-M7 实现的是 <strong>ARMv7E-M</strong> 架构。</p><h1 id="armv7-m和-armv7e-m架构区别"><a class="anchor" href="#armv7-m和-armv7e-m架构区别">#</a> ARMv7-M 和 ARMv7E-M 架构区别</h1><p>如果有玩过过 Cortex-M3 系列的芯片跟 Cortex-M4/M7 的芯片，或多或少都知道 Cortex-M4/M7 比 Cortex-M3 多了 <strong>DSP</strong> 跟<strong>硬件浮点运算</strong>，以下是 ARMv7E-M 架构的拓展功能介绍：</p><p><img data-src="image-20210717125804779.png" alt="image-20210717125804779" /></p><p>由于 ARMv7E-M 是 ARMv7-M 的一个拓展子集，所以以下统称 <strong>ARMv7-M</strong> 为 “ARMv7-M” 和 “ ARMv7E-M ” 的集合。</p><h1 id="arm-寄存器"><a class="anchor" href="#arm-寄存器">#</a> ARM 寄存器</h1><p><img data-src="image-20210717153032356.png" alt="image-20210717153032356" /></p><h2 id="通用寄存器r0-r12"><a class="anchor" href="#通用寄存器r0-r12">#</a> 通用寄存器（R0 - R12）</h2><p>R0-R7 被称为低组寄存器。所有指令都能访问它们。它们的字长全是 32 位，复位后的初始值是不可预料的。</p><p>R8-R12 被称为高组寄存器。这是因为只有很少的 16 位 Thumb 指令能访问它们，32 位的 thumb-2 指令则不受限制。它们也是 32 位字长，且复位后的初始值是不可预料的。</p><h2 id="堆栈指针寄存器sp"><a class="anchor" href="#堆栈指针寄存器sp">#</a> 堆栈指针寄存器（SP）</h2><p>在 ARMv7-M 架构中，共有两个堆栈指针  <code>SP_main</code>  和  <code>SP_process</code> ，有时候也会把这个堆栈指针寄存器称为 <strong>R13</strong>。</p><ul><li>主堆栈指针（MSP），或写作  <code>SP_main</code> 。这是缺省的堆栈指针，它由 OS 内核、异常服务例程以及所有需要特权访问的应用程序代码来使用。</li><li>进程堆栈指针（PSP），或写作  <code>SP_process</code> 。用于常规的应用程序代码（不处于异常服用例程中时）。</li></ul><h2 id="链接寄存器lr"><a class="anchor" href="#链接寄存器lr">#</a> 链接寄存器（LR）</h2><p>链接寄存器（LR） 主要用于在调用子程序时存储返回地址；有时候也会把这个链接寄存器称为 <strong>R14</strong>。</p><h2 id="程序计数器pc"><a class="anchor" href="#程序计数器pc">#</a> 程序计数器（PC）</h2><p>程序计数器作为 PC（或称为 R15）访问，它根据所执行指令的大小（在 ARM 状态下始终为 4 个字节）递增；并通过分支指令将目标地址加载到 PC 中。 您还可以使用数据处理指令直接加载 PC。</p><p><strong>Note：</strong> 寄存器 R0-R12、SP、LR 和 PC 被称为 Arm 核心寄存器。这些寄存器可以描述为 R0-R15。更详细的说明可以看《ARMv7-M Architecture Reference Manual》B1.4 章 Registers 部分</p><h1 id="异常定义"><a class="anchor" href="#异常定义">#</a> 异常定义</h1><h2 id="异常类型"><a class="anchor" href="#异常类型">#</a> 异常类型</h2><p><img data-src="image-20210717132436090.png" alt="image-20210717132436090" /></p><h2 id="异常更新"><a class="anchor" href="#异常更新">#</a> 异常更新</h2><p>在入栈和取向量操作完成之后，执行服务例程之前，需要更新一系列的寄存器：</p><ul><li>SP：在入栈后会把堆栈指针（PSP 或 MSP）更新到新的位置。在执行服务例程时，将由 MSP 负责对堆栈的访问。</li><li>PSR：更新 IPSR 位段（地处 PSR 的最低部分）的值为新响应的异常编号。</li><li>PC：在取向量完成后，PC 将指向服务例程的入口地址，</li><li>LR：在出入 ISR 的时候，LR 的值将得到重新的诠释，这种特殊的值称为 “EXC_RETURN”，在异常进入时由系统计算并赋给 LR，并在异常返回时使用它。EXC_RETURN 的二进制值除了最低 4 位外全为 1，而其最低 4 位则有另外的含义。</li></ul><p>以上是在响应异常时核心寄存器的变化。另一方面，在 NVIC 中，也会更新若干个相关有寄存器。例如，新响应异常的悬起位将被清除，同时其活动位将被置位。</p><h2 id="异常返回值"><a class="anchor" href="#异常返回值">#</a> 异常返回值</h2><p>在进入异常服务程序后，将自动更新 LR 的值为特殊的 EXC_RETURN。这是一个高 28 位全为 1 的值，只有 [3:0] 的值有特殊含义，如下图所示。当异常服务例程把这个值送往 PC 时，就会启动处理器的中断返回序列。因为 LR 的值是由内核自动设置的，所以只要没有特殊需求，就不要改动它。</p><p><img data-src="image-20210717203515783.png" alt="image-20210717203515783" /></p><p><img data-src="image-20210717203628501.png" alt="image-20210717203628501" /></p><h1 id="异常入口的堆栈对齐"><a class="anchor" href="#异常入口的堆栈对齐">#</a> 异常入口的堆栈对齐</h1><p>Armv7-M 架构保证堆栈指针值至少是 4 字节对齐的。 但是，某些软件标准要求堆栈指针按 8 字节对齐，并且体系结构可以强制执行这种对齐。 在配置和控制寄存器的 CCR. STKALIGN 位指示中作为异常入口的一部分，决定着处理器是将 SP 对齐到 4 个字节还是 8 个字节。 该位是由编译器决定是否为：<br />・RW，在这种情况下，它的复位值是由编译器决定的。<br />・RO，在这种情况下它是 RAO，表示 8 字节 SP 对齐。<br /><strong>Arm 不赞成实现或使用 4 字节 SP 对齐。</strong></p><p>Register --- CCR. STKALIGN bit：</p><p><img data-src="image-20210717172228588.png" alt="image-20210717172228588" /></p><p>下图显示了在异常发生时进入堆栈的信息框架，以及处理器如何在堆栈上保留一个额外的字（如果需要的话），以获得 8 字节堆栈对齐。（这里就是我们要分析地方）</p><p><img data-src="image-20210717172649123.png" alt="image-20210717172649123" /></p><h1 id="hardfault异常分析处理"><a class="anchor" href="#hardfault异常分析处理">#</a> HardFault 异常分析处理</h1><p>HardFault 是一种通用故障，它适用于所有不能被任何其他异常机制处理的故障类。通常，HardFault 用于不可恢复的系统故障，尽管这不是必需的，而且 HardFault 的某些用途可能是可恢复的。HardFault 永久启用，优先级固定为 -1。</p><h2 id="方法一先来个简单的使用第三方组件-cm_backtrace"><a class="anchor" href="#方法一先来个简单的使用第三方组件-cm_backtrace">#</a> 方法一：先来个简单的，使用第三方组件 “cm_backtrace”</h2><p>项目地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2FybWluay9DbUJhY2t0cmFjZQ==">https://github.com/armink/CmBacktrace</span></p><p>怎么用这里就不说了，毕竟官方已经写得很清楚了，而且还有相应的 Demo 例程。</p><p>使用该方法的特点是不需要过多的关注更底层的东西，只需移植好后配置相应的功能就好了，而且它可以离线（脱离仿真器）来寻找错误点；但是前提是你的串口正常，而且还需要预留部分内存供其执行。</p><h2 id="方法二仿真情况下的-bug寻找"><a class="anchor" href="#方法二仿真情况下的-bug寻找">#</a> 方法二：仿真情况下的 bug 寻找</h2><p>如果是平常的 while 循环执行，导致挂掉了无法切换任务，那么我们可以轻松通过上下文切换寻找问题；但是在 HardFault 异常中它并不给你显示执行错误的所在地方，而是直接跳到 HardFault 中断中，这往往让我们头大。</p><p>Keil 平台的可以看：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VpbC5jb20vYXBwbm90ZXMvZmlsZXMvYXBudDIwOS5wZGY=">https://www.keil.com/appnotes/files/apnt209.pdf</span></p><p>IAR 平台的可以看：</p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuaWFyLmNvbS9rbm93bGVkZ2Uvc3VwcG9ydC90ZWNobmljYWwtbm90ZXMvZGVidWdnZXIvZGVidWdnaW5nLWEtaGFyZGZhdWx0LW9uLWNvcnRleC1tLw==">https://www.iar.com/knowledge/support/technical-notes/debugger/debugging-a-hardfault-on-cortex-m/</span></p><p>GCC 平台的可以看：</p><p>方法三。。。</p><h2 id="方法三通过-arm-寄存器逆向推导"><a class="anchor" href="#方法三通过-arm-寄存器逆向推导">#</a> 方法三：通过 ARM 寄存器逆向推导</h2><p>使用该方法的前提是获取到第五个大点最后一张图展示的核心寄存器（R0-R3、R12、LR、PC、xPSR 以及原 SP）的数值。</p><p><strong>1、常见的核心寄存器数据获取</strong></p><p>一般地，我们会使用以下代码嵌入到 HardFault 中断中，使其在入口处打印服务异常时各核心寄存器的值：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Exception frame without floating-point storage</pre></td></tr><tr><td data-num="2"></td><td><pre>* hard fault handler in C,</pre></td></tr><tr><td data-num="3"></td><td><pre>* with stack frame location as input parameter</pre></td></tr><tr><td data-num="4"></td><td><pre>*/</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">void</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token function">hard_fault_handler_c</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> hardfault_args<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_r0<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_r1<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_r2<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_r3<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_r12<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_lr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_pc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> stacked_psr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>   </pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">//Exception stack frame</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    stacked_r0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    stacked_r1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    stacked_r2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    stacked_r3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>   </pre></td></tr><tr><td data-num="23"></td><td><pre>    stacked_r12 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    stacked_lr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    stacked_pc <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    stacked_psr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span><span class="token punctuation">)</span> hardfault_args<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>   </pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"[Hard fault handler]\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"R0 = %x\n"</span><span class="token punctuation">,</span> stacked_r0<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"R1 = %x\n"</span><span class="token punctuation">,</span> stacked_r1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"R2 = %x\n"</span><span class="token punctuation">,</span> stacked_r2<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"R3 = %x\n"</span><span class="token punctuation">,</span> stacked_r3<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"R12 = %x\n"</span><span class="token punctuation">,</span> stacked_r12<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"LR = %x\n"</span><span class="token punctuation">,</span> stacked_lr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"PC = %x\n"</span><span class="token punctuation">,</span> stacked_pc<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"PSR = %x\n"</span><span class="token punctuation">,</span> stacked_psr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">CW</span></span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"BFAR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED38</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"CFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"HFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED2C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"DFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"AFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED3C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"BFAR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED38</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"CFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED28</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"HFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED2C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"DFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"AFSR = %x\n"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0xE000ED3C</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="53"></td><td><pre></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token comment">/* The prototype shows it is a naked function - in effect this is just an</pre></td></tr><tr><td data-num="55"></td><td><pre>assembly function. */</span></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token keyword">void</span> <span class="token function">HardFault_Handler</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span> <span class="token punctuation">(</span> naked <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="57"></td><td><pre></pre></td></tr><tr><td data-num="58"></td><td><pre><span class="token comment">/* The fault handler implementation calls a function called</pre></td></tr><tr><td data-num="59"></td><td><pre>prvGetRegistersFromStack(). */</span></pre></td></tr><tr><td data-num="60"></td><td><pre><span class="token keyword">void</span> <span class="token function">HardFault_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="61"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">CORTEX_M3_M4_M7</span></span></pre></td></tr><tr><td data-num="63"></td><td><pre>    <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="64"></td><td><pre>        <span class="token string">" tst lr, #4                        \n"</span> <span class="token comment">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num="65"></td><td><pre>        <span class="token string">" ite eq                            \n"</span></pre></td></tr><tr><td data-num="66"></td><td><pre>        <span class="token string">" mrseq r0, msp                     \n"</span></pre></td></tr><tr><td data-num="67"></td><td><pre>        <span class="token string">" mrsne r0, psp                     \n"</span></pre></td></tr><tr><td data-num="68"></td><td><pre>        <span class="token string">"b hard_fault_handler_c             \n"</span></pre></td></tr><tr><td data-num="69"></td><td><pre>        <span class="token operator">:</span> <span class="token comment">/* no output */</span></pre></td></tr><tr><td data-num="70"></td><td><pre>        <span class="token operator">:</span> <span class="token comment">/* no input */</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token operator">:</span> <span class="token string">"r0"</span> <span class="token comment">/* clobber */</span></pre></td></tr><tr><td data-num="72"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="74"></td><td><pre>    <span class="token keyword">asm</span> <span class="token keyword">volatile</span><span class="token punctuation">(</span></pre></td></tr><tr><td data-num="75"></td><td><pre>        <span class="token string">"movs r0, #4                        \n"</span></pre></td></tr><tr><td data-num="76"></td><td><pre>        <span class="token string">"mov  r1, lr                        \n"</span></pre></td></tr><tr><td data-num="77"></td><td><pre>        <span class="token string">"tst  r0, r1                        \n"</span> <span class="token comment">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num="78"></td><td><pre>        <span class="token string">"beq 1f                             \n"</span></pre></td></tr><tr><td data-num="79"></td><td><pre>        <span class="token string">"mrs r0, psp                        \n"</span></pre></td></tr><tr><td data-num="80"></td><td><pre>        <span class="token string">"ldr r1,=hard_fault_handler_c       \n"</span></pre></td></tr><tr><td data-num="81"></td><td><pre>        <span class="token string">"bx r1                              \n"</span></pre></td></tr><tr><td data-num="82"></td><td><pre>        <span class="token string">"1:mrs r0,msp                       \n"</span></pre></td></tr><tr><td data-num="83"></td><td><pre>        <span class="token string">"ldr r1,=hard_fault_handler_c       \n"</span></pre></td></tr><tr><td data-num="84"></td><td><pre>        <span class="token operator">:</span> <span class="token comment">/* no output */</span></pre></td></tr><tr><td data-num="85"></td><td><pre>        <span class="token operator">:</span> <span class="token comment">/* no input */</span></pre></td></tr><tr><td data-num="86"></td><td><pre>        <span class="token operator">:</span> <span class="token string">"r0"</span> <span class="token comment">/* clobber */</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    <span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>  <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="89"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>Note：</p><ol><li><p>值得注意的是 void HardFault_Handler (void); 函数是相应的 HardFault 中断函数，不同的厂家会定义不同的名称。</p></li><li><p>对于不同的编译器，如：armcc、iar、gcc for arm 等，需要把相应的关键字替换掉（eg： <code>asm</code> 、 <code>naked</code> ）。</p><p><code>naked</code>  拓展：<span class="exturl" data-url="aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1jbGFuZ19yZWYvYXJtY2xhbmdfcmVmX2poZzE0NzY4OTM1NjQyOTguaHRt">https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_jhg1476893564298.htm</span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzkzMzg5MQ==">https://zhuanlan.zhihu.com/p/33933891</span></p></li></ol><p><strong>2、逆向定位入口</strong></p><p>如果有看过方法二的两个链接，那么就很容易理解以下的分析了：</p><ol><li>确保你能正常获取输出数据（包括但不限于仿真查看、串口打印、SWO 输出、SEGGER_RTT 输出等等）。</li><li>由于我们在第一点修改过代码，所以可以直接查看 LR 和 PC 两个的值；因为这两个的值是关键。</li><li>使用 addr2line 软件定位故障代码位置（使用方法：<span class="exturl" data-url="aHR0cHM6Ly9zb3VyY2V3YXJlLm9yZy9iaW51dGlscy9kb2NzLTIuMjcvYmludXRpbHMvYWRkcjJsaW5lLmh0bWwjYWRkcjJsaW5lJUVGJUJDJTg5">https://sourceware.org/binutils/docs-2.27/binutils/addr2line.html#addr2line）</span>addr2line 属于 GNU Binutils 组件之一，获取可以从方法一里面的 tools 文件夹里获取，也可以从  <code>安装路径\GNU Tools ARM Embedded\5.4 2016q3\bin\arm-none-eabi-addr2line.exe</code>  提取出来。</li></ol><p><strong>3、使用演示</strong></p><p>先制造一个 HardFault：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">void</span> <span class="token function">fault_test_by_div0</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token operator">*</span> SCB_CCR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token number">0xE000ED14</span><span class="token punctuation">;</span> <span class="token comment">// SCB->CCR</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token operator">*</span>SCB_CCR <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* bit4: DIV_0_TRP. */</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    z <span class="token operator">=</span> x <span class="token operator">/</span> y<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"z:%d\n"</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token comment">/************************************************</pre></td></tr><tr><td data-num="14"></td><td><pre>函数名称 ： main</pre></td></tr><tr><td data-num="15"></td><td><pre>功    能 ： 主函数入口</pre></td></tr><tr><td data-num="16"></td><td><pre>参    数 ： 无</pre></td></tr><tr><td data-num="17"></td><td><pre>返 回 值 ： 无</pre></td></tr><tr><td data-num="18"></td><td><pre>*************************************************/</span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">void</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr><tr><td data-num="24"></td><td><pre></pre></td></tr><tr><td data-num="25"></td><td><pre>    BaseType_t xReturn <span class="token operator">=</span> pdPASS<span class="token punctuation">;</span> <span class="token comment">/* 定义一个创建信息返回值，默认为 pdPASS */</span></pre></td></tr><tr><td data-num="26"></td><td><pre></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">prvSetupHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">fault_test_by_div0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/* Start the tasks defined within this file/specific to this demo. */</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    xReturn <span class="token operator">=</span> <span class="token function">xTaskCreate</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>TaskFunction_t<span class="token punctuation">)</span>prvUser_Task<span class="token punctuation">,</span><span class="token comment">/* 任务入口函数 */</span></pre></td></tr><tr><td data-num="33"></td><td><pre>                           <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token string">"prvUser_Task"</span><span class="token punctuation">,</span><span class="token comment">/* 任务名字 */</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                           <span class="token punctuation">(</span><span class="token class-name">uint16_t</span><span class="token punctuation">)</span>configMINIMAL_STACK_SIZE<span class="token punctuation">,</span><span class="token comment">/* 任务栈大小 */</span></pre></td></tr><tr><td data-num="35"></td><td><pre>                           <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token comment">/* 任务入口函数参数 */</span></pre></td></tr><tr><td data-num="36"></td><td><pre>                           <span class="token punctuation">(</span>UBaseType_t<span class="token punctuation">)</span>mainCREATOR_TASK_PRIORITY<span class="token punctuation">,</span><span class="token comment">/* 任务的优先级 */</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                           <span class="token punctuation">(</span>TaskHandle_t <span class="token operator">*</span><span class="token punctuation">)</span>UserTaskCreate_Handle <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 任务控制块指针 */</span></pre></td></tr><tr><td data-num="38"></td><td><pre></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">if</span><span class="token punctuation">(</span>pdPASS <span class="token operator">==</span> xReturn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token comment">/* Start the scheduler. */</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token function">vTaskStartScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token comment">/* Will only get here if there was not enough heap space to create the</pre></td></tr><tr><td data-num="45"></td><td><pre>    idle task. */</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre><span class="token comment">/*----------------------------- End -----------------------------*/</span></pre></td></tr></table></figure><p>接着可以观察到程序已经跑到 HardFault_Handler 里并输出相应信息了：</p><p><img data-src="image-20210718160907873.png" alt="image-20210718160907873" /></p><p>然后利用 addr2line，执行命令  <code>arm-none-eabi-addr2line.exe -e &quot;可执行映像&quot; -a -f &quot;相应的值&quot;</code>  （注：实际命令并不需要双引号  <code>“ ”</code> ，应用可看下图）：</p><ul><li><code>-e</code>  ：指定可执行映像名称</li><li><code>-a</code>  ：显示函数地址</li><li><code>-f</code>  ：显示函数名称</li></ul><p><img data-src="image-20210718160622030.png" alt="image-20210718160622030" /></p><p>然后，对于不同的编译器，可执行映像并不一样（像 Keil 是  <code>.axf</code> 、IAR 是  <code>.out</code> ）；最后，如果细心的可以看到命令后面的两个值只有 PC 的值是对应上，第二个值并不是 LR 的值，而是其减去 4 的结果；若果你直接使用 LR 值，你会发现定位出来的下一条指令要执行的地方，至于为什么要减掉 4，是因为在 ARM 下执行指令的大小始终为 4 个字节递增，所以可以通过减掉 4，使其指向上一条内容。</p><p><img data-src="image-20210718163058462.png" alt="image-20210718163058462" /></p><p><img data-src="image-20210718163412930.png" alt="image-20210718163412930" /></p><h2 id="方法四透过最底层进行分析"><a class="anchor" href="#方法四透过最底层进行分析">#</a> 方法四：透过最底层进行分析</h2><p>这种方法不需要修改什么，在进入 HardFault_Handler 后直接分析核心寄存器。</p><p>同样的，还是先制造一个 HardFault，沿用方法三的 fault_test_by_div0 (); 函数代码，然后直到进入 HardFault_Handler 后，（注意，这里的 HardFault_Handler 中断函数并没有像方法三那样区嵌入代码，而是保持其原始的样子）：</p><p><img data-src="image-20210718204135298.png" alt="image-20210718204135298" /></p><p>接着跟上面的一样，获取各核心寄存器的值（ps：这里用的仿真查看）：</p><p><img data-src="image-20210718204626787.png" alt="image-20210718204626787" /></p><p>在这里就不是像方法三那样直接拿 LR 和 PC 这两个值来用了，必须进行层层分析：</p><ol><li><p>查看 LR 值是对应下图的哪个：</p><p><img data-src="image-20210718205017651.png" alt="image-20210718205017651" /></p><p>通过转换，-7 为 0xFFFFFFF9，然后在第四大点的第三小点有讲过 LR=0xFFFF_FFF9 时是使用 MSP，而 LR=0xFFFF_FFFD 时则使用 PSP；所以我们可以确定该返回值是被压入到主堆栈指针（MSP）中。</p></li><li><p>找到 MSP 指示的值：</p><p><img data-src="image-20210718205953987.png" alt="image-20210718205953987" /></p><p>得到该值为 0x2002ffc8。</p></li><li><p>查看该值所对应的内存块：</p><p><img data-src="image-20210718210515637.png" alt="image-20210718210515637" /></p><p>得到紫色框里的两个数据（嘿嘿，是不是很神奇，居然跟方法三的 LR、PC 值一样），可能你会疑惑，为什么是提取该地址往后第六、七个数（4 字节递增），而不是其他呢？这就看第五个大点了，它的入栈顺序以及地址位置都是有规律的，可以归纳为下图：</p><p><img data-src="image-20210718211434499.png" alt="image-20210718211434499" /></p><p>按箭头方向，顺数第六、七是不是就是 LR、PC 值啊，而这里就是旧的内容信息；所以跟方法三比较一下，其实方法三的那段嵌入代码，就是让其改变各个核心寄存器的信息内容，使其不要存储跳转到 HardFault_Handler，而是存储跳转前的数据信息。</p></li><li><p>到了这步，就是使用 addr2line 来定位，这里就不说了，方法三里面有写。</p></li></ol><h1 id="参考"><a class="anchor" href="#参考">#</a> 参考：</h1><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQVJNJUU2JTlFJUI2JUU2JUE3JThC">ARM 架构</span></p><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQVJNX0NvcnRleC1N">ARM Cortex-M</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc3QuY29tL2NvbnRlbnQvc3RfY29tL3poL2FybS0zMi1iaXQtbWljcm9jb250cm9sbGVycy9hcm0tY29ydGV4LW00Lmh0bWw=">Arm® Cortex®-M4 in a nutshell</span></p><p>&lt;&lt;ARM Cortex-M3 权威指南&gt;&gt;</p><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXJtLmNvbS9kb2N1bWVudGF0aW9uL2RkaTA0MDMvZWUvP2xhbmc9ZW4=">ARMv7-M Architecture Reference Manual</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cua2VpbC5jb20vc3VwcG9ydC9tYW4vZG9jcy9hcm1hc20vYXJtYXNtX2RvbTEzNTk3MzExMjQ4NDAuaHRt">Overview of the ARM Architecture</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9jb21tdW5pdHkuYXJtLmNvbS9kZXZlbG9wZXIvaXAtcHJvZHVjdHMvc3lzdGVtL2YvZW1iZWRkZWQtZm9ydW0vNDc0OS9lcnJvci1oYXJkLWZhdWx0LWhhbmRsZXI=">error: Hard Fault Handler</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9pbnRlcnJ1cHQubWVtZmF1bHQuY29tL2Jsb2cvY29ydGV4LW0tZmF1bHQtZGVidWc=">How to debug a HardFault on an ARM Cortex-M MCU</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9mb3J1bXMuZnJlZXJ0b3Mub3JnL3QvZGVidWdnaW5nLWEtYXJtLWNvcnRleC1tLWhhcmQtZmF1bHQvOTg3Mw==">Debugging a ARM Cortex-M Hard Fault</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VnZ2VyLmNvbS9kb3dubG9hZHMvYXBwbGljYXRpb24tbm90ZXMvQU4wMDAxNg==">Analyzing HardFaults on Cortex-M CPU</span></p><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vaG9zc2Jvc3MvZTFkMGU1MWZkYjk5YmMxMjVhYWRhYzY0ZjVkNjdmMDQ=">ARM Cortex M3: Recovering from a Hard Fault</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2lsYWJzLmNvbS9jb21tdW5pdHkvbWN1LzMyLWJpdC9rbm93bGVkZ2UtYmFzZS5lbnRyeS5odG1sLzIwMTQvMDUvMjYvZGVidWdfYV9oYXJkZmF1bHQtNzhnYw==">Debug a HardFault</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> MCU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用校验算法</title>
      <link href="//docs/%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95/"/>
      <url>//docs/%E7%AE%97%E6%B3%95/%E5%B8%B8%E7%94%A8%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="奇偶校验"><a class="anchor" href="#奇偶校验">#</a> 奇偶校验</h1><h2 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h2><p><strong>奇偶校验位</strong>（英语：<strong>parity bit</strong>）或<strong>校验比特</strong>（英语：<strong>check bit</strong>）是一个表示给定位数的二进制数中 1 的个数是奇数还是偶数的二进制数。奇偶校验位是最简单的错误检测码。</p><h2 id="原理"><a class="anchor" href="#原理">#</a> 原理</h2><p>奇偶校验常见于串口数据收发，如其名，可分为奇校验和偶校验：</p><ul><li><p><strong>奇校验：原始码流 + 校验位，其 “1” 的个数为奇数，则校验位为 “0”；若为偶数，则校验位为 “1”。</strong></p></li><li><p><strong>偶校验：原始码流 + 校验位，其 “1” 的个数为奇数，则校验位为 “1”；若为偶数，则校验位为 “0”。</strong></p></li></ul><p>奇校验是在每个字节后增加一个附加位，使得 “1” 的总数为奇数；而偶校验是在每个字节后增加一个附加位，使得 “1” 的总数为偶数。</p><p>eg：</p><p>以<strong>偶校验位</strong>来说，如果一组给定数据位中 1 的个数是奇数，补一个 bit 为 1，使得总的 1 的个数是偶数。例：0000001, 补一个 bit 为 1, 0000001<strong>1</strong>。</p><p>以<strong>奇校验位</strong>来说，如果给定一组数据位中 1 的个数是奇数，补一个 bit 为 0，使得总的 1 的个数是奇数。例：0000001, 补一个 bit 为 0, 0000001<strong>0</strong>。</p><p>其原理是：假如采用奇校验，发送端发送的一个字符编码（含校验位）中，“1” 的个数一定为奇数个，在接收端对接收字符二进制位中的 “1” 的个数进行统计，若统计出 “1” 的个数为偶数个，则意味着传输过程中有 1 位（或奇数位）发生差错。</p><h2 id="应用场景"><a class="anchor" href="#应用场景">#</a> 应用场景</h2><p>奇校验通常用于同步传输；偶校验常用于异步传输或低速传输。</p><h2 id="总结"><a class="anchor" href="#总结">#</a> 总结</h2><p>虽然这个校验应该算是校验算法中最简单的，可是它却有不足之处：</p><p>如果数据传输过程只有奇数个码位变化，那么不管变化在哪我们都可以直接判断数据传输是错误的，但是一旦有偶数位发生了变化，或者出现移位情况，我们就无法检测到错误，该方法的校错率是 50%。</p><p>eg：</p><p>奇校验 正确码流  <code>11000001</code></p><p><strong>错 1 位</strong>  <code>11000011</code>  变成了偶数个 1，能检测出错误</p><p>错 2 位  <code>11001011</code>  变成了奇数个 1，检测不出错误</p><p>出现移位  <code>11000010</code>  变成了奇数个 1，检测不出错误</p><h1 id="校验和"><a class="anchor" href="#校验和">#</a> 校验和</h1><h2 id="介绍-2"><a class="anchor" href="#介绍-2">#</a> 介绍</h2><p><strong>校验和</strong>（英语：Checksum）是冗余校验的一种形式。 它是通过错误检测方法，对经过空间（如通信）或时间（如计算机存储）所传送数据的完整性进行检查的一种简单方法。</p><h2 id="原理-2"><a class="anchor" href="#原理-2">#</a> 原理</h2><p>所谓校验和，就是将被校验数据进行 “累加”，并省略 “累加” 溢出的位，最终得到的 1 个或多个字节的结果。这个 “累加”，可以是简单的整数加法校验，又或者是反码加法校验等等。</p><p>一般常用的有：</p><p><strong>A、整数加法校验和（Integer Addition Checksum）</strong></p><p>其操作如加法运算一样，把数据值累加，最后省略高位。</p><p><img data-src="image-20210506204818892.png" alt="image-20210506204818892" /></p><p>在熟知其操作后，我们来看下误码率；假设传输数据以两个 bit 为单位，进行传输两个两位数  <code>00b</code>  和  <code>00b</code>  ，则该校验和为：00+00=00，那么在传输过程中其出现错码的数据有以下，那么来简单分析下本次校验出错的概率有多少：</p><table><thead><tr><th></th><th>00b</th><th>01b</th><th>10b</th><th>11b</th></tr></thead><tbody><tr><td><strong>00b</strong></td><td>00b</td><td>01b</td><td>10b</td><td>11b</td></tr><tr><td><strong>01b</strong></td><td>01b</td><td>10b</td><td>11b</td><td>00b</td></tr><tr><td><strong>10b</strong></td><td>10b</td><td>11b</td><td>00b</td><td>01b</td></tr><tr><td><strong>11b</strong></td><td>11b</td><td>00b</td><td>01b</td><td>00b</td></tr></tbody></table><p>如上表所示，在传输两个两位数  <code>00b</code>  和  <code>00b</code>  时，会有其余三种组合相加校验和也是 00，所以有 3/16 的概率会校验出错的，约为 1/4；但当数据的位宽越大，校验出错概率越低。</p><p><strong>B、反码加法校验和（One’s Complement Addition Checksum）</strong></p><p>反码加法校验，实际就是先进行整数加法运算，然后将进位加回来。</p><p><img data-src="image-20210506205712724.png" alt="image-20210506205712724" /></p><p>该处理相对于上一个的整数加法校验，由于需要加上进位操作，所以校验出错概率比它低一点。</p><h2 id="补充"><a class="anchor" href="#补充">#</a> 补充</h2><p>由于有讲到  <code>One’s Complement</code> ，所以在这里稍微说一下：one's-complement 和 two's-complement 以及 one's complement sum 和 two's complement sum。</p><ul><li><p><strong>one's-complement 和 two's-complement</strong></p><p>前者表示：反码，高位为符号位；后者表示：补码，高位为符号位。</p><p><img data-src="image-20210506210446251.png" alt="image-20210506210446251" /></p><p>参考：<span class="exturl" data-url="aHR0cHM6Ly90dXRvcmlhbHNwb2ludC5kZXYvY29tcHV0ZXItc2NpZW5jZS9jb21wdXRlci1vcmdhbml6YXRpb24tYW5kLWFyY2hpdGVjdHVyZS93aGF0cy1kaWZmZXJlbmNlLWJldHdlZW4tMXMtY29tcGxlbWVudC1hbmQtMnMtY29tcGxlbWVudA==">https://tutorialspoint.dev/computer-science/computer-organization-and-architecture/whats-difference-between-1s-complement-and-2s-complement</span></p></li><li><p><strong>one's complement sum 和 two's complement sum</strong></p><p>前者表示：反码加法，需要加上进位；</p><p><img data-src="image-20210506210955942.png" alt="image-20210506210955942" /></p><p>后者表示：补码加法，舍弃进位。</p><p><img data-src="image-20210506210936345.png" alt="image-20210506210936345" /></p><p>参考：《Short description of the Internet checksum》</p></li></ul><h1 id="纵向冗余校验lrc"><a class="anchor" href="#纵向冗余校验lrc">#</a> 纵向冗余校验（LRC）</h1><h2 id="介绍-3"><a class="anchor" href="#介绍-3">#</a> 介绍</h2><p>纵向冗余校验（LRC）是一种从纵向通道上的特定比特串产生校验比特的错误检测方法；而最常用的是 <strong>LRC-8</strong> 错误检验，除此之外，还有 <strong>LRC-16</strong>、 <strong>LRC-32</strong>，它们是逐字节的奇偶校验计算，通过将数据字的所有字节异或在一起，生成一个对应字节的校验数。下面以 LRC-8 为说明。</p><h2 id="原理-3"><a class="anchor" href="#原理-3">#</a> 原理</h2><p>通过对数据拆分为单字节，并利用纵向排列，把对应的字节位异或计算，最终得到一个单字节校验数：</p><p><img data-src="image-20220327112126895.png" alt="image-20220327112126895" /></p><h2 id="应用处理"><a class="anchor" href="#应用处理">#</a> 应用处理</h2><p><img data-src="image-20220327113147917.png" alt="image-20220327113147917" /></p><p>然后，它有什么特点呢：</p><ul><li>可以检测垂直切片分析中所有奇数的比特错误</li><li>无法检测垂直切片分析中偶数个比特的错误</li><li>可以检测所有 1 位错误或检测单个字节内的所有错误</li><li>可以检测多个 2 位错误，但并不是所有的 2 位错误类型都可检测到</li></ul><p>所以，最终得到的是：在检测同一垂直切片分析中的任何 2 位（bit）出现错误都是不可检测的。</p><p>最后附一张到目前介绍为止的检测概率图：</p><p><img data-src="image-20220327114446012.png" alt="image-20220327114446012" /></p><h1 id="循环冗余校验crc"><a class="anchor" href="#循环冗余校验crc">#</a> 循环冗余校验（CRC）</h1><h2 id="介绍-4"><a class="anchor" href="#介绍-4">#</a> 介绍</h2><p><strong>循环冗余校验</strong>（英语：<strong>Cyclic redundancy check</strong>，通称 “<strong>CRC</strong>”）是一种根据网络数据包或电脑文件等数据产生简短固定位数校验码的一种散列函数，主要用来检测或校验数据传输或者保存后可能出现的错误。生成的数字在传输或者存储之前计算出来并且附加到数据后面，然后接收方进行检验确定数据是否发生变化。由于本函数易于用二进制的电脑硬件使用、容易进行数学分析并且尤其善于检测传输通道干扰引起的错误，因此获得广泛应用。</p><h2 id="crc多项式"><a class="anchor" href="#crc多项式">#</a> CRC 多项式</h2><p>多项式的选择是 CRC 算法实现中最重要的部分，所选择的多项式必须有最大的错误检测能力，同时保证总体的碰撞概率最小。多项式最重要的属性是它的长度，也就是最高非零系数的数值，因为它直接影响着计算的校验和的长度。</p><p>最常用的多项式长度有</p><ul><li>9 位（CRC-8）</li><li>17 位（CRC-16）</li><li>33 位（CRC-32）</li><li>65 位（CRC-64）</li></ul><p>在构建一个新的 CRC 多项式或者改进现有的 CRC 时，一个通用的数学原则是使用满足所有模运算不可分解多项式约束条件的多项式。</p><ul><li>这种情况下的不可分解是指多项式除了 1 与它自身之外不能被任何其它的多项式整除。</li></ul><p>生成多项式的特性可以从算法的定义中推导出来：</p><ul><li>如果 CRC 有多于一个的非零系数，那么 CRC 能够检查出输入消息中的所有单数据位错误。</li><li>CRC 可以用于检测短于 2k 的输入消息中的所有双位错误，其中 k 是多项式的最长的不可分解部分的长度。</li><li>如果多项式可以被 x+1 整除，那么不存在可以被它整除的有奇数个非零系数的多项式。因此，它可以用来检测输入消息中的奇数个错误，就像奇偶校验函数那样。</li></ul><h2 id="多项式与二进制数码"><a class="anchor" href="#多项式与二进制数码">#</a> 多项式与二进制数码</h2><p>假设一个多项式为  <code>G(x)=x^4+x^3+x+1</code> ， 可转换为二进制数码  <code>11011b</code> 。</p><p>等式  <code>G(X)=x^4+x^3+x+1</code> ，可以写成  <code>G(X) = 1*(X^4) + 1*(X^3) + 0*(X^2) + 1*(X^1) + 1*(X^0)</code></p><p>总结：有幂次就为 1，没有幂次就为 0，首尾一定要是 1， 所以  <code>G(x)=x^4+x^3+x+1</code>  为  <code>11011b</code> 。</p><h2 id="crc校验核心"><a class="anchor" href="#crc校验核心">#</a> CRC 校验核心</h2><p>从上面可以看出，CRC 校验中有两个关键点：</p><ul><li>一是要预先确定一个发送端和接收端都用来作为除数的二进制比特串（或多项式）；</li><li>二是把原始帧与上面选定的除进行二进制除法运算，计算出 FCS。</li></ul><p>前者可以随机选择，也可按国际上通行的标准选择，但<strong>最高位和最低位必须均为 “1”</strong>，如在 IBM 的 SDLC（同步数据链路控制）规程中使用的 CRC-16（也就是这个除数一共是 17 位）生成多项式  <code>G（x）= x^16 + x^15 + x^2 +1</code> （对应二进制比特串为： <code>11000000000000101b</code> ）；而在 ISO HDLC（高级数据链路控制）规程、ITU 的 SDLC、X.25、V.34、V.41、V.42 等中使用 CCITT-16 生成多项式  <code>G（x）= x^16 + x^15 + x^5 +1</code> （对应二进制比特串为： <code>11000000000100001b</code> ）。</p><h2 id="校验原理"><a class="anchor" href="#校验原理">#</a> 校验原理</h2><p>CRC 算法的是以 GF (2)(2 元素伽罗瓦域) 多项式算术为数学基础的，原理看起来比较复杂、好难懂，但实际上它的主要特点和运算规则是很好理解的。</p><p>在 CRC 算法中，其运算法制使用 “模 2 算术” 运算。</p><p><strong>A、模 2 加减法运算</strong></p><ul><li><p>模 2 加法运算：1+1=0，0+1=1，0+0=0，无进位，也无借位</p></li><li><p>模 2 减法运算：1-1=0，0-1=1，1-0=1，0-0=0，无进位，也无借位</p><p>显然，加和减是一样的效果 (故在 GF (2) 多项式中一般不出现 &quot;-&quot; 号)，相当于二进制中的逻辑异或运算；也就是相互比较后，两者对应位相同则结果为 “0”，不同则结果为 “1”。</p></li></ul><p>eg：</p><p>多项式： <code>P1 = x^3 + x^2 + 1，P2 = x^3 + x^1 + 1，P1 + P2 = </code></p><pre><code>      x^3 + x^2       + 1  +   x^3       + x^1 + 1  ------------------------------            x^2 + x^1</code></pre><p>二进制： <code>P1 = 1101，P2 = 1011，P1 + P2 = </code></p><pre><code>      1 1 0 1  +   1 0 1 1  --------------        1 1 0</code></pre><p><strong>B、模 2 乘法运算</strong></p><p>GF (2) 多项式乘法和一般多项式乘法基本一样，只是在各项相加的时候按模 2 算术进行，同样的，无进位，也无借位。</p><p>eg：<br />多项式： <code>P1 = x^3 + x^2 + 1，P2 = x^3 + x^1 + 1，P1 x P2 = </code></p><pre><code>  (x^3 + x^2 + 1) (x^3 + x^1 + 1)    = (x^6 + x^4 + x^3    + x^5 + x^3 + x^2    + x^3 + x + 1)  = x^6 + x^5 + x^4 + x^3 + x^2 + x + 1</code></pre><p>二进制： <code>P1 = 1101，P2 = 1011，P1 x P2 = </code></p><pre><code>          1 1 0 1 x        1 0 1 1 --------------------      1 1 0 1    1 1 0 1  0 0 0 0 +  1 1 0 1      --------------------    1 1 1 1 1 1 1</code></pre><p><strong>C、模 2 除法运算</strong></p><p>多项式： <code>P1 = x^5 + x^2 + 1，P2 = x^3 + x^2 + x^1，P1 / P2 = </code></p><pre><code>                                      x^2   x^1                   ---------------------------------- x^3 + x^2 + x^1  ) x^5             + x^2       + 1                    x^5 + x^4 + x^3                   ----------------------------------                          x^4 + x^3 + x^2                          x^4 + x^3 + x^2                   ----------------------------------                                                  1                          </code></pre><p>二进制： <code>P1 = 100101，P2 = 1110，P1 x P2 = </code></p><pre><code>                          1 1                   ---------------          1 1 1 0 ) 1 0 0 1 0 1                    1 1 1 0                   ---------------                      1 1 1 0                      1 1 1 0                   ---------------                              1         </code></pre><p>具体来说，CRC 校验原理就是以下几个步骤：</p><p>（1）先选择（可以随机选择，也可按标准选择，具体在后面介绍）一个用于在接收端进行校验时，对接收的帧进行除法运算的除数（是二进制比较特串，通常是以多项方式表示，所以 CRC 又称多项式编码方法，这个多项式也称之为 “生成多项式”）。</p><p>（2）看所选定的除数二进制位数（假设为 k 位），然后在要发送的数据帧（假设为 m 位）后面加上 k-1 位 “0”，然后以这个加了 k-1 个 “0“的新帧（一共是 m+k-1 位）以 “模 2 除法” 方式除以上面这个除数，所得到的余数（也是二进制的比特串）就是该帧的 CRC 校验码，也称之为 FCS（帧校验序列）。但要注意的是，余数的位数一定要是比除数位数只能少一位，哪怕前面位是 0，甚至是全为 0（附带好整除时）也都不能省略。</p><p>（3）再把这个校验码附加在原数据帧（就是 m 位的帧，注意不是在后面形成的 m+k-1 位的帧）后面，构建一个新帧发送到接收端，最后在接收端再把这个新帧以 “模 2 除法” 方式除以前面选择的除数，如果没有余数，则表明该帧在传输过程中没出错，否则出现了差错。</p><p><img data-src="image-20210523204223295.png" alt="image-20210523204223295" /></p><h2 id="计算步骤"><a class="anchor" href="#计算步骤">#</a> 计算步骤</h2><p>假设以最常用的 CRC-16_MODBUS 为例：</p><p>（1）、预置 1 个 16 位的寄存器值 0xFFFF，称此寄存器为 CRC 寄存器；</p><p>（2）、把第一个 8 位二进制数据（既通讯信息帧的第一个字节）与 16 位的 CRC 寄存器的低 8 位相异或，把结果放于 CRC 寄存器，高八位数据不变；</p><p>（3）、把 CRC 寄存器的内容右移一位（朝高位）用 0 填补最高位，并检查右移后的移出位；</p><p>（4）、如果移出位为 0 则重复第 3 步（再次右移一位）；如果移出位为 1，那么将 CRC 寄存器与一多项式（A001）进行异或；</p><p>（5）、重复步骤 3 和 4，直到右移 8 次，这样整个 8 位数据全部进行了处理；</p><p>（6）、重复步骤 2 到步骤 5，进行通讯信息帧下一个字节的处理；</p><p>（7）、将该通讯信息帧所有字节按上述步骤计算完成后，得到的 16 位 CRC 寄存器的高、低字节进行交换；</p><p>（8）、最后得到的 CRC 寄存器内容即为：CRC 码。</p><p>以上计算步骤中的多项式 A001 是 8005 按位颠倒后的结果。</p><h2 id="crc-16实现代码"><a class="anchor" href="#crc-16实现代码">#</a> CRC-16 实现代码</h2><p>常用 CRC-16 码表：</p><table><thead><tr><th>Algorithm</th><th>Poly</th><th>Init</th><th>RefIn</th><th>RefOut</th><th>XorOut</th></tr></thead><tbody><tr><td>CRC16_CCITT</td><td>0x1021</td><td>0x0000</td><td>true</td><td>true</td><td>0x0000</td></tr><tr><td>CRC16_CCITT_FALSE</td><td>0x1021</td><td>0xFFFF</td><td>false</td><td>false</td><td>0x0000</td></tr><tr><td>CRC16_XMODEM</td><td>0x1021</td><td>0x0000</td><td>false</td><td>false</td><td>0x0000</td></tr><tr><td>CRC16_X25</td><td>0x1021</td><td>0xFFFF</td><td>true</td><td>true</td><td>0xFFFF</td></tr><tr><td>CRC16_MODBUS</td><td>0x8005</td><td>0xFFFF</td><td>true</td><td>true</td><td>0x0000</td></tr><tr><td>CRC16_IBM</td><td>0x8005</td><td>0x0000</td><td>true</td><td>true</td><td>0x0000</td></tr><tr><td>CRC16_MAXIM</td><td>0x8005</td><td>0x0000</td><td>true</td><td>true</td><td>0xFFFF</td></tr><tr><td>CRC16_USB</td><td>0x8005</td><td>0xFFFF</td><td>true</td><td>true</td><td>0xFFFF</td></tr></tbody></table><p>这里只演示常用的 CRC-16 的部分程序：</p><p><img data-src="image-20210506233502474.png" alt="image-20210506233502474" /></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cJSON库 API解析（下）</title>
      <link href="//docs/cJSON/cJSON%E5%BA%93%20API%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>//docs/cJSON/cJSON%E5%BA%93%20API%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>继上一篇 <a href="">cJSON 库 API 解析（上）</a>，本篇为下篇，以解析 JSON 数据包为主</p></blockquote><h1 id="json数据解析"><a class="anchor" href="#json数据解析">#</a> JSON 数据解析</h1><p>在 cJSON 里，解析 JSON 数据包，其实就是通过搜寻对应的配对关键符号或者关键字，然后一个一个剥离成为链表节点 (键值对) 的过程。</p><p>其所支持的解析函数有以下几个：</p><ul><li><p><code>CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);</code></p></li><li><p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length);</code></p></li><li><p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);</code></p></li><li><p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated);</code></p></li></ul><p>但一般来说，平常我们只需要用到 cJSON_Parse (); 函数来解析。同样的，在调用了 parse 函数后，使用完毕需要调用 cJSON_Delete (); 及时释放；</p><p>整个解析过程，其核心操作函数为：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Parser core - when encountering text, process appropriately. */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">static</span> cJSON_bool <span class="token function">parse_value</span><span class="token punctuation">(</span>cJSON <span class="token operator">*</span> <span class="token keyword">const</span> item<span class="token punctuation">,</span> parse_buffer <span class="token operator">*</span> <span class="token keyword">const</span> input_buffer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input_buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>input_buffer<span class="token operator">-></span>content <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">/* no input */</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment">/* parse the different types of values */</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">/* null */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_read</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"null"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        item<span class="token operator">-></span>type <span class="token operator">=</span> cJSON_NULL<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        input_buffer<span class="token operator">-></span>offset <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> true<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* false */</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_read</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"false"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        item<span class="token operator">-></span>type <span class="token operator">=</span> cJSON_False<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        input_buffer<span class="token operator">-></span>offset <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token keyword">return</span> true<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* true */</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_read</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strncmp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        item<span class="token operator">-></span>type <span class="token operator">=</span> cJSON_True<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        item<span class="token operator">-></span>valueint <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        input_buffer<span class="token operator">-></span>offset <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">return</span> true<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">/* string */</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_access_at_index</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\"'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">parse_string</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> input_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token comment">/* number */</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_access_at_index</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">parse_number</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> input_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">/* array */</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_access_at_index</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'['</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">parse_array</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> input_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token comment">/* object */</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">can_access_at_index</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">buffer_at_offset</span><span class="token punctuation">(</span>input_buffer<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>        <span class="token keyword">return</span> <span class="token function">parse_object</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> input_buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre>    <span class="token keyword">return</span> false<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="54"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>就像前面说的，通过搜寻对应的配对关键符号或者关键字去调用不同的处理函数，然后配对校验，并把相应的数据插入到根结点，形成一个个相连的子节点链表。</p><h1 id="json数据获取"><a class="anchor" href="#json数据获取">#</a> JSON 数据获取</h1><p>当调用完上面的解析函数后，返回的是根结点指针，通过这个 cJSON 的结构指针，我们就可以利用其解析后每个节点所对应的类型，快速寻找同类型的数据，再根据提供的键（名称）来获取数据。</p><p>下面就来认识一下常用的 API 函数：</p><p><strong>1、类型校验：</strong></p><ul><li><p>False： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);</code></p></li><li><p>True： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);</code></p></li><li><p>布尔值： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);</code></p></li><li><p>null： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);</code></p></li><li><p>数值： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);</code></p></li><li><p>字符串： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);</code></p></li><li><p>数组： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);</code></p></li><li><p>对象： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);</code></p></li></ul><p>不难发现，这些函数都是用于判断参数的类型的，因此返回值只有 true（真）和 false（假）；用的比较多的是 cJSON_IsFalse (); 和 cJSON_IsTrue ();，直接判断 JSON 数据包里的布尔变量。</p><p><strong>2、信息提取：</strong></p><ul><li><p>数组： <code>CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);</code></p></li><li><p>对象： <code>CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);</code></p></li><li><p>对象（名称区分大小写）： <code>CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);</code></p></li></ul><p><strong>3、校验类型并返回值：</strong></p><ul><li><p>字符串： <code>CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);</code></p></li><li><p>数值： <code>CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);</code></p></li></ul><p><strong>4、获取项目数：</strong></p><ul><li><code>CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);</code></li></ul><p><strong>5、错误分析：</strong></p><ul><li><code>CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);</code></li></ul><h1 id="示例"><a class="anchor" href="#示例">#</a> 示例</h1><p>以上篇打印的封装的数据信息为例；</p><p>原封装的 JSON 数据包：</p><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cJSON"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v1.7.14"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cJSON.c"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">75.8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"KB"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">"released"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">2020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">"Sep"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">3</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">"latest"</span><span class="token operator">:</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>随后解析打印出来的信息：</p><figure class="highlight tex"><figcaption data-lang="TeX"></figcaption><table><tr><td data-num="1"></td><td><pre>name:cJSON</pre></td></tr><tr><td data-num="2"></td><td><pre>version:v1.7.14</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>file:cJSON.c</pre></td></tr><tr><td data-num="5"></td><td><pre>size:75.800000</pre></td></tr><tr><td data-num="6"></td><td><pre>unit:KB</pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>released date:2020 Sep 3</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>Is it necessary to update?</pre></td></tr><tr><td data-num="11"></td><td><pre>not update</pre></td></tr></table></figure><p>代码执行（沿用上篇的封装代码）：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cJSON.h"</span></span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cJSON <span class="token operator">*</span>jtest <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    cJSON <span class="token operator">*</span>jfile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cJSON <span class="token operator">*</span>jissue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    cJSON <span class="token operator">*</span>jyear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    cJSON <span class="token operator">*</span>jmonth <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    cJSON <span class="token operator">*</span>jday <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* 创建一个 JSON 格式的主对象 (主链表头结点) */</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    jtest <span class="token operator">=</span> <span class="token function">cJSON_CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* 追加字符串类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cJSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"v1.7.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token comment">/* 追加一个对象到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    jfile <span class="token operator">=</span> <span class="token function">cJSON_AddObjectToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token comment">/* 往追加的对象添加对应的值 */</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cJSON.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">cJSON_AddNumberToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">75.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"unit"</span><span class="token punctuation">,</span> <span class="token string">"KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token comment">/* 创建一个 JSON 格式的数组 (另一个链表头结点) */</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    jissue <span class="token operator">=</span> <span class="token function">cJSON_CreateArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token comment">/* 创建相应的值并把这些值添加到数组里 */</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    jyear <span class="token operator">=</span> <span class="token function">cJSON_CreateNumber</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jyear<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    jmonth <span class="token operator">=</span> <span class="token function">cJSON_CreateString</span><span class="token punctuation">(</span><span class="token string">"Sep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jmonth<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    jday <span class="token operator">=</span> <span class="token function">cJSON_CreateNumber</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jday<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token comment">/* 把已经填好的数据的数组插入到主对象中 */</span></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token function">cJSON_AddItemToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"released"</span><span class="token punctuation">,</span> jissue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token comment">/* 追加一个值为 True 的布尔类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token function">cJSON_AddTrueToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre></pre></td></tr><tr><td data-num="46"></td><td><pre>    <span class="token comment">/* 打印 JSON 对象 (整条链表) 的所有数据 */</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    str <span class="token operator">=</span> <span class="token function">cJSON_Print</span><span class="token punctuation">(</span>jtest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    </pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token comment">/* 释放整条链表的内存数据 */</span></pre></td></tr><tr><td data-num="51"></td><td><pre>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>jtest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="52"></td><td><pre></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token comment">/* ------------------------- 以上为上篇的封装代码 ------------------------- */</span></pre></td></tr><tr><td data-num="54"></td><td><pre></pre></td></tr><tr><td data-num="55"></td><td><pre></pre></td></tr><tr><td data-num="56"></td><td><pre><span class="token comment">/* ------------------------- 数据保留并初始化变量 ------------------------- */</span>    </pre></td></tr><tr><td data-num="57"></td><td><pre>    jtest <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="58"></td><td><pre>    jfile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="59"></td><td><pre>    jissue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="60"></td><td><pre>    jyear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="61"></td><td><pre>    jmonth <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="62"></td><td><pre>    jday <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="63"></td><td><pre>    cJSON <span class="token operator">*</span>jtemp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="64"></td><td><pre>    </pre></td></tr><tr><td data-num="65"></td><td><pre><span class="token comment">/* ------------------------- 以下为本篇的解析代码 ------------------------- */</span></pre></td></tr><tr><td data-num="66"></td><td><pre></pre></td></tr><tr><td data-num="67"></td><td><pre>    <span class="token comment">/* 解析整段 JSON 数据 */</span></pre></td></tr><tr><td data-num="68"></td><td><pre>    jtest <span class="token operator">=</span> <span class="token function">cJSON_Parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="69"></td><td><pre>    <span class="token keyword">if</span> <span class="token punctuation">(</span>jtest <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="70"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="71"></td><td><pre>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parse fail.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="72"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="73"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="74"></td><td><pre></pre></td></tr><tr><td data-num="75"></td><td><pre>    <span class="token comment">/* 依次根据名称提取 JSON 数据（键值对） */</span></pre></td></tr><tr><td data-num="76"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="77"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"name:%s\n"</span><span class="token punctuation">,</span> jtemp<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="78"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="79"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"version:%s\n\n"</span><span class="token punctuation">,</span> jtemp<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="80"></td><td><pre></pre></td></tr><tr><td data-num="81"></td><td><pre>    <span class="token comment">/* 解析嵌套的 JSON 对象 */</span></pre></td></tr><tr><td data-num="82"></td><td><pre>    jfile <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="83"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="84"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"file:%s\n"</span><span class="token punctuation">,</span> jtemp<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="85"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="86"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"size:%f\n"</span><span class="token punctuation">,</span> jtemp<span class="token operator">-></span>valuedouble<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="87"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"unit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="88"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"unit:%s\n\n"</span><span class="token punctuation">,</span> jtemp<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="89"></td><td><pre></pre></td></tr><tr><td data-num="90"></td><td><pre>    <span class="token comment">/* 解析嵌套的 JSON 数组 */</span></pre></td></tr><tr><td data-num="91"></td><td><pre>    jissue <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"released"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="92"></td><td><pre>    jyear <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="93"></td><td><pre>    jmonth <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="94"></td><td><pre>    jday <span class="token operator">=</span> <span class="token function">cJSON_GetArrayItem</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="95"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"released date:%d "</span><span class="token punctuation">,</span> jyear<span class="token operator">-></span>valueint<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="96"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span> jmonth<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="97"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n\n"</span><span class="token punctuation">,</span> jday<span class="token operator">-></span>valueint<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="98"></td><td><pre></pre></td></tr><tr><td data-num="99"></td><td><pre>    <span class="token comment">/* 解析布尔型数据 */</span></pre></td></tr><tr><td data-num="100"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Is it necessary to update?\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="101"></td><td><pre>    jtemp <span class="token operator">=</span> <span class="token function">cJSON_GetObjectItem</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="102"></td><td><pre>    <span class="token function">cJSON_IsTrue</span><span class="token punctuation">(</span>jtemp<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"not update"</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="103"></td><td><pre>    <span class="token comment">/* 等同于 cJSON_IsFalse (jtemp) ? printf ("update") : printf ("not update"); */</span></pre></td></tr><tr><td data-num="104"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="105"></td><td><pre></pre></td></tr><tr><td data-num="106"></td><td><pre>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>jtest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="107"></td><td><pre>    </pre></td></tr><tr><td data-num="108"></td><td><pre>    <span class="token function">cJSON_free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="109"></td><td><pre></pre></td></tr><tr><td data-num="110"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="111"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>实例：</p><p><img data-src="image-20210131224342050.png" alt="image-20210131224342050" /></p><h1 id="内存管理"><a class="anchor" href="#内存管理">#</a> 内存管理</h1><p><strong>1、cJSON_Delete (); 函数</strong></p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* Delete a cJSON structure. */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">CJSON_PUBLIC</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>cJSON <span class="token operator">*</span>item<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    cJSON <span class="token operator">*</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">while</span> <span class="token punctuation">(</span>item <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        next <span class="token operator">=</span> item<span class="token operator">-></span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>item<span class="token operator">-></span>type <span class="token operator">&amp;</span> cJSON_IsReference<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token operator">-></span>child <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>item<span class="token operator">-></span>child<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>item<span class="token operator">-></span>type <span class="token operator">&amp;</span> cJSON_IsReference<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            global_hooks<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>item<span class="token operator">-></span>valuestring<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>item<span class="token operator">-></span>type <span class="token operator">&amp;</span> cJSON_StringIsConst<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>item<span class="token operator">-></span>string <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            global_hooks<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>item<span class="token operator">-></span>string<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        global_hooks<span class="token punctuation">.</span><span class="token function">deallocate</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        item <span class="token operator">=</span> next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>通过上面的代码可以了解到，当调用 cJSON_Delete (); 函数后，会通过 while 循环一直从当前节点删除释放其后面的节点，直至到尾部结点 null 节点为止；因此，在应用中，一般都是传入主链表的头结点来释放整个 JSON 数据包。</p><p><strong>2、cJSON_Hooks 里的钩子函数</strong></p><p>在 cJSON 项目里面，是留有 cJSON_InitHooks (); 外部引用内存管理函数的 API 接口的，其原型：</p><p><code>CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);</code></p><p>通过结构体 struct cJSON_Hooks 跟内部调用的内存分配挂钩，其 Hooks 原型：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">cJSON_Hooks</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token comment">/* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span>CJSON_CDECL <span class="token operator">*</span>malloc_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> sz<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">void</span> <span class="token punctuation">(</span>CJSON_CDECL <span class="token operator">*</span>free_fn<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span> cJSON_Hooks<span class="token punctuation">;</span></pre></td></tr></table></figure><p>一般情况是默认不调用 cJSON_InitHooks (); 函数的，因此，其内存分配管理处于默认状态，使用的是以下标准内存分配函数：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>_MSC_VER<span class="token punctuation">)</span></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment">/* work around MSVC error C2322: '...' address of dllimport '...' is not static */</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span> CJSON_CDECL <span class="token function">internal_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> CJSON_CDECL <span class="token function">internal_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pointer<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token function">free</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token operator">*</span> CJSON_CDECL <span class="token function">internal_realloc</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>pointer<span class="token punctuation">,</span> <span class="token class-name">size_t</span> size<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">return</span> <span class="token function">realloc</span><span class="token punctuation">(</span>pointer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">internal_malloc</span> <span class="token expression">malloc</span></span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">internal_free</span> <span class="token expression">free</span></span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">internal_realloc</span> <span class="token expression">realloc</span></span></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></pre></td></tr></table></figure><p>如此一来，假设我们在系统上跑了 FreeRTOS（或者其他 RTOS），那么，在默认情况下，如果使用其标准内存分配函数，这样，对于多线程来讲是不安全的，所以，可以利用该函数重新把内存分配函数定义调用；例如在 FreeRTOS 中：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>cJSON_Hooks cJSON_mem<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>cJSON_mem<span class="token punctuation">.</span>malloc_fn <span class="token operator">=</span> pvPortMalloc<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>cJSON_mem<span class="token punctuation">.</span>free_fn <span class="token operator">=</span> vPortFree<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token function">cJSON_InitHooks</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cJSON_mem<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>通过该钩子函数，把 cJSON 内部调用的内存分配处理，更换为线程安全的 pvPortMalloc (); 和 vPortFree (); 函数。</p><p><strong>3、cJSON_malloc (); 和 cJSON_free ();</strong></p><p>其原型分别为：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">CJSON_PUBLIC</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">cJSON_malloc</span><span class="token punctuation">(</span><span class="token class-name">size_t</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">CJSON_PUBLIC</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token function">cJSON_free</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>一般来说，cJSON_malloc (); 很少用，因为 cJSON 的数据处理 API 函数都默认会自动分配内存；而 cJSON_free (); 则更多的是用来 free cJSON 格式化出来的数据（即调用 print 类的 API 接口）。</p>]]></content>
      
      
      <categories>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cJSON库 API解析（上）</title>
      <link href="//docs/cJSON/cJSON%E5%BA%93%20API%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>//docs/cJSON/cJSON%E5%BA%93%20API%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<blockquote><p>cJSON 项目可以说是一个很适合学习及应用 C 语言中的链表的项目，刨析它的源码，你会惊叹它设计之巧妙，其代码为之简洁；同时，在嵌入式应用场景中也经常发现它的身影。</p><p>本系列分为上下两篇，其中上篇以应用分析其 JSON 数据封装为主。</p></blockquote><h1 id="介绍"><a class="anchor" href="#介绍">#</a> 介绍</h1><p>在认识 cJSON 之前，先来认识一下 JSON：</p><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript 对象表示法，读作 /ˈdʒeɪsən/）是一种由道格拉斯・克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。JSON 采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这些特性使 JSON 成为理想的数据交换语言。</p><p>其官网：<span class="exturl" data-url="aHR0cHM6Ly93d3cuanNvbi5vcmcvanNvbi1lbi5odG1s">https://www.json.org/json-en.html</span></p><p>而 cJSON，顾名思义就是一个使用 C 语言编写的 JSON 数据解析器，目前 cJSON 项目托管在 Github 上，仓库地址如下：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0RhdmVHYW1ibGUvY0pTT04lRUYlQkMlOUIlRTQlQkIlQTUlRTUlODklOEQlRTclOUElODQlRTYlOTclQTclRTclODklODglRTYlOUMlQUMlRTUlODglOTklRTYlOTglQUYlRTUlQUQlOTglRTYlOTQlQkUlRTUlOUMlQTglRUYlQkMlOUFodHRwczovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9janNvbi9maWxlcy8lRTQlQjglOEElRTklOUQlQTIlRUYlQkMlOEMlRTQlQkQlODYlRTclOEUlQjAlRTUlQjclQjIlRTUlODElOUMlRTYlQUQlQTIlRTYlOUIlQjQlRTYlOTYlQjAlRUYlQkMlOEMlRTclQkIlQTclRTglODAlOEMlRTglQkQlQUMlRTUlODglQjA=">https://github.com/DaveGamble/cJSON；以前的旧版本则是存放在：https://sourceforge.net/projects/cjson/files/ 上面，但现已停止更新，继而转到</span> Github 上了。</p><h1 id="json语法"><a class="anchor" href="#json语法">#</a> JSON 语法</h1><p>JSON 的基本数据类型：</p><ol><li><p>对象（<em>object</em>）：若干无序的 “键值对” (key-value pairs)，其中键是数值或字符串，以花括号  <code>&#123;</code>  开始，并以  <code>&#125;</code>  结束。</p></li><li><p>数组 / 值的有序列表（array）：有序的零个或者多个值，使用方括号  <code>[ ]</code>  括起来。</p></li><li><p>字符串（<em>string</em>）：以双引号  <code>&quot; &quot;</code>  括起来的零个或多个 Unicode 码位。支持反斜杠开始的转义字符序列。</p></li><li><p>数值（<em>number</em>）：不区分整数与浮点数。JavaScript 用双精度浮点数 double 表示所有数值。</p></li><li><p>布尔值（<em>boolean</em>）：表示为  <code>true</code>  或者  <code>false</code>  。</p></li><li><p>null 类型：值写为  <code>null</code></p></li></ol><p>1、JSON 对象是一个若干无序的 &quot;名称 / 值&quot; 键值对的集合：</p><ul><li>以 &quot; <code>&#123;</code> &quot;开始，以&quot; <code>&#125;</code> &quot; 结束，允许嵌套使用；</li><li>每个名称和值成对出现，名称和值之间使用 &quot; <code>:</code> &quot; 分隔；</li><li>键值对之间用 &quot; <code>,</code> &quot; 分隔</li><li>在这些字符前后允许存在无意义的空白符；</li></ul><p>2、JSON 数组是一个有序的零个或者多个值的序列表：</p><ul><li>以 &quot; <code>[</code> &quot;开始，以&quot; <code>]</code> &quot; 结束，允许嵌套使用；</li><li>每个值可以为任意类型，可以是双引号括起来的字符串（<em>string</em>）、数值（<em>number</em>）、 <code>true</code> 、 <code>false</code> 、  <code>null</code> 、对象（<em>object</em>）或者数组（<em>array</em>）；</li><li>元素之间用 &quot; <code>,</code> &quot; 分隔</li><li>在这些元素前后允许存在无意义的空白符；</li></ul><h1 id="cjson结构"><a class="anchor" href="#cjson结构">#</a> cJSON 结构</h1><p>在下载的 cJSON 源码中，实际用到的文件只有两个（cJSON.c 和 cJSON.h），因此 cJSON 具有超轻便，可移植，单文件的特点。</p><p>对于 cJSON 文件，整个的数据结构就主要用到以下结构体：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/* The cJSON structure: */</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">cJSON</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">cJSON</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">cJSON</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment">/* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">struct</span> <span class="token class-name">cJSON</span> <span class="token operator">*</span>child<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">/* The type of the item, as above. */</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">int</span> type<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment">/* The item's string, if type==cJSON_String  and type == cJSON_Raw */</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span>valuestring<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment">/* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">int</span> valueint<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token comment">/* The item's number, if type==cJSON_Number */</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">double</span> valuedouble<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token comment">/* The item's name string, if this item is the child of, or is in the list of subitems of an object. */</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">char</span> <span class="token operator">*</span>string<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre><span class="token punctuation">&#125;</span> cJSON<span class="token punctuation">;</span></pre></td></tr></table></figure><p>从上面的代码可以看出，cJSON 的设计思想是 --- 链表。</p><p>然后我们分析一下各部分的成员信息：</p><ul><li><code>type</code> ：用于表示该键值对中值的类型；</li><li><code>valuestring</code> ：如果键值类型 (type) 是字符串，则将该指针指向键值；</li><li><code>valueint</code> ：如果键值类型 (type) 是整数，则将该指针指向键值；</li><li><code>valuedouble</code> ：如果键值类型 (type) 是浮点数，则将该指针指向键值；</li><li><code>String</code> ：用于表示当前键值对的名称；</li></ul><p>还有两个 cJSON 格式的结构体指针：</p><ul><li><code>next</code> ：指向下一个键值对</li><li><code>prev</code> ：指向上一个键值对</li></ul><p>最后一个 cJSON 格式的结构体指针：</p><ul><li><code>child</code> ：该子指针指向当前数组 / 对象中的节点</li></ul><p>如果是想要分析 cJSON 它的代码设计，除开那两个承接上下节点的  <code>next</code>  和  <code>prev</code>  结构体指针，那么你还要重点关注上面说到  <code>type</code>  成员，它支持以下定义：</p><blockquote><p>The type can be one of the following:</p><ul><li><code>cJSON_Invalid</code>  (check with  <code>cJSON_IsInvalid</code> ): Represents an invalid item that doesn't contain any value. You automatically have this type if you set the item to all zero bytes.</li><li><code>cJSON_False</code>  (check with  <code>cJSON_IsFalse</code> ): Represents a  <code>false</code>  boolean value. You can also check for boolean values in general with  <code>cJSON_IsBool</code> .</li><li><code>cJSON_True</code>  (check with  <code>cJSON_IsTrue</code> ): Represents a  <code>true</code>  boolean value. You can also check for boolean values in general with  <code>cJSON_IsBool</code> .</li><li><code>cJSON_NULL</code>  (check with  <code>cJSON_IsNull</code> ): Represents a  <code>null</code>  value.</li><li><code>cJSON_Number</code>  (check with  <code>cJSON_IsNumber</code> ): Represents a number value. The value is stored as a double in  <code>valuedouble</code>  and also in  <code>valueint</code> . If the number is outside of the range of an integer,  <code>INT_MAX</code>  or  <code>INT_MIN</code>  are used for  <code>valueint</code> .</li><li><code>cJSON_String</code>  (check with  <code>cJSON_IsString</code> ): Represents a string value. It is stored in the form of a zero terminated string in  <code>valuestring</code> .</li><li><code>cJSON_Array</code>  (check with  <code>cJSON_IsArray</code> ): Represent an array value. This is implemented by pointing  <code>child</code>  to a linked list of  <code>cJSON</code>  items that represent the values in the array. The elements are linked together using  <code>next</code>  and  <code>prev</code> , where the first element has  <code>prev.next == NULL</code>  and the last element  <code>next == NULL</code> .</li><li><code>cJSON_Object</code>  (check with  <code>cJSON_IsObject</code> ): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in  <code>string</code> .</li><li><code>cJSON_Raw</code>  (check with  <code>cJSON_IsRaw</code> ): Represents any kind of JSON that is stored as a zero terminated array of characters in  <code>valuestring</code> . This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn't check if it is valid JSON.</li></ul><p>Additionally there are the following two flags:</p><ul><li><code>cJSON_IsReference</code> : Specifies that the item that  <code>child</code>  points to and/or  <code>valuestring</code>  is not owned by this item, it is only a reference. So  <code>cJSON_Delete</code>  and other functions will only deallocate this item, not its  <code>child</code> / <code>valuestring</code> .</li><li><code>cJSON_StringIsConst</code> : This means that  <code>string</code>  points to a constant string. This means that  <code>cJSON_Delete</code>  and other functions will not try to deallocate  <code>string</code> .</li></ul></blockquote><p>&lt;br/&gt;</p><h1 id="json数据封装"><a class="anchor" href="#json数据封装">#</a> JSON 数据封装</h1><p>封装一个 JSON 格式的数据包，其实就是创建链表和向链表中添加节点的过程。</p><p>在 cJSON 源码里面是存放着很多 API 接口的，但是，一般来说我们并不是全部用到，而且有些函数是辅助函数，例如：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre>cJSON <span class="token operator">*</span>Info<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>Info <span class="token operator">=</span> <span class="token function">cJSON_CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>Info<span class="token punctuation">,</span> <span class="token string">"Nationality"</span><span class="token punctuation">,</span> <span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment">/* 等价于 */</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>cJSON <span class="token operator">*</span>Info<span class="token punctuation">,</span> <span class="token operator">*</span>jtext<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>Info <span class="token operator">=</span> <span class="token function">cJSON_CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>jtext <span class="token operator">=</span> <span class="token function">cJSON_CreateString</span><span class="token punctuation">(</span><span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token function">cJSON_AddItemToObject</span><span class="token punctuation">(</span>Info<span class="token punctuation">,</span> <span class="token string">"Nationality"</span><span class="token punctuation">,</span> jtext<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>然后下面就分析一些常用的 API 函数：</p><p><strong>1、创建原始框架：</strong></p><ul><li>数组（等于创建了一个空的  <code>[ ]</code> ）： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);</code></li><li>对象（等于创建了一个空的  <code>&#123; &#125;</code> ）： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);</code></li></ul><p><strong>2、追加类型值：</strong></p><ul><li><p>数组： <code>CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item);</code></p></li><li><p>对象： <code>CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);</code></p></li></ul><p><strong>3、追加对应的值到对象中：</strong></p><ul><li>null： <code>CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);</code></li><li>True： <code>CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);</code></li><li>False： <code>CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);</code></li><li>布尔值（实际为 True 和 False 合并）： <code>CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);</code></li><li>数值： <code>CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);</code></li><li>字符串： <code>CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);</code></li><li>对象： <code>CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);</code></li><li>数组： <code>CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);</code></li></ul><p><strong>4、创建同一类型的值到数组中：</strong></p><ul><li>整形： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);</code></li><li>单精度： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);</code></li><li>双精度： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);</code></li><li>字符串： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count);</code></li></ul><p><strong>5、创建对应类型的值</strong></p><ul><li>null： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);</code></li><li>True： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);</code></li><li>False： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);</code></li><li>布尔值： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);</code></li><li>数值： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);</code></li><li>字符串： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);</code></li></ul><h1 id="示例"><a class="anchor" href="#示例">#</a> 示例</h1><figure class="highlight json"><figcaption data-lang="JSON"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cJSON"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"v1.7.14"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>  <span class="token property">"file"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"cJSON.c"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">75.8</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token property">"unit"</span><span class="token operator">:</span> <span class="token string">"KB"</span></pre></td></tr><tr><td data-num="8"></td><td><pre>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token property">"released"</span><span class="token operator">:</span> <span class="token punctuation">[</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token number">2020</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token string">"Sep"</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token number">3</span></pre></td></tr><tr><td data-num="13"></td><td><pre>  <span class="token punctuation">]</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="14"></td><td><pre>  <span class="token property">"latest"</span><span class="token operator">:</span> <span class="token boolean">true</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以打印输出上面为例，建立以下代码：</p><figure class="highlight c"><figcaption data-lang="c"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"cJSON.h"</span></span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    cJSON <span class="token operator">*</span>jtest <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    cJSON <span class="token operator">*</span>jfile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    cJSON <span class="token operator">*</span>jissue <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    cJSON <span class="token operator">*</span>jyear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    cJSON <span class="token operator">*</span>jmonth <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    cJSON <span class="token operator">*</span>jday <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token keyword">char</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token comment">/* 创建一个 JSON 格式的主对象 (主链表头结点) */</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    jtest <span class="token operator">=</span> <span class="token function">cJSON_CreateObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token comment">/* 追加字符串类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cJSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"version"</span><span class="token punctuation">,</span> <span class="token string">"v1.7.14"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token comment">/* 追加一个对象到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    jfile <span class="token operator">=</span> <span class="token function">cJSON_AddObjectToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    <span class="token comment">/* 往追加的对象添加对应的值 */</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"cJSON.c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token function">cJSON_AddNumberToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">75.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token function">cJSON_AddStringToObject</span><span class="token punctuation">(</span>jfile<span class="token punctuation">,</span> <span class="token string">"unit"</span><span class="token punctuation">,</span> <span class="token string">"KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    </pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token comment">/* 创建一个 JSON 格式的数组 (另一个链表头结点) */</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    jissue <span class="token operator">=</span> <span class="token function">cJSON_CreateArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token comment">/* 创建相应的值并把这些值添加到数组里 */</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    jyear <span class="token operator">=</span> <span class="token function">cJSON_CreateNumber</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jyear<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    jmonth <span class="token operator">=</span> <span class="token function">cJSON_CreateString</span><span class="token punctuation">(</span><span class="token string">"Sep"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jmonth<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    jday <span class="token operator">=</span> <span class="token function">cJSON_CreateNumber</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token function">cJSON_AddItemToArray</span><span class="token punctuation">(</span>jissue<span class="token punctuation">,</span> jday<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token comment">/* 把已经填好的数据的数组插入到主对象中 */</span></pre></td></tr><tr><td data-num="40"></td><td><pre>    <span class="token function">cJSON_AddItemToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"released"</span><span class="token punctuation">,</span> jissue<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token comment">/* 追加一个值为 True 的布尔类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token function">cJSON_AddTrueToObject</span><span class="token punctuation">(</span>jtest<span class="token punctuation">,</span> <span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre></pre></td></tr><tr><td data-num="45"></td><td><pre>    <span class="token comment">/* 打印 JSON 对象 (整条链表) 的所有数据 */</span></pre></td></tr><tr><td data-num="46"></td><td><pre>    str <span class="token operator">=</span> <span class="token function">cJSON_Print</span><span class="token punctuation">(</span>jtest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="48"></td><td><pre></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token function">cJSON_free</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="50"></td><td><pre>    <span class="token function">cJSON_Delete</span><span class="token punctuation">(</span>jtest<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="51"></td><td><pre></pre></td></tr><tr><td data-num="52"></td><td><pre>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="53"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>实例：</p><p><img data-src="image-20210130174615600.png" alt="image-20210130174615600" /></p><h1 id="注意事项"><a class="anchor" href="#注意事项">#</a> 注意事项</h1><p>1、在调用了 create 接口的数据，并且用完一个完整的 JSON 格式包后，必须要使用 cJSON_Delete (); 释放内存，且不说不释放会造成泄露数据，在嵌入式中，内存容量可是很少的，很容易就耗完内存。</p><p>2、cJSON_Delete (); 函数，并不是每调用一个 create 接口，等用完都要一一对应释放，而是要释放主链表，简单的来说要处理的是头一个创建的数据类型，对于后期往其追加的数据，cJSON_Delete (); 函数会自动把插入进来的节点删除掉，这个在下篇再详细分析。</p><p>3、cJSON 里面的 Print 接口格式化出来返回的数据，需要调用 cJSON_free (); 释放。cJSON 的内存申请涉及到初始化钩子函数 cJSON_InitHooks (); 那里，这个也是下篇分析。</p>]]></content>
      
      
      <categories>
          
          <category> middleware </category>
          
      </categories>
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑门、锁存器和触发器</title>
      <link href="//docs/%E9%80%BB%E8%BE%91%E9%97%A8%E3%80%81%E9%94%81%E5%AD%98%E5%99%A8%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
      <url>//docs/%E9%80%BB%E8%BE%91%E9%97%A8%E3%80%81%E9%94%81%E5%AD%98%E5%99%A8%E5%92%8C%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>好久没写硬件的笔记了，写这篇笔记是因为在网上或者在现有的书上查阅相关知识点的时候，发现大多数东西都是一略带过、不全面，而且内容讲的有点沉闷，容易让人呼呼入睡（ps：这里绝对没有瞧不起作者的意思哈，可能风格有点不适应），所以想着以后可能也会用到，还是自己总结一篇吧。</p><p>本篇主要分析半导体存储电路（其中包括时序图跟真值表），但由于涉及到逻辑门电路，所以就一并放在一起总结了。嘛，原本的标题是想写 “半导体存储电路分析” 的。。。</p></blockquote><h1 id="逻辑门电路"><a class="anchor" href="#逻辑门电路">#</a> 逻辑门电路</h1><h2 id="与-或-非"><a class="anchor" href="#与-或-非">#</a> 与、或、非</h2><ul><li><p>与门</p><p><img data-src="AND.jpg" alt="AND" /></p><p>特点：所有输入为高电平时（逻辑 1），才会有高电平（逻辑 1）输出；其中一个输入为低电平（逻辑 0）则出低电平（逻辑 0）。</p><p><strong>真值表：</strong></p><table><thead><tr><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A  and  B</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><mark>总结：遇 0 为 0。</mark></p></li><li><p>或门</p><p><img data-src="OR.jpg" alt="OR" /></p><p>特点：其中一个输入为高电平时（逻辑 1），输出为高电平（逻辑 1）；只有当所有输入为低电平（逻辑 0）才出低电平（逻辑 0）。</p><p><strong>真值表：</strong></p><table><thead><tr><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A  or  B</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><mark>总结：遇 1 为 1。</mark></p></li><li><p>非门</p><p><img data-src="NOT.jpg" alt="NOT" /></p><p>特点：输出的电平与输入的电平（逻辑）相反。</p><p><strong>真值表：</strong></p><table><thead><tr><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">not  A</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p><mark>总结：状态取反。</mark></p></li></ul><h2 id="异或和同或"><a class="anchor" href="#异或和同或">#</a> 异或和同或</h2><ul><li><p>异或</p><p><img data-src="XOR.jpg" alt="XOR" /></p><p>特点：输入的电平相同时，输出为低电平（逻辑 0）；若输入的电平不同，则输出高电平（逻辑 1）。</p><p><strong>真值表：</strong></p><table><thead><tr><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A  xor  B</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr></tbody></table><p><mark>总结：相同为 0，不同为 1。</mark></p></li><li><p>同或</p><p><img data-src="XNOR.jpg" alt="XNOR" /></p><p>特点：只有当输入的电平相同时，输出才为高电平（逻辑 1）；而输入的电平不同时，输出低电平（逻辑 0）。</p><p><strong>真值表：</strong></p><table><thead><tr><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输入</strong></th><th style="text-align:center"><strong>输出</strong></th></tr></thead><tbody><tr><td style="text-align:center">A</td><td style="text-align:center">B</td><td style="text-align:center">A  xnor  B</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p><mark>总结：不同为 0，相同为 1。</mark></p></li></ul><h2 id="与非和或非"><a class="anchor" href="#与非和或非">#</a> 与非和或非</h2><p>与非和或非，其实相当于与门和或门输出取反：</p><p><img data-src="X.jpg" alt="X" /></p><p>真值表这里就不放了，其实就是把与门和或门的输出状态取反。。。</p><h2 id="逻辑门电路实现"><a class="anchor" href="#逻辑门电路实现">#</a> 逻辑门电路实现</h2><p>逻辑门电路的实现，可由三极管或者 CMOS 管构建而成，可以看以前的文章：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyOTkyMDg0L2FydGljbGUvZGV0YWlscy85ODc4NDk2Mw==">三极管 --- 初识 (图文并茂)</span></p><h1 id="存储电路"><a class="anchor" href="#存储电路">#</a> 存储电路</h1><p><strong>基本概念：</strong></p><ul><li><strong>存储单元</strong>：存储一位数据的电路。可分为<strong>静态存储单元</strong>和<strong>动态存储单元</strong>两大类。静态存储单元由门电路连接而成，其中包括各种电路结构形式的<strong>锁存器</strong>和<strong>触发器</strong>，只要保持通电，静态存储单元的状态会一直保持下去。动态存储单元则是利用<strong>电容</strong>的电荷存储效应来存储数据的，由于电容存储的电荷会随着时间的推移逐渐泄露，必须定期地进行 “刷新”，才能保证数据不会丢失。</li><li><strong>寄存器</strong>：存储一组数据的电路。由 N 个触发器构成的寄存器可以存储一组 N 位的二值数据。</li><li><strong>存储器</strong>：存储大量数据的电路。存储器种类虽然很多，但它们的基本结构形式都是由<strong>存储矩阵</strong>和<strong>读 / 写控制电路</strong>两部分组成的。从存储功能上讲，可分为<strong>随机存储器</strong>（Random Access  Memory，简称 RAM）和<strong>只读存储器</strong>（Read Only Memory ，简称 ROM）两大类。随机存储器又分成<strong>静态随机存储器</strong>（SRAM）和<strong>动态随机存储器</strong>（DRAM）两类；而只读存储器又有<strong>掩模 ROM</strong>、<strong>可编程 ROM</strong>（PRAM）和<strong>可擦除可编程 ROM</strong>（EPRAM）几种不同类型。</li></ul><h1 id="锁存器和触发器"><a class="anchor" href="#锁存器和触发器">#</a> 锁存器和触发器</h1><p>下面主要分析硬件电路中经常接触的<strong>静态存储单元</strong>，那么就先来了解一下<strong>锁存器</strong>和<strong>触发器</strong>之间的关系：</p><p>触发器的线路图由逻辑门组合而成，其结构均由 SR 锁存器派生而来（广义的触发器包括锁存器）；</p><p><strong>触发器</strong>除了自身的输入信号外，还带有 CLK 时钟信号线，通过时钟信号的变化，使得触发器的次态仅仅取决于 CLK 信号下降沿（或上升沿）到达时刻输入信号的状态，以此来增强靠干扰能力，因此，触发器也叫边沿触发器；</p><p>而<strong>锁存器</strong>并没有 CLK 时钟信号线作为辅助，只有自身的输入信号，但是，通过改进（增加一条使能信号线）可以产生新的门控锁存器，此时锁存器上多了一条使能信号线，如果在使能信号线上给予一定频率的脉冲信号，那么门控锁存器就相当于触发器了。</p><p>知识补充：<span class="exturl" data-url="aHR0cHM6Ly9jaXJjdWl0Z2xvYmUuY29tL2RpZmZlcmVuY2UtYmV0d2Vlbi1sYXRjaC1hbmQtZmxpcC1mbG9wLmh0bWw=">https://circuitglobe.com/difference-between-latch-and-flip-flop.html</span></p><h1 id="锁存器"><a class="anchor" href="#锁存器">#</a> 锁存器</h1><p>锁存器的类型有很多种：S-R、J-K、T and D latches。这里只介绍比较常用的 S-R latch and Gated D latch。</p><h2 id="sr锁存器"><a class="anchor" href="#sr锁存器">#</a> SR 锁存器</h2><p><img data-src="R-S_mk2.gif" alt="R-S_mk2" /></p><p>SR 锁存器（Set-Reset Latch）是静态存储单元当中最基本、也是电路结构最简单的一种。通常它由两个<strong>或非门</strong>或者<strong>与非门</strong>组成。</p><p><strong>Ⅰ、电路组成：</strong></p><ul><li><p>由<strong>或非门</strong>构成</p><p><img data-src="Logic_Design_NOR_Latches.jpg" alt="Logic_Design_NOR_Latches" /></p></li><li><p>由<strong>与非门</strong>构成</p><p><img data-src="Logic_Design_NAND_Latches.jpg" alt="Logic_Design_NAND_Latches" /></p></li></ul><p><strong>Ⅱ、状态分析：</strong></p><p>从上面的两种构成进行比较，根据它们对应的状态表可以看出，当 S、R 信号为高电平（逻辑 1）【对应的，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 信号（由于符号表示的是非的关系）就为低电平（逻辑 0）】，就相当于这两个状态表高亮部分，所以无论是由哪个逻辑门构成，其输出状态都是一样的；因此，找其中一个表对照着理解就好了，那么就来稍微分析一下吧：</p><ul class="task-list"><li class="task-list-item"><p><input type="checkbox" id="cbx_0" disabled="true" /><label for="cbx_0"> 当输入的 S = 0、R = 1（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 1、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0），输出 Q = 0 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> = 1（定义为 0 状态）；</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_1" disabled="true" /><label for="cbx_1"> 当输入的 S = 1、R = 0（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 1），输出 Q = 1 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> = 0（定义为 1 状态）；</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_2" disabled="true" /><label for="cbx_2"> 当输入的 S = R = 0（ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 1）；输出将会保持；</label></p></li><li class="task-list-item"><p><input type="checkbox" id="cbx_3" disabled="true" /><label for="cbx_3"> 当输入的 S = 1、R = 1（<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0），输出 Q 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 其状态是不确定的；因此，在 SR 锁存器里，有一条约束条件：S・R = 0（即不应该出现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0，这种情况）。</label></p></li></ul><p><strong>Ⅲ、时序分析：</strong></p><p>以<strong>与非门</strong>构成电路为例：</p><p><img data-src="SR%20latch.png" alt="SR latch" /></p><p>在上图可以看到， t3 ~ t4 时刻，输入端出现了 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0 的状态，但由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 首先回到了高电平，所以 SR 锁存器的次态仍是可以确定的；可能你会觉得，上面不是说了无法确定状态吗？这是由于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0 时会出现非定义的 Q =  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> = 1 的非法状态（要知道我们只定义了 0 和 1 的状态），而且当 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 和 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> 同时回到高电平以后锁存器的状态难以确定，因此一般情况下还是避免这种 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> = 0 的状态；同时，由于这个缺陷，<strong>JK 触发器</strong>产生了，下面会讲。</p><p><strong>Ⅳ、电路改进：</strong></p><p>从上面可以得知，由<strong>与非门</strong>构成的 SR 触发器，输入的电平（逻辑）是反向的输入（即为  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>S</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{S}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span>、<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>R</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{R}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8833300000000001em;vertical-align:0em;"></span><span class="mord overline"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span></span></span></span></span></span></span> ），因此，人们在电路的前端输入部分添加了转换功能，并且引入了使能控制信号，如下图：</p><p><img data-src="Logic_Design_gated_SR_latch.jpg" alt="Logic_Design_gated_SR_latch" /></p><p>于是乎，把上面的电路称之为：<strong>门控 SR 锁存器</strong></p><p>门控使能信号（一般表示为 E 或者 C）的作用：</p><table><thead><tr><th style="text-align:center">E/C</th><th style="text-align:center">Action</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">No action (keep state)</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">The same as non-clocked SR latch</td></tr></tbody></table><h2 id="门控-d锁存器"><a class="anchor" href="#门控-d锁存器">#</a> 门控 D 锁存器</h2><p>在上面已经见识到了 <strong>门控 SR 锁存器</strong>，那么稍微修改一下就会得到 <strong>门控 D 锁存器</strong>，由于是从 SR 锁存器上进行的修改，所以也存在着由<strong>或非门</strong>或者<strong>与非门</strong>所组成电路。</p><p><strong>Ⅰ、电路组成：</strong></p><ul><li><p>基于 SR NAND 锁存器的门控 D 锁存器</p><p><img data-src="676px-D-Type_Transparent_Latch.svg.png" alt="676px-D-Type_Transparent_Latch.svg" /></p></li><li><p>基于 SR NOR 锁存器的门控 D 锁存器</p><p><img data-src="676px-D-type_Transparent_Latch_(NOR).svg.png" alt="676px-D-type_Transparent_Latch_(NOR).svg" /></p></li></ul><p>对应上面两个门控 D 锁存器，其真值表都是一样的：</p><table><thead><tr><th style="text-align:center">E</th><th style="text-align:center">D</th><th style="text-align:center">Q</th><th style="text-align:center" Q="">\overline</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center">Qprev</td><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>Q</mi><mo stretchy="true">‾</mo></mover></mrow><annotation encoding="application/x-tex">\overline{Q}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0777700000000001em;vertical-align:-0.19444em;"></span><span class="mord overline"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8833300000000001em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">Q</span></span></span><span style="top:-3.80333em;"><span class="pstrut" style="height:3em;"></span><span class="overline-line" style="border-bottom-width:0.04em;"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>prev</td><td style="text-align:center">No change</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">Reset</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">Set</td></tr></tbody></table><p>从真值表上看，可以知道，在使能信号输入为高电平（逻辑 1）时，D 锁存器才起作用，否则，输出信号将保持原状态；并且，当 D 锁存器起作用时，输出的信号 Q 状态跟 D 输入状态一致，因此，D 锁存器也叫 D 跟随。</p><p><strong>Ⅱ、时序分析</strong></p><p><img data-src="Gated%20D%20latch.png" alt="Gated D latch" /></p><p>锁存器部分相关链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5jaXJjdWl0dmVyc2Uub3JnL2RvY3MvTGF0Y2hlcw==">https://learn.circuitverse.org/docs/Latches</span></p><h1 id="触发器"><a class="anchor" href="#触发器">#</a> 触发器</h1><p>触发器的类型同样也有很多种：S-R、J-K、T and D Flip flops。这里也只是分析常见的 J-K、T and D Flip flops。</p><p>根据时钟信号触发的不同，可以分为两种情况（上升沿触发和下降沿触发）：</p><p><img data-src="Logic_Design_SR_flip_flop_symbol.jpg" alt="Logic_Design_SR_flip_flop_symbol" /></p><p>从上图可以看到，上升沿触发和下降沿触发根本区别在于时钟信号输入端是否多了个非门。</p><h2 id="jk触发器"><a class="anchor" href="#jk触发器">#</a> JK 触发器</h2><p>根据边沿触发的不同，有以下两种逻辑符号：</p><p><img data-src="Logic_Design_JK_flip_flop_symbol.jpg" alt="Logic_Design_JK_flip_flop_symbol" /></p><p><strong>以上升沿为例，其电路组成如下：</strong></p><p><img data-src="jk%20flip%20flop.png" alt="jk flip flop" /></p><p><strong>对应的真值表：</strong></p><table><thead><tr><th style="text-align:center">触发</th><th style="text-align:center">J</th><th style="text-align:center">K</th><th style="text-align:center">Q</th><th style="text-align:center">Qnext</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↘</mo></mrow><annotation encoding="application/x-tex">\searrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↘</span></span></span></span></td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center">Qprev</td><td style="text-align:center">Q</td><td style="text-align:center">No change</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">Hold state</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">Hold state</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">Reset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">Reset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">Set</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">Set</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">Toggle</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">Toggle</td></tr></tbody></table><p><strong>时序分析：</strong></p><p><img data-src="JK%20Flip-Flop.png" alt="JK Flip-Flop" /></p><p><strong>特征方程式：</strong></p><p><img data-src="JK.png" alt="JK" /></p><h2 id="t触发器"><a class="anchor" href="#t触发器">#</a> T 触发器</h2><p>根据边沿触发的不同，有以下两种逻辑符号：</p><p><img data-src="Logic_Design_T_flip_flop_symbol.jpg" alt="Logic_Design_T_flip_flop_symbol" /></p><p><strong>以上升沿为例，其电路组成如下：</strong></p><p><img data-src="T%20flip%20flop.png" alt="T flip flop" /></p><p><strong>对应的真值表：</strong></p><table><thead><tr><th style="text-align:center">触发</th><th style="text-align:center">T</th><th style="text-align:center">Q</th><th style="text-align:center">Qnext</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↘</mo></mrow><annotation encoding="application/x-tex">\searrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↘</span></span></span></span></td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center">Qprev</td><td style="text-align:center">Q</td><td style="text-align:center">No change</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">Hold state</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">Hold state</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">Toggle</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">Toggle</td></tr></tbody></table><p><strong>时序分析：</strong></p><p><img data-src="T%20Filp-Flop.png" alt="T Filp-Flop" /></p><p><strong>特征方程式：</strong></p><p><img data-src="T.png" alt="T" /></p><h2 id="d触发器"><a class="anchor" href="#d触发器">#</a> D 触发器</h2><p>根据边沿触发的不同，有以下两种逻辑符号：</p><p><img data-src="Logic_Design_D_flip_flop_symbols.jpg" alt="Logic_Design_D_flip_flop_symbols" /></p><p><strong>以上升沿为例，其电路组成如下：</strong></p><p><img data-src="D%20flip%20flop.png" alt="D flip flop" /></p><p><strong>对应的真值表：</strong></p><table><thead><tr><th style="text-align:center">触发</th><th style="text-align:center">D</th><th style="text-align:center">Q</th><th style="text-align:center">Qnext</th><th style="text-align:center">Comment</th></tr></thead><tbody><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↘</mo></mrow><annotation encoding="application/x-tex">\searrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↘</span></span></span></span></td><td style="text-align:center"><strong>X</strong></td><td style="text-align:center">Qprev</td><td style="text-align:center">Q</td><td style="text-align:center">No change</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">Reset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">Reset</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">Set</td></tr><tr><td style="text-align:center"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>↗</mo></mrow><annotation encoding="application/x-tex">\nearrow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mrel">↗</span></span></span></span></td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">Set</td></tr></tbody></table><p><strong>时序分析：</strong></p><p><img data-src="D%20Filp-Flop.png" alt="D Filp-Flop" /></p><p><strong>特征方程式：</strong></p><p><img data-src="D.png" alt="D" /></p><p>触发器部分相关链接：<span class="exturl" data-url="aHR0cHM6Ly9sZWFybi5jaXJjdWl0dmVyc2Uub3JnL2RvY3MvZmxpcGZsb3A=">https://learn.circuitverse.org/docs/flipflop</span></p><h1 id="相关资料"><a class="anchor" href="#相关资料">#</a> 相关资料</h1><p><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRmxpcC1mbG9wXyhlbGVjdHJvbmljcyk=">https://en.wikipedia.org/wiki/Flip-flop_(electronics)</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0tYVFIMHliTWQzVSZhbXA7bGlzdD1SRENNVUNTWDNNUjBnbktEeHlYQXlsald6bTBRJmFtcDtzdGFydF9yYWRpbz0x">https://www.youtube.com/watch?v=-aQH0ybMd3U&amp;list=RDCMUCSX3MR0gnKDxyXAyljWzm0Q&amp;start_radio=1</span></p><p><span class="exturl" data-url="aHR0cDovL3loaHVhbmcxOTY2LmJsb2dzcG90LmNvbS8yMDE5LzA2L2xhdGNoLWZsaXAtZmxvcC5odG1s">http://yhhuang1966.blogspot.com/2019/06/latch-flip-flop.html</span></p><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuZWxlY3Ryb25pY3MtdHV0b3JpYWxzLndzL3NlcXVlbnRpYWwvc2VxXzEuaHRtbA==">https://www.electronics-tutorials.ws/sequential/seq_1.html</span></p>]]></content>
      
      
      
        <tags>
            
            <tag> history </tag>
            
            <tag> 电子电路 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
