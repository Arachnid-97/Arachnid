{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"mcu\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/Cortex-M-abnormal/",
            "url": "https://arachnid.cc/Cortex-M-abnormal/",
            "title": "Cortex-M3/M4/M7 故障异常分析",
            "date_published": "2021-07-17T04:58:01.000Z",
            "content_html": "<blockquote>\n<p>在程序开发阶段，少不了 Debug 调试，除去编程架构搭建不稳定所造成的错误外，大部分会出现或多或少的故障异常，而这些异常有可能是粗心或者对编程了解不到位所导致的 ‘ 堆栈溢出 ’ 、‘ 数组下标越界 ’ 、‘ 数学运算异常 ’ 等等；而本篇则主要以常见的进入 Hardfault 中断来进行分析错误来源。</p>\n</blockquote>\n<h1 id=\"arm-cortex-m核心\"><a class=\"anchor\" href=\"#arm-cortex-m核心\">#</a> ARM Cortex-M 核心</h1>\n<p><strong>ARM</strong> 架构，过去称作<strong>高级精简指令集机器</strong>（英语：Advanced RISC Machine，更早称作艾康精简指令集机器，Acorn RISC Machine），是一个精简指令集（RISC）处理器架构家族，其广泛地使用在许多嵌入式系统设计。</p>\n<p>而对于 <strong>ARM Cortex-M</strong> 是 ARM 架构处理器核心中，低阶系列的统称，由安谋控股所授权。这组核心的特点为低成本以及高能源效率的微处理器而优化设计，已有上千万个消费性设备中有此系列的微处理器。此系列核心包括 Cortex-M0、Cortex-M0+、Cortex-M1、Cortex-M3、Cortex-M4、Cortex-M7、Cortex-M23、Cortex-M33、Cortex-M35P 和 Cortex-M55。其中 Cortex-M4 / M7 / M33 / M35P / M55 核心有浮点运算器的选项，若有浮点运算器的选项，会在型号后面说明，例如 Cortex-Mx with FPU 或 Cortex-MxF，其中 x 是核心编号。</p>\n<p>如标题所述，其中 Cortex-M3/M4/M7 同属 <strong>ARMv7-M</strong> 架构，再细分一点，Cortex-M3 实现的是 <strong>ARMv7-M</strong> 架构，Cortex-M4 /Cortex-M7 实现的是 <strong>ARMv7E-M</strong> 架构。</p>\n<h1 id=\"armv7-m和-armv7e-m架构区别\"><a class=\"anchor\" href=\"#armv7-m和-armv7e-m架构区别\">#</a> ARMv7-M 和 ARMv7E-M 架构区别</h1>\n<p>如果有玩过过 Cortex-M3 系列的芯片跟 Cortex-M4/M7 的芯片，或多或少都知道 Cortex-M4/M7 比 Cortex-M3 多了 <strong>DSP</strong> 跟<strong>硬件浮点运算</strong>，以下是 ARMv7E-M 架构的拓展功能介绍：</p>\n<p><img src=\"image-20210717125804779.png\" alt=\"image-20210717125804779\" /></p>\n<p>由于 ARMv7E-M 是 ARMv7-M 的一个拓展子集，所以以下统称 <strong>ARMv7-M</strong> 为 “ARMv7-M” 和 “ ARMv7E-M ” 的集合。</p>\n<h1 id=\"arm-寄存器\"><a class=\"anchor\" href=\"#arm-寄存器\">#</a> ARM 寄存器</h1>\n<p><img src=\"image-20210717153032356.png\" alt=\"image-20210717153032356\" /></p>\n<h2 id=\"通用寄存器r0-r12\"><a class=\"anchor\" href=\"#通用寄存器r0-r12\">#</a> 通用寄存器（R0 - R12）</h2>\n<p>R0-R7 被称为低组寄存器。所有指令都能访问它们。它们的字长全是 32 位，复位后的初始值是不可预料的。</p>\n<p>R8-R12 被称为高组寄存器。这是因为只有很少的 16 位 Thumb 指令能访问它们，32 位的 thumb-2 指令则不受限制。它们也是 32 位字长，且复位后的初始值是不可预料的。</p>\n<h2 id=\"堆栈指针寄存器sp\"><a class=\"anchor\" href=\"#堆栈指针寄存器sp\">#</a> 堆栈指针寄存器（SP）</h2>\n<p>在 ARMv7-M 架构中，共有两个堆栈指针  <code>SP_main</code>  和  <code>SP_process</code> ，有时候也会把这个堆栈指针寄存器称为 <strong>R13</strong>。</p>\n<ul>\n<li>主堆栈指针（MSP），或写作  <code>SP_main</code> 。这是缺省的堆栈指针，它由 OS 内核、异常服务例程以及所有需要特权访问的应用程序代码来使用。</li>\n<li>进程堆栈指针（PSP），或写作  <code>SP_process</code> 。用于常规的应用程序代码（不处于异常服用例程中时）。</li>\n</ul>\n<h2 id=\"链接寄存器lr\"><a class=\"anchor\" href=\"#链接寄存器lr\">#</a> 链接寄存器（LR）</h2>\n<p>链接寄存器（LR） 主要用于在调用子程序时存储返回地址；有时候也会把这个链接寄存器称为 <strong>R14</strong>。</p>\n<h2 id=\"程序计数器pc\"><a class=\"anchor\" href=\"#程序计数器pc\">#</a> 程序计数器（PC）</h2>\n<p>程序计数器作为 PC（或称为 R15）访问，它根据所执行指令的大小（在 ARM 状态下始终为 4 个字节）递增；并通过分支指令将目标地址加载到 PC 中。 您还可以使用数据处理指令直接加载 PC。</p>\n<p><strong>Note：</strong> 寄存器 R0-R12、SP、LR 和 PC 被称为 Arm 核心寄存器。这些寄存器可以描述为 R0-R15。更详细的说明可以看《ARMv7-M Architecture Reference Manual》B1.4 章 Registers 部分</p>\n<h1 id=\"异常定义\"><a class=\"anchor\" href=\"#异常定义\">#</a> 异常定义</h1>\n<h2 id=\"异常类型\"><a class=\"anchor\" href=\"#异常类型\">#</a> 异常类型</h2>\n<p><img src=\"image-20210717132436090.png\" alt=\"image-20210717132436090\" /></p>\n<h2 id=\"异常更新\"><a class=\"anchor\" href=\"#异常更新\">#</a> 异常更新</h2>\n<p>在入栈和取向量操作完成之后，执行服务例程之前，需要更新一系列的寄存器：</p>\n<ul>\n<li>SP：在入栈后会把堆栈指针（PSP 或 MSP）更新到新的位置。在执行服务例程时，将由 MSP 负责对堆栈的访问。</li>\n<li>PSR：更新 IPSR 位段（地处 PSR 的最低部分）的值为新响应的异常编号。</li>\n<li>PC：在取向量完成后，PC 将指向服务例程的入口地址，</li>\n<li>LR：在出入 ISR 的时候，LR 的值将得到重新的诠释，这种特殊的值称为 “EXC_RETURN”，在异常进入时由系统计算并赋给 LR，并在异常返回时使用它。EXC_RETURN 的二进制值除了最低 4 位外全为 1，而其最低 4 位则有另外的含义。</li>\n</ul>\n<p>以上是在响应异常时核心寄存器的变化。另一方面，在 NVIC 中，也会更新若干个相关有寄存器。例如，新响应异常的悬起位将被清除，同时其活动位将被置位。</p>\n<h2 id=\"异常返回值\"><a class=\"anchor\" href=\"#异常返回值\">#</a> 异常返回值</h2>\n<p>在进入异常服务程序后，将自动更新 LR 的值为特殊的 EXC_RETURN。这是一个高 28 位全为 1 的值，只有 [3:0] 的值有特殊含义，如下图所示。当异常服务例程把这个值送往 PC 时，就会启动处理器的中断返回序列。因为 LR 的值是由内核自动设置的，所以只要没有特殊需求，就不要改动它。</p>\n<p><img src=\"image-20210717203515783.png\" alt=\"image-20210717203515783\" /></p>\n<p><img src=\"image-20210717203628501.png\" alt=\"image-20210717203628501\" /></p>\n<h1 id=\"异常入口的堆栈对齐\"><a class=\"anchor\" href=\"#异常入口的堆栈对齐\">#</a> 异常入口的堆栈对齐</h1>\n<p>Armv7-M 架构保证堆栈指针值至少是 4 字节对齐的。 但是，某些软件标准要求堆栈指针按 8 字节对齐，并且体系结构可以强制执行这种对齐。 在配置和控制寄存器的 CCR. STKALIGN 位指示中作为异常入口的一部分，决定着处理器是将 SP 对齐到 4 个字节还是 8 个字节。 该位是由编译器决定是否为：<br />\n・RW，在这种情况下，它的复位值是由编译器决定的。<br />\n・RO，在这种情况下它是 RAO，表示 8 字节 SP 对齐。<br />\n<strong>Arm 不赞成实现或使用 4 字节 SP 对齐。</strong></p>\n<p>Register --- CCR. STKALIGN bit：</p>\n<p><img src=\"image-20210717172228588.png\" alt=\"image-20210717172228588\" /></p>\n<p>下图显示了在异常发生时进入堆栈的信息框架，以及处理器如何在堆栈上保留一个额外的字（如果需要的话），以获得 8 字节堆栈对齐。（这里就是我们要分析地方）</p>\n<p><img src=\"image-20210717172649123.png\" alt=\"image-20210717172649123\" /></p>\n<h1 id=\"hardfault异常分析处理\"><a class=\"anchor\" href=\"#hardfault异常分析处理\">#</a> HardFault 异常分析处理</h1>\n<p>HardFault 是一种通用故障，它适用于所有不能被任何其他异常机制处理的故障类。通常，HardFault 用于不可恢复的系统故障，尽管这不是必需的，而且 HardFault 的某些用途可能是可恢复的。HardFault 永久启用，优先级固定为 -1。</p>\n<h2 id=\"方法一先来个简单的使用第三方组件-cm_backtrace\"><a class=\"anchor\" href=\"#方法一先来个简单的使用第三方组件-cm_backtrace\">#</a> 方法一：先来个简单的，使用第三方组件 “cm_backtrace”</h2>\n<p>项目地址：<a href=\"https://github.com/armink/CmBacktrace\">https://github.com/armink/CmBacktrace</a></p>\n<p>怎么用这里就不说了，毕竟官方已经写得很清楚了，而且还有相应的 Demo 例程。</p>\n<p>使用该方法的特点是不需要过多的关注更底层的东西，只需移植好后配置相应的功能就好了，而且它可以离线（脱离仿真器）来寻找错误点；但是前提是你的串口正常，而且还需要预留部分内存供其执行。</p>\n<h2 id=\"方法二仿真情况下的-bug寻找\"><a class=\"anchor\" href=\"#方法二仿真情况下的-bug寻找\">#</a> 方法二：仿真情况下的 bug 寻找</h2>\n<p>如果是平常的 while 循环执行，导致挂掉了无法切换任务，那么我们可以轻松通过上下文切换寻找问题；但是在 HardFault 异常中它并不给你显示执行错误的所在地方，而是直接跳到 HardFault 中断中，这往往让我们头大。</p>\n<p>Keil 平台的可以看：</p>\n<p><a href=\"https://www.keil.com/appnotes/files/apnt209.pdf\">https://www.keil.com/appnotes/files/apnt209.pdf</a></p>\n<p>IAR 平台的可以看：</p>\n<p><a href=\"https://www.iar.com/knowledge/support/technical-notes/debugger/debugging-a-hardfault-on-cortex-m/\">https://www.iar.com/knowledge/support/technical-notes/debugger/debugging-a-hardfault-on-cortex-m/</a></p>\n<p>GCC 平台的可以看：</p>\n<p>方法三。。。</p>\n<h2 id=\"方法三通过-arm-寄存器逆向推导\"><a class=\"anchor\" href=\"#方法三通过-arm-寄存器逆向推导\">#</a> 方法三：通过 ARM 寄存器逆向推导</h2>\n<p>使用该方法的前提是获取到第五个大点最后一张图展示的核心寄存器（R0-R3、R12、LR、PC、xPSR 以及原 SP）的数值。</p>\n<p><strong>1、常见的核心寄存器数据获取</strong></p>\n<p>一般地，我们会使用以下代码嵌入到 HardFault 中断中，使其在入口处打印服务异常时各核心寄存器的值：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Exception frame without floating-point storage</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* hard fault handler in C,</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* with stack frame location as input parameter</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">void</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">hard_fault_handler_c</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> hardfault_args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_r12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_lr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_pc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> stacked_psr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//Exception stack frame</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    stacked_r0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    stacked_r1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    stacked_r2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    stacked_r3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    stacked_r12 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    stacked_lr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    stacked_pc <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    stacked_psr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> hardfault_args<span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>   </pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"[Hard fault handler]\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R0 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R1 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R2 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R3 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"R12 = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_r12<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"LR = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_lr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"PC = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_pc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"PSR = %x\\n\"</span><span class=\"token punctuation\">,</span> stacked_psr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">CW</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"BFAR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"CFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED2C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"DFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED3C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"BFAR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED38</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"CFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"HFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED2C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"DFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">printf</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"AFSR = %x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xE000ED3C</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token comment\">/* The prototype shows it is a naked function - in effect this is just an</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>assembly function. */</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HardFault_Handler</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span> <span class=\"token keyword\">__attribute__</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span> naked <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre></pre></td></tr><tr><td data-num=\"58\"></td><td><pre><span class=\"token comment\">/* The fault handler implementation calls a function called</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>prvGetRegistersFromStack(). */</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">HardFault_Handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">CORTEX_M3_M4_M7</span></span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    <span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token string\">\" tst lr, #4                        \\n\"</span> <span class=\"token comment\">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token string\">\" ite eq                            \\n\"</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token string\">\" mrseq r0, msp                     \\n\"</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>        <span class=\"token string\">\" mrsne r0, psp                     \\n\"</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>        <span class=\"token string\">\"b hard_fault_handler_c             \\n\"</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no output */</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no input */</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">\"r0\"</span> <span class=\"token comment\">/* clobber */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token string\">\"movs r0, #4                        \\n\"</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>        <span class=\"token string\">\"mov  r1, lr                        \\n\"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>        <span class=\"token string\">\"tst  r0, r1                        \\n\"</span> <span class=\"token comment\">/* Check EXC_RETURN[2] */</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>        <span class=\"token string\">\"beq 1f                             \\n\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>        <span class=\"token string\">\"mrs r0, psp                        \\n\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>        <span class=\"token string\">\"ldr r1,=hard_fault_handler_c       \\n\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>        <span class=\"token string\">\"bx r1                              \\n\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>        <span class=\"token string\">\"1:mrs r0,msp                       \\n\"</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>        <span class=\"token string\">\"ldr r1,=hard_fault_handler_c       \\n\"</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no output */</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token comment\">/* no input */</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>        <span class=\"token operator\">:</span> <span class=\"token string\">\"r0\"</span> <span class=\"token comment\">/* clobber */</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>Note：</p>\n<ol>\n<li>\n<p>值得注意的是 void HardFault_Handler (void); 函数是相应的 HardFault 中断函数，不同的厂家会定义不同的名称。</p>\n</li>\n<li>\n<p>对于不同的编译器，如：armcc、iar、gcc for arm 等，需要把相应的关键字替换掉（eg： <code>asm</code> 、 <code>naked</code> ）。</p>\n<p><code>naked</code>  拓展：<a href=\"https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_jhg1476893564298.htm\">https://www.keil.com/support/man/docs/armclang_ref/armclang_ref_jhg1476893564298.htm</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33933891\">https://zhuanlan.zhihu.com/p/33933891</a></p>\n</li>\n</ol>\n<p><strong>2、逆向定位入口</strong></p>\n<p>如果有看过方法二的两个链接，那么就很容易理解以下的分析了：</p>\n<ol>\n<li>确保你能正常获取输出数据（包括但不限于仿真查看、串口打印、SWO 输出、SEGGER_RTT 输出等等）。</li>\n<li>由于我们在第一点修改过代码，所以可以直接查看 LR 和 PC 两个的值；因为这两个的值是关键。</li>\n<li>使用 addr2line 软件定位故障代码位置（使用方法：<a href=\"https://sourceware.org/binutils/docs-2.27/binutils/addr2line.html#addr2line%EF%BC%89\">https://sourceware.org/binutils/docs-2.27/binutils/addr2line.html#addr2line）</a>\taddr2line 属于 GNU Binutils 组件之一，获取可以从方法一里面的 tools 文件夹里获取，也可以从  <code>安装路径\\GNU Tools ARM Embedded\\5.4 2016q3\\bin\\arm-none-eabi-addr2line.exe</code>  提取出来。</li>\n</ol>\n<p><strong>3、使用演示</strong></p>\n<p>先制造一个 HardFault：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">fault_test_by_div0</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span> SCB_CCR <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">volatile</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0xE000ED14</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// SCB->CCR</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">*</span>SCB_CCR <span class=\"token operator\">|=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* bit4: DIV_0_TRP. */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    z <span class=\"token operator\">=</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"z:%d\\n\"</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">/************************************************</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>函数名称 ： main</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>功    能 ： 主函数入口</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>参    数 ： 无</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>返 回 值 ： 无</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>*************************************************/</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">DEBUG</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    BaseType_t xReturn <span class=\"token operator\">=</span> pdPASS<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 定义一个创建信息返回值，默认为 pdPASS */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">prvSetupHardware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">fault_test_by_div0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* Start the tasks defined within this file/specific to this demo. */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    xReturn <span class=\"token operator\">=</span> <span class=\"token function\">xTaskCreate</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>TaskFunction_t<span class=\"token punctuation\">)</span>prvUser_Task<span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">/* 任务入口函数 */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"prvUser_Task\"</span><span class=\"token punctuation\">,</span>\t\t\t<span class=\"token comment\">/* 任务名字 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token class-name\">uint16_t</span><span class=\"token punctuation\">)</span>configMINIMAL_STACK_SIZE<span class=\"token punctuation\">,</span>\t\t<span class=\"token comment\">/* 任务栈大小 */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                           <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\t\t\t\t\t\t\t<span class=\"token comment\">/* 任务入口函数参数 */</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                           <span class=\"token punctuation\">(</span>UBaseType_t<span class=\"token punctuation\">)</span>mainCREATOR_TASK_PRIORITY<span class=\"token punctuation\">,</span>\t<span class=\"token comment\">/* 任务的优先级 */</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                           <span class=\"token punctuation\">(</span>TaskHandle_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UserTaskCreate_Handle <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* 任务控制块指针 */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pdPASS <span class=\"token operator\">==</span> xReturn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">/* Start the scheduler. */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token function\">vTaskStartScheduler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token comment\">/* Will only get here if there was not enough heap space to create the</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    idle task. */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">/*----------------------------- End -----------------------------*/</span></pre></td></tr></table></figure><p>接着可以观察到程序已经跑到 HardFault_Handler 里并输出相应信息了：</p>\n<p><img src=\"image-20210718160907873.png\" alt=\"image-20210718160907873\" /></p>\n<p>然后利用 addr2line，执行命令  <code>arm-none-eabi-addr2line.exe -e &quot;可执行映像&quot; -a -f &quot;相应的值&quot;</code>  （注：实际命令并不需要双引号  <code>“ ”</code> ，应用可看下图）：</p>\n<ul>\n<li><code>-e</code>  ：指定可执行映像名称</li>\n<li><code>-a</code>  ：显示函数地址</li>\n<li><code>-f</code>  ：显示函数名称</li>\n</ul>\n<p><img src=\"image-20210718160622030.png\" alt=\"image-20210718160622030\" /></p>\n<p>然后，对于不同的编译器，可执行映像并不一样（像 Keil 是  <code>.axf</code> 、IAR 是  <code>.out</code> ）；最后，如果细心的可以看到命令后面的两个值只有 PC 的值是对应上，第二个值并不是 LR 的值，而是其减去 4 的结果；若果你直接使用 LR 值，你会发现定位出来的下一条指令要执行的地方，至于为什么要减掉 4，是因为在 ARM 下执行指令的大小始终为 4 个字节递增，所以可以通过减掉 4，使其指向上一条内容。</p>\n<p><img src=\"image-20210718163058462.png\" alt=\"image-20210718163058462\" /></p>\n<p><img src=\"image-20210718163412930.png\" alt=\"image-20210718163412930\" /></p>\n<h2 id=\"方法四透过最底层进行分析\"><a class=\"anchor\" href=\"#方法四透过最底层进行分析\">#</a> 方法四：透过最底层进行分析</h2>\n<p>这种方法不需要修改什么，在进入 HardFault_Handler 后直接分析核心寄存器。</p>\n<p>同样的，还是先制造一个 HardFault，沿用方法三的 fault_test_by_div0 (); 函数代码，然后直到进入 HardFault_Handler 后，（注意，这里的 HardFault_Handler 中断函数并没有像方法三那样区嵌入代码，而是保持其原始的样子）：</p>\n<p><img src=\"image-20210718204135298.png\" alt=\"image-20210718204135298\" /></p>\n<p>接着跟上面的一样，获取各核心寄存器的值（ps：这里用的仿真查看）：</p>\n<p><img src=\"image-20210718204626787.png\" alt=\"image-20210718204626787\" /></p>\n<p>在这里就不是像方法三那样直接拿 LR 和 PC 这两个值来用了，必须进行层层分析：</p>\n<ol>\n<li>\n<p>查看 LR 值是对应下图的哪个：</p>\n<p><img src=\"image-20210718205017651.png\" alt=\"image-20210718205017651\" /></p>\n<p>通过转换，-7 为 0xFFFFFFF9，然后在第四大点的第三小点有讲过 LR=0xFFFF_FFF9 时是使用 MSP，而 LR=0xFFFF_FFFD 时则使用 PSP；所以我们可以确定该返回值是被压入到主堆栈指针（MSP）中。</p>\n</li>\n<li>\n<p>找到 MSP 指示的值：</p>\n<p><img src=\"image-20210718205953987.png\" alt=\"image-20210718205953987\" /></p>\n<p>得到该值为 0x2002ffc8。</p>\n</li>\n<li>\n<p>查看该值所对应的内存块：</p>\n<p><img src=\"image-20210718210515637.png\" alt=\"image-20210718210515637\" /></p>\n<p>得到紫色框里的两个数据（嘿嘿，是不是很神奇，居然跟方法三的 LR、PC 值一样），可能你会疑惑，为什么是提取该地址往后第六、七个数（4 字节递增），而不是其他呢？这就看第五个大点了，它的入栈顺序以及地址位置都是有规律的，可以归纳为下图：</p>\n<p><img src=\"image-20210718211434499.png\" alt=\"image-20210718211434499\" /></p>\n<p>按箭头方向，顺数第六、七是不是就是 LR、PC 值啊，而这里就是旧的内容信息；所以跟方法三比较一下，其实方法三的那段嵌入代码，就是让其改变各个核心寄存器的信息内容，使其不要存储跳转到 HardFault_Handler，而是存储跳转前的数据信息。</p>\n</li>\n<li>\n<p>到了这步，就是使用 addr2line 来定位，这里就不说了，方法三里面有写。</p>\n</li>\n</ol>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考：</h1>\n<p><a href=\"https://zh.wikipedia.org/wiki/ARM%E6%9E%B6%E6%A7%8B\">ARM 架构</a></p>\n<p><a href=\"https://zh.wikipedia.org/wiki/ARM_Cortex-M\">ARM Cortex-M</a></p>\n<p><a href=\"https://www.st.com/content/st_com/zh/arm-32-bit-microcontrollers/arm-cortex-m4.html\">Arm® Cortex®-M4 in a nutshell</a></p>\n<p>&lt;&lt;ARM Cortex-M3 权威指南&gt;&gt;</p>\n<p><a href=\"https://developer.arm.com/documentation/ddi0403/ee/?lang=en\">ARMv7-M Architecture Reference Manual</a></p>\n<p><a href=\"https://www.keil.com/support/man/docs/armasm/armasm_dom1359731124840.htm\">Overview of the ARM Architecture</a></p>\n<p><a href=\"https://community.arm.com/developer/ip-products/system/f/embedded-forum/4749/error-hard-fault-handler\">error: Hard Fault Handler</a></p>\n<p><a href=\"https://interrupt.memfault.com/blog/cortex-m-fault-debug\">How to debug a HardFault on an ARM Cortex-M MCU</a></p>\n<p><a href=\"https://forums.freertos.org/t/debugging-a-arm-cortex-m-hard-fault/9873\">Debugging a ARM Cortex-M Hard Fault</a></p>\n<p><a href=\"https://www.segger.com/downloads/application-notes/AN00016\">Analyzing HardFaults on Cortex-M CPU</a></p>\n<p><a href=\"https://gist.github.com/hossboss/e1d0e51fdb99bc125aadac64f5d67f04\">ARM Cortex M3: Recovering from a Hard Fault</a></p>\n<p><a href=\"https://www.silabs.com/community/mcu/32-bit/knowledge-base.entry.html/2014/05/26/debug_a_hardfault-78gc\">Debug a HardFault</a></p>\n",
            "tags": [
                "history",
                "MCU"
            ]
        },
        {
            "id": "https://arachnid.cc/usart-iic-spi/",
            "url": "https://arachnid.cc/usart-iic-spi/",
            "title": "USART、I2C、SPI 通信方式扫盲",
            "date_published": "2019-03-31T11:49:54.000Z",
            "content_html": "<h1 id=\"uart-usart\"><a class=\"anchor\" href=\"#uart-usart\">#</a> UART / USART</h1>\n<h2 id=\"基本方式\"><a class=\"anchor\" href=\"#基本方式\">#</a> 基本方式</h2>\n<p>基本方式分并行通讯和串行通讯</p>\n<h3 id=\"并行通讯\"><a class=\"anchor\" href=\"#并行通讯\">#</a> 并行通讯</h3>\n<p>并行通讯是指数据的每一位同时在多根数据线上发送或者接收。</p>\n<p><img src=\"2019033119162475.png\" alt=\"在这里插入图片描述\" /></p>\n<p>其特点是各数据位同时传送，速度快、效率高，有多少数据位就需要多少根数据线，传送成本高。在集成电路芯片的内部、同一硬件板上各部件之间等的数据传送采用并行的方式，并行通讯传送的距离通常小于 30m。</p>\n<h3 id=\"串行通讯\"><a class=\"anchor\" href=\"#串行通讯\">#</a> 串行通讯</h3>\n<p>串行通讯指数据的每一位在同一根数据线上按照顺序逐位发生或者接收。</p>\n<p><img src=\"2019033119171560.png\" alt=\"在这里插入图片描述\" /></p>\n<p>其特点是数据按位顺序进行，最少只需要一根传输线即可完成，成本低，速度慢。计算机与远程终端、远程终端之间数据的传输同常都是串行的。</p>\n<h3 id=\"串行通讯与并行通讯对比\"><a class=\"anchor\" href=\"#串行通讯与并行通讯对比\">#</a> 串行通讯与并行通讯对比</h3>\n<p>串行通讯的显著特点为：传输距离较长，可以从几米到几千米，串行通讯的通讯时钟频率较容易提高，抗干扰能力强，其信号间互相干扰可以完全忽略，但是串行通讯比并行通讯慢得多。串行通讯在数据采集和控制系统中得到了广泛的应用。</p>\n<p><img src=\"20190331192104312.png\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"工作模式\"><a class=\"anchor\" href=\"#工作模式\">#</a> 工作模式</h2>\n<p>串行通讯的基础是单线传输，数据通常是在两个站点之间进行传输，按照数据流的方向分为 3 种传输模式：</p>\n<h3 id=\"单工模式simplex\"><a class=\"anchor\" href=\"#单工模式simplex\">#</a> 单工模式 (Simplex)</h3>\n<p>单工模式的数据是单向的，通讯双方一方为发送端，另一方则固定为接收端。信息只能沿一个方向传输，使用一根数据线。</p>\n<p><img src=\"20190331192134882.png\" alt=\"在这里插入图片描述\" /></p>\n<p>例如收音机，只能接收发射塔给它的数据，并不能给发射塔发数据。</p>\n<h3 id=\"半双工模式half-duplex\"><a class=\"anchor\" href=\"#半双工模式half-duplex\">#</a> 半双工模式 (Half duplex)</h3>\n<p>半双工模式是指通讯双方都具有发送器和接收器，双方既可以发射也可以接收，但是接收和发射不能同时进行。</p>\n<p><img src=\"20190331192214823.png\" alt=\"在这里插入图片描述\" /></p>\n<p>半双工一般用数据能在两个方向传输的场合，例如对讲机。</p>\n<h3 id=\"全双工模式full-duplex\"><a class=\"anchor\" href=\"#全双工模式full-duplex\">#</a> 全双工模式 (Full duplex)</h3>\n<p>全双工数据通讯分别由两根可以在两个不同的站点同时发送和接收的传输线进行传输数据，通讯双方能在同一时刻进行发送和接收操作。</p>\n<p><img src=\"20190331192246981.png\" alt=\"在这里插入图片描述\" /></p>\n<p>全双工模式下，每一端都有发送器和接收器，有两条传输线可以在交互式应用场合中使用，信息传输效率高，例如手机。</p>\n<h2 id=\"同步方式\"><a class=\"anchor\" href=\"#同步方式\">#</a> 同步方式</h2>\n<p>根据通讯的数据同步方式，可分为同步和异步两种，根据通讯过程中是否使用到时钟信号进行区分。</p>\n<ul>\n<li>在同步通讯中，收发设备上方会使用一根信号线传输信号，在时钟信号的驱动下双方进行协调，同步数据。例如，通讯中通常双方会统一规定在时钟信号的上升沿或者下降沿对数据线进行采样。</li>\n</ul>\n<p><img src=\"20190331192347304.png\" alt=\"在这里插入图片描述\" /></p>\n<ul>\n<li>在异步通讯中不使用时钟信号进行数据同步，它们直接在数据信号中穿插一些用于同步的信号位，或者将主题数据进行打包，以数据帧的格式传输数据。通讯中还需要双方规约好数据的传输速率等，以便更好地同步。</li>\n</ul>\n<p><img src=\"20190331192433851.png\" alt=\"在这里插入图片描述\" /></p>\n<p><em>在同步通讯中，数据信号所传输的内容绝大部分是有效数据，而异步通讯中会则会包含数据帧的各种标识符，所以同步通讯效率高，但是同步通讯双方的时钟允许误差小，稍稍时钟出错就可能导致数据错乱，异步通讯双方的时钟允许误差较大。</em></p>\n<h1 id=\"i2c\"><a class=\"anchor\" href=\"#i2c\">#</a> I2C</h1>\n<p>I2C 总线是 PHLIPS 公司在 20 世纪 80 年代推出的一种串行总线。具有引脚少，硬件实现简单，可扩展性强的优点。I2C 总线的另一优点是支持多主控，总线上任何能够进行发送 / 接收数据的设备都可以占领总线。当然，任意时间点上只能存在一个主控。</p>\n<p>I2C 即是一种总线，也是一种通讯协议。在嵌入式开发中，通讯协议可分为两层：物理层和协议层。物理层是数据在物理媒介传输的保障；协议层主要是规定通讯逻辑，同一收发双方的数据打包、解包标准。打个比方，物理层相当于现实中的公路，而协议层则是交通规则，汽车可以在路上行驶，但是需要交通规则对行驶规则进行约束，不然将出现危险，也就是数据传输紊乱、丢包。</p>\n<p>特性：</p>\n<ul>\n<li>2 条双向串行线，一条数据线 SDA，一条时钟线 SCL。<br />\nSDA 传输数据是大端传输，每次传输 8bit，即一字节。</li>\n<li>支持多主控 (multimastering)，任何时间点只能有一个主控。</li>\n<li>总线上每个设备都有自己的一个 addr，共 7 个 bit，广播地址全 0.</li>\n<li>系统中可能有多个同种芯片，为此 addr 分为固定部分和可编程部份，细节视芯片而定，看 datasheet</li>\n</ul>\n<h2 id=\"物理层\"><a class=\"anchor\" href=\"#物理层\">#</a> 物理层</h2>\n<p>I2C 通讯系统接线图如下：<br />\n<img src=\"20190331192910123.png\" alt=\"在这里插入图片描述\" /><br />\n (1) 在 I2C 通讯总线上，可连接多个 I2C 通讯设备，支持多个通讯主机和多个通讯从机</p>\n<p>(2) I2C 通讯只需要两条双向总线：串行数据线 (SDA)，串行时钟线 (SCL)。数据线用于传输数据，时钟线用于同步数据收发</p>\n<p>(3) 每个连接到总线的设备都有一个独立的地址，主机正是利用该地址对设备进行访问</p>\n<p>(4) SDA 和 SCL 总线都需要接上上拉电阻，当总线空闲时，两根线均为高电平。连接到总线上的任意器件输出低电平都会将总线信号拉低。即各器件的 SDA 和 SCL 都是线与的关系</p>\n<p>(5) 多个主机同时使用总线时，需要用仲裁方式决定哪个设备占用总线，不然数据将会产生冲突</p>\n<p>(6) 串行的 8 位双向数据传输位速率在标准模式下可达 100kbps，快速模式下可达 400kbps，高速模式下可达 3.4Mbps (目前大多数 I2C 设备还不支持高速)</p>\n<h2 id=\"协议层\"><a class=\"anchor\" href=\"#协议层\">#</a> 协议层</h2>\n<p>协议层规约了通讯的起始、停止信号，数据有效性、响应、冲裁同步、地址广播等。</p>\n<h2 id=\"i2c位传输\"><a class=\"anchor\" href=\"#i2c位传输\">#</a> I2C 位传输</h2>\n<p>数据传输：SCL 为高电平时，SDA 线若保持稳定，那么 SDA 上是在传输数据 bit。</p>\n<p>数据改变：SCL 为低电平时，SDA 线才能改变传输的 bit。</p>\n<p>若 SDA 发生跳变，则用来表示一个会话的开始或结束（后面讲）</p>\n<p><img src=\"20190331193049333.png\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"i2c开始和结束信号\"><a class=\"anchor\" href=\"#i2c开始和结束信号\">#</a> I2C 开始和结束信号</h3>\n<p>开始信号：SCL 为高电平时，SDA 由高电平向低电平跳变，开始传送数据。</p>\n<p>结束信号：SCL 为高电平时，SDA 由低电平向高电平跳变，结束传送数据。</p>\n<p><img src=\"20190331193137616.png\" alt=\"在这里插入图片描述\" /></p>\n<h3 id=\"i2c应答信号\"><a class=\"anchor\" href=\"#i2c应答信号\">#</a> I2C 应答信号</h3>\n<p>Master 每发送完 8bit 数据后等待 Slave 的 ACK。</p>\n<p>即在第 9 个 clock，若从 IC 发 ACK，SDA 会被拉低。</p>\n<p>若没有 ACK，SDA 会被置高，这会引起 Master 发生 RESTART 或 STOP 流程，如下所示：</p>\n<p><img src=\"20190331193412844.png\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"i2c写流程\"><a class=\"anchor\" href=\"#i2c写流程\">#</a> I2C 写流程</h2>\n<p>写寄存器的标准流程为：</p>\n<ol>\n<li>Master 发起 START</li>\n<li>Master 发送 I2C addr（7bit）和 w 操作 0（1bit），等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>Master 发送 reg addr（8bit），等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>Master 发送 data（8bit），即要写入寄存器中的数据，等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>第 6 步和第 7 步可以重复多次，即顺序写多个寄存器</li>\n<li>Master 发起 STOP</li>\n</ol>\n<p><strong>写一个寄存器：</strong></p>\n<p><img src=\"20190331193524947.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>写多个寄存器：</strong></p>\n<p><img src=\"20190331193545788.png\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"i2c读流程\"><a class=\"anchor\" href=\"#i2c读流程\">#</a> I2C 读流程</h2>\n<p>读寄存器的标准流程为：</p>\n<ol>\n<li>Master 发起 START</li>\n<li>Master 发送 I2C addr（7bit）和 W 操作 0（1bit），等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>Master 发送 reg addr（8bit），等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>Master 发起 START</li>\n<li>Master 发送 I2C addr（7bit）和 R 操作 1（1bit），等待 ACK</li>\n<li>Slave 发送 ACK</li>\n<li>Slave 发送 data（8bit），即寄存器里的值</li>\n<li>Master 发送 ACK</li>\n<li>第 9 步和第 10 步可以重复多次，即顺序读多个寄存器</li>\n<li>Master 发起 STOP</li>\n</ol>\n<p><strong>读一个寄存器：</strong></p>\n<p><img src=\"20190331193648639.png\" alt=\"在这里插入图片描述\" /></p>\n<p><strong>读多个寄存器：</strong></p>\n<p><img src=\"20190331193700612.png\" alt=\"在这里插入图片描述\" /></p>\n<h1 id=\"spi\"><a class=\"anchor\" href=\"#spi\">#</a> SPI</h1>\n<p>SPI（serial peripheral interface，串行外围设备接口）总线技术是 Motorola 公司推出的一种同步串行接口。它用于 CPU 与各种外围器件进行全双工、同步串行通讯。它只需四条线就可以完成 MCU 与各种外围器件的通讯，这四条线是：串行时钟线（SCK）、主机输入 / 从机输出数据线（MISO）、主机输出 / 从机输入数据线（MOSI）、低电平有效从机选择线 CS。</p>\n<p>当 SPI 工作时，在移位寄存器中的数据逐位从输出引脚（MOSI）输出（高位在前），同时从输入引脚（MISO）接收的数据逐位移到移位寄存器（高位在前）。发送一个字节后，从另一个外围器件接收的字节数据进入移位寄存器中。即完成一个字节数据传输的实质是两个器件寄存器内容的交换。主 SPI 的时钟信号（SCK）使传输同步。其典型系统框图如下图所示。</p>\n<p><img src=\"20190331194140132.png\" alt=\"在这里插入图片描述\" /></p>\n<h2 id=\"通信原理\"><a class=\"anchor\" href=\"#通信原理\">#</a> 通信原理</h2>\n<p>标准的 SPI 是 4 根线，分别是 SSEL（ 片选，也写作 SCS）、 SCLK（ 时钟，也写作 SCK）、 MOSI（ 主机输出从机输入 Master Output/Slave Input） 和 MISO（ 主机输入从机输出 Master Input/Slave Output）。</p>\n<ul>\n<li>MOSI（SDO）：主器件数据输出，从器件数据输入。</li>\n<li>MISO（SDI）：主器件数据输入，从器件数据输出。</li>\n<li>SCLK ：时钟信号，由主器件产生。</li>\n<li>CS：从器件使能信号，由主器件控制。(CS 控制芯片是否被选中，只有片选信号为实现约定的使能信号时（高电位或地电位），对此芯片的操作才有效，这也就允许同一总线上连接多个 SPI 设备。)</li>\n</ul>\n<p>SPI 串行传输，数据一位一位从 MSB 到 LSB 开始传输，产生相应的脉冲沿时，MOSI，MISO 才进行数据传输。</p>\n<h2 id=\"工作方式\"><a class=\"anchor\" href=\"#工作方式\">#</a> 工作方式</h2>\n<p>SPI 有四种工作模式，取决于两个参数：（这两个参数其实就是控制了 CLK 这一根线，SPI 通信不像 UART 或 IIC 那样有专门的通信周期，有专门的通信起始信号和结束信号。所以 SPI 协议能够通过控制时钟信号线在没有数据交流的时候保持的状态，要么是高电平，要么是低电平）</p>\n<p>1、 CPOL，clock polarity，译作时钟极性。</p>\n<p>2、 CPHA，clock phase，译作时钟相位。</p>\n<ul>\n<li>CPOL 具体说明：<br />\nCPOL 用于定义时钟信号在空闲状态下处于高电平还是低电平，为 1 代表高电平，0 为低电平。</li>\n<li>CPHA 具体说明：<br />\n首先，在同步接口中，肯定存在一个接口时钟，用来同步采样接口上数据的。CPHA 就是用来定义数据采样在第几个边沿的，数据的采样时刻。为 1 代表第二个边沿采样，为 0 代表第一个边沿采样。</li>\n</ul>\n<p>以上两个参数，总共有四种组合：</p>\n<p>(1) CPOL=0，CPHA=0：此时空闲态时，SCLK 处于低电平，数据采样是在第 1 个边沿，也就是 SCLK 由<mark>低电平到高电平</mark>的跳变，所以数据采样是在上升沿，数据发送是在下降沿。</p>\n<p>(2) CPOL=0，CPHA=1：此时空闲态时，SCLK 处于低电平，数据发送是在第 2 个边沿，也就是 SCLK 由<mark>高电平到低电平</mark>的跳变，所以数据采样是在下降沿，数据发送是在上升沿。</p>\n<p>(3) CPOL=1，CPHA=0：此时空闲态时，SCLK 处于高电平，数据采集是在第 1 个边沿，也就是 SCLK 由<mark>高电平到低电平</mark>的跳变，所以数据采集是在下降沿，数据发送是在上升沿。</p>\n<p>(4) CPOL=1，CPHA=1：此时空闲态时，SCLK 处于高电平，数据发送是在第 2 个边沿，也就是 SCLK 由<mark>低电平到高电平</mark>的跳变，所以数据采集是在上升沿，数据发送是在下降沿。</p>\n<p><img src=\"20190331194425848.png\" alt=\"在这里插入图片描述\" /></p>\n<p><em>由于 SPI 没有一个统一的规范，所以在时序上描述存在一定的差异，具体以 datasheet 为准。</em></p>\n",
            "tags": [
                "history",
                "MCU"
            ]
        }
    ]
}