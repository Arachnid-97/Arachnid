{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"工具\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/using-wireshark/",
            "url": "https://arachnid.cc/using-wireshark/",
            "title": "wireshark 使用",
            "date_published": "2022-10-05T07:55:39.000Z",
            "content_html": "<p>官方说明：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvSG9tZQ==\">https://wiki.wireshark.org/Home</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkLw==\">https://www.wireshark.org/docs/wsug_html_chunked/</span></p>\n<h1 id=\"着色规则\"><a class=\"anchor\" href=\"#着色规则\">#</a> 着色规则</h1>\n<p>在 wireshark 监控界面上，不同的报文会显示不一样样的颜色，它们分别表示不同的含义；而这些颜色，都是是由着色规则设置的：</p>\n<p><img data-src=\"image-20221006162351042.png\" alt=\"image-20221006162351042\" /></p>\n<p>在默认的着色规则中，一般黑色背景代表报文的各类错误，红色背景代表各类异常情景，其它颜色代表正常。</p>\n<p>官方的说明可以看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQ3VzdENvbG9yaXphdGlvblNlY3Rpb24uaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChCustColorizationSection.html</span></p>\n<p>着色规则分析：</p>\n<p><strong>1、Bad TCP：</strong> tcp.analysis.flags &amp;&amp; !tcp.analysis.window_update &amp;&amp; !tcp.analysis.keep_alive &amp;&amp; !tcp.analysis.keep_alive_ack</p>\n<p>即 TCP 包损坏，通常表示为重传，乱序，丢包，重复响应等都在此条规则的范围内。具体看第三大点。</p>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2VENQQW5hbHlzaXMuaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvTCPAnalysis.html</span></p>\n<p><strong>2、HSRP State Change：</strong> hsrp.state != 8 &amp;&amp; hsrp.state != 16</p>\n<p>HSRP 即热备份路由协议（Hot Standby Router Protocol），这条规则表明当前报文状态非 Standby 和 Active。</p>\n<p>HSRP 的状态值可以是以下几种：</p>\n<ul>\n<li>0 - Initial</li>\n<li>1 - Learn</li>\n<li>2 - Listen</li>\n<li>4 - Speak</li>\n<li>8 - Standby</li>\n<li>16 - Active</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzIyODE=\">https://www.rfc-editor.org/rfc/rfc2281</span></p>\n<p><strong>3、Spanning Tree Topology  Change：</strong> stp.type == 0x80</p>\n<p>当生成树协议的状态标记为  <code>0x80</code> ，表示着生成树拓扑发生变化。即 STP 协议数据单元 (BPDU) 的  <code>flag</code>  字段发生变化（使用 IEEE-802.1d）：</p>\n<p><img data-src=\"bpdu.png\" alt=\"img\" /></p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly90ZWNoaHViLmhwZS5jb20vZWdpbmZvbGliL25ldHdvcmtpbmcvZG9jcy9zd2l0Y2hlcy81OTgwLzUyMDAtMzkyMV9sMi1sYW5fY2cvY29udGVudC80OTkwMzY2NzIuaHRt\">https://techhub.hpe.com/eginfolib/networking/docs/switches/5980/5200-3921_l2-lan_cg/content/499036672.htm</span></p>\n<p><strong>4、OSPF State Change：</strong> ospf.msg != 1</p>\n<p>OSPF（Open Shortest Path First，开放式最短路径优先协议）的 msg 类型不是 Hello 报文。</p>\n<p>OSPF 报文的类型，有下面几种类型：</p>\n<ul>\n<li>1：Hello 报文；</li>\n<li>2：DD 报文；</li>\n<li>3：LSR 报文；</li>\n<li>4：LSU 报文；</li>\n<li>5：LSAck 报文。</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy4wMjN3Zy5jb20vbWVzc2FnZS9tZXNzYWdlL2NkX2ZlYXR1cmVfb3NwZl9tZXNzYWdlLmh0bWw=\">http://www.023wg.com/message/message/cd_feature_ospf_message.html</span></p>\n<p><strong>5、ICMP errors：</strong> icmp.type eq 3 || icmp.type eq 4 || icmp.type eq 5 || icmp.type eq 11 || icmpv6.type eq 1 || icmpv6.type eq 2 || icmpv6.type eq 3 || icmpv6.type eq 4</p>\n<p>ICMP 协议错误，协议的 type 字段值错误。</p>\n<p><strong>6、ARP：</strong> arp</p>\n<p>即 ARP 协议。</p>\n<p><strong>7、ICMP：</strong> icmp || icmpv6</p>\n<p>即 ICMP 协议。</p>\n<p><strong>8、TCP RST：</strong> tcp.flags.reset eq 1</p>\n<p>TCP 流产生 reset。</p>\n<p><strong>9、SCTP ABORT：</strong> sctp.chunk_type eq ABORT</p>\n<p>SCTP（即流控制传输协议）发生中止。</p>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzQ5NjAjc2VjdGlvbi0zLjMuNw==\">https://www.rfc-editor.org/rfc/rfc4960#section-3.3.7</span></p>\n<p><strong>10、TTL low or unexpected：</strong> ( ! ip.dst == 224.0.0.0/4 &amp;&amp; ip.ttl &lt; 5 &amp;&amp; !pim &amp;&amp; !ospf) || (ip.dst == 224.0.0.0/24 &amp;&amp; ip.dst != 224.0.0.251 &amp;&amp; ip.ttl != 1 &amp;&amp; !(vrrp || carp))</p>\n<p>TTL (Time-To-Live) 指解析记录在本地 DNS 服务器中的缓存时间。该规则表示 TTL 产生异常。</p>\n<p>在 IP 组播中，通过 TTL 控件来管理转发数据包的范围，按照惯例：</p>\n<ul>\n<li>0 - 仅限于同一主机上</li>\n<li>1 - 被限制在同一个子网内</li>\n<li>32 仅限于同一站点</li>\n<li>64 - 仅限于同一区域</li>\n<li>128 - 仅限于同一大陆</li>\n<li>255 - 不受限制</li>\n</ul>\n<p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGVjaHRhcmdldC5jb20vc2VhcmNobmV0d29ya2luZy9kZWZpbml0aW9uL3RpbWUtdG8tbGl2ZQ==\">https://www.techtarget.com/searchnetworking/definition/time-to-live</span></p>\n<p><strong>11、Checksum Errors：</strong> eth.fcs.status == &quot;Bad&quot; || ip.checksum.status == &quot;Bad&quot; || tcp.checksum.status == &quot;Bad&quot; || udp.checksum.status == &quot;Bad&quot; || sctp.checksum.status == &quot;Bad&quot; || mstp.checksum.status == &quot;Bad&quot; || cdp.checksum.status == &quot;Bad&quot; || edp.checksum.status == &quot;Bad&quot; || wlan.fcs.status == &quot;Bad&quot; || stt.checksum.status == &quot;Bad&quot;</p>\n<p>条件中的各类协议的 checksum 出现异常。</p>\n<p><strong>12、SMB：</strong> smb || nbss || nbns || netbios</p>\n<p>Server Message Block 类协议。</p>\n<p><strong>13、HTTP：</strong> http || tcp.port == 80 || http2</p>\n<p>Hyper Text Transfer Protocol（超文本传输协议），这是很简陋的识别方法。</p>\n<p><strong>14、DCERPC：</strong> dcerpc</p>\n<p>即 DCE/RPC，分散式运算环境 / 远端过程调用（Distributed Computing Environment / Remote Procedure Calls）协议。</p>\n<p><strong>15、Routing：</strong> hsrp || eigrp || ospf || bgp || cdp || vrrp || carp || gvrp || igmp || ismp</p>\n<p>路由类协议。</p>\n<p>**16、TCP SYN/FIN： ** tcp.flags &amp; 0x02 || tcp.flags.fin == 1</p>\n<p>TCP 连接的起始和关闭。</p>\n<p><strong>17、TCP：</strong> tcp</p>\n<p>TCP 协议。</p>\n<p><strong>18、UDP：</strong> udp</p>\n<p>UDP 协议。</p>\n<p><strong>19、Broadcast：</strong> eth[0] &amp; 1</p>\n<p>广播数据。</p>\n<p><strong>20、System Event：</strong> systemd_journal || sysdig</p>\n<p>系统调用及系统事件等系统活动。</p>\n<h1 id=\"专家信息\"><a class=\"anchor\" href=\"#专家信息\">#</a> 专家信息</h1>\n<p>在报文的信息栏中，通常也有颜色限定，如下图：</p>\n<p><img data-src=\"image-20221006185352059.png\" alt=\"image-20221006185352059\" /></p>\n<p>而这次的颜色区别是属于对应的信息条目的：</p>\n<p><img data-src=\"image-20221006185105048.png\" alt=\"image-20221006185105048\" /></p>\n<p>每个专家信息项都有一个严重性级别。使用以下级别，从最低到最高。Wireshark 使用不同的颜色标记它们：</p>\n<ul>\n<li>\n<p>聊天（蓝色）</p>\n<p>有关常用的工作流程信息，例如设置了 SYN 标志的 TCP 数据包；数据包都符合常规流量的特征，包括 SYN、FIN、RST 以及各种状态码的 HTTP 事件。</p>\n</li>\n<li>\n<p>注意（青色）</p>\n<p>值得注意的事件，例如应用程序返回了一个常见的错误代码，例如 HTTP 404；数据包中有可能会引发故障的异常现象，例如 TCP 重传、重复确认、快速重传等现象。</p>\n</li>\n<li>\n<p>警告（黄色）</p>\n<p>警告，例如应用程序返回异常错误代码，如连接问题。</p>\n<p>与 TCP 窗口有关的事件 TCP window full 或 TCP zero window，一般是连接设备忙不过来所致。</p>\n<p>与 TCP 报文段丢失或失序有关的事件，丢失是因为未抓全某个 TCP 数据流的所有 TCP 报文段；失序是因其感知到了 TCP 报文段未按发出的顺序到达接收主机。</p>\n</li>\n<li>\n<p>错误（红色）</p>\n<p>严重的问题。</p>\n<p>校验和错误：Ethernet 及 IP 校验和错误。</p>\n<p>伪造的数据包：一般涉及具体的应用层协议。</p>\n</li>\n</ul>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoQWR2RXhwZXJ0Lmh0bWw=\">https://www.wireshark.org/docs/wsug_html_chunked/ChAdvExpert.html</span></p>\n<h1 id=\"tcp-info\"><a class=\"anchor\" href=\"#tcp-info\">#</a> TCP Info</h1>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93aWtpLndpcmVzaGFyay5vcmcvVENQX0FuYWx5emVfU2VxdWVuY2VfTnVtYmVycw==\">https://wiki.wireshark.org/TCP_Analyze_Sequence_Numbers</span></p>\n<h2 id=\"a-ack信息\"><a class=\"anchor\" href=\"#a-ack信息\">#</a> A、ACK 信息</h2>\n<p><strong>1、TCP ACKed unseen segment</strong></p>\n<p>表示 Wireshark 发现该条 ACK 在整个网络包中找不到所对应的 Seq（排除了乱序），就会提示。</p>\n<p><img data-src=\"image-20221012210009741.png\" alt=\"image-20221012210009741\" /></p>\n<p>如图，在这组网络中，第 296 号包出现这种情况，然后在上面的包中是找不到它所对应的 Seq 的。</p>\n<p><strong>2、TCP Dup ACK <em>&lt;frame&gt;</em> #<em>&lt;acknowledgement number&gt;</em></strong></p>\n<p>重复 ACK 包，当收发不稳定时，会出现重复响应的情况；而这种情况就是响应端会向请求端回复重复 ACK。 <code>#</code>  符号前面的数字表示对应的重复包号，后面的数字表示确认次数，也可以说是出现的次数。</p>\n<p><img data-src=\"image-20221012221850769.png\" alt=\"image-20221012221850769\" /></p>\n<p>如图，在第 31191 号包的信息中可以看到提示是说跟第 31188 号包出现重复，通过查看第 31188 号包，而这一包其实是为了响应第 31187 号的。</p>\n<p><strong>3、TCP Fast Retransmission</strong></p>\n<p>标志着前面接收到重复的 ACK 包（即出现了 [TCP Dup ACK] ）达 3 个或 3 个以上，进而触发了 TCP 的快速重传（这是 RFC 的规定）。</p>\n<p><img data-src=\"image-20221012224854822.png\" alt=\"image-20221012224854822\" /></p>\n<p>如图， [TCP Dup ACK] 出现了 3 次，而且都是对应第 1309 号包，因此触发快速重传包第 1330 号包，重传了第 1309 号包所响应的请求包第 1245 号包，如下图：</p>\n<p><img data-src=\"image-20221012230828693.png\" alt=\"image-20221012230828693\" /></p>\n<p>然后通过对比原包第 1245 号包和快速重传包第 1330 号包，你会发现并不相同，实际上原始数据应该是相同的，只不过数据加密了，才出现不同的现象。</p>\n<h2 id=\"b-保活探测\"><a class=\"anchor\" href=\"#b-保活探测\">#</a> B、保活探测</h2>\n<p><strong>4、TCP Keep-Alive</strong></p>\n<p>这个应该不陌生，一般 TCP 长链接时，如果启用保活功能，则在特定时间段没有数据交互，那么将会传输一条保活字段，如下图：</p>\n<p><img data-src=\"image-20221012233735152.png\" alt=\"image-20221012233735152\" /></p>\n<p><strong>5、TCP Keep-Alive ACK</strong></p>\n<p>作为上一点 [TCP Keep-Alive] 的响应包，例图看上一张。</p>\n<h2 id=\"c-乱序-or-丢包\"><a class=\"anchor\" href=\"#c-乱序-or-丢包\">#</a> C、乱序 or 丢包</h2>\n<p><strong>6、TCP Out-Of-Order</strong></p>\n<p>标志着 TCP 传输出现乱序。</p>\n<p><img data-src=\"image-20221013201521709.png\" alt=\"image-20221013201521709\" /></p>\n<p>如图，在 TCP 传输过程中（不包括三次握手和四次挥手），同一台主机发出的数据包应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len；也可以说，后一个包的 Seq 会大于或等于前一个包的 Seq。当 Wireshark 发现后一个包的 Seq 值小于前一个包的 Seq + Len 时，就会认为是乱序了，因此标志 [TCP Out-of-Order]。</p>\n<p>在连续传输数据过程中，可以看到从第 330 号包一直到第 337 包被标志为乱序这几个包，应当是连续的，但是可以发现第 336 号包跟第 337 号包调转了，因此第 336 号包被标志为上一包未捕获，而第 337 号包则被标志为乱序。</p>\n<p>然后来分析一下，例如第 337 号包的 Seq = 83518，Len = 1380，那么 Seq + Len = 84898，可以发现其实该包列栏中  <code>Sequence Number</code>  的  <code>83518</code>  数据对应 Seq， <code>NextSequence Number</code>  的  <code>84898</code>  数据对应 Seq + Len。根据上面的结论，在发生错误前的第 335 号包它的  <code>NextSequence Number</code>  表明下一包第 336 号包的 Seq 值应当是  <code>83518</code>  ，但是实际上第 336 号包的 Seq 值为  <code>84898</code>  ，当到了第 337 号包的时候，才出现理应对应的值  <code>83518</code>  ，这时 Wireshark 通过对比在发生错误前的第 335 号包至理论连续的第 337 号包之间看是否有出现调转包，有则标志 [TCP Out-of-Order]。一般出现 [TCP Out-of-Order] 时都会伴随出现 [TCP Previous segment not captured] 。</p>\n<p><strong>7、TCP Previous segment not captured</strong></p>\n<p>在 TCP 传输过程中，同一台主机发出的数据段应该是连续的，即后一个包的 Seq 号等于前一个包的 Seq + Len（三次握手和四次挥手是例外）。如果 Wireshark 发现后一个包的 Seq 值大于前一个包的 Seq + Len，就知道中间缺失了一段数据。</p>\n<p>依然沿用上一张图，在发生错误前的第 335 号包 Seq + Len 值为  <code>83518</code>  ，但下一包的 Seq 值为  <code>84898</code>  ，因此出现后一个包的 Seq 值大于前一个包的 Seq + Len，而非等于，所以预示着该数据包的上一个包未捕获到，但后面我们也有发现虽然显示上一个包未捕获到，实际紧随它的后一个包就是它们之间的数据包，只是调转了包而已。</p>\n<h2 id=\"d-端口\"><a class=\"anchor\" href=\"#d-端口\">#</a> D、端口</h2>\n<p><strong>8、TCP Port numbers reused</strong></p>\n<p>这个死活没捕捉出来，就简单说一下吧。</p>\n<p>当发送 SYN 标志时（不是 SYN + ACK），如果已经存在一个使用相同地址和端口的现有会话，那么将会被 Wireshark 标记 [TCP Port numbers reused]。</p>\n<h2 id=\"e-重传\"><a class=\"anchor\" href=\"#e-重传\">#</a> E、重传</h2>\n<p><strong>9、TCP Spurious Retransmission</strong></p>\n<p>TCP 虚假重传，意味着发送端认为发送的包已经丢失了，然后就重传了，尽管此时接收端已经发送了对这些包的确认（确认还没收到或者已经丢失了）。</p>\n<p><img data-src=\"image-20221013232224434.png\" alt=\"image-20221013232224434\" /></p>\n<p>如图，第 459 号包出现虚拟重传现象，实际为第 453 号包的重传，可从显示来看第 453 号包是已经是得到接收端的 ACK 响应了，理论来讲是不会重传的，但前面也有说到了，可能会出现接收端确认了请求（已经发出去了），发送端却还没收到或者已经丢失了，那么发送端将会重传数据，而由于这时这段数据包在初包发送后接收端有回一次请求，这次重传相当于接收端又回了一次请求（即重复了两次响应，可以看到第 460 号包标志为 [TCP Dup ACK] 了），所以对于这种有回 ACK 还重传的数据包将被标志为 [TCP Spurious Retransmission] 。然后至于为什么是重传了第 453 号包，可以看到第 460 号包的信息提示，这是 ACK 响应第 459 号包的，但同时也是跟第 454 号包重复，而第 454 号包对应响应第 453 号包的，那自然而然地得到第 459 号包为第 453 号包的重传。</p>\n<p><strong>10、TCP Retransmission</strong></p>\n<p>TCP 重传，与上面不同的是如果一个包不确定是否丢了，但它又没有像上面 [TCP Spurious Retransmission] 那样得到接收端的 ACK 响应，那它大概率就是丢包了，就不会快速重传；而针对这种情况，发送方也就只好等到超时了再重传，此类重传包就会被 Wireshark 标志 [TCP Retransmission] 。</p>\n<p><img data-src=\"image-20221014221501852.png\" alt=\"image-20221014221501852\" /></p>\n<p>如图，第 33 号包被标志为 [TCP Previous segment not captured]，预示着有可能出现丢包，并且在后面一段时间内也没有像前面那样有标志 [TCP Out-Of-Order] 提示的包，排除了乱序情况，最终等待超时，重传数据包，于是第 33 号重传包就有了 [TCP Retransmission] 标志。TCP 重传是 TCP 通讯中常有的事情，有时候看到一大堆黑漆漆一片的 error 事件，可能就是这种情况。</p>\n<h2 id=\"f-tcp-window\"><a class=\"anchor\" href=\"#f-tcp-window\">#</a> F、TCP Window</h2>\n<p><strong>11、TCP Window Full</strong></p>\n<p>顾名思义，就是窗口已满，指的发送端发送的数据已经达到的接受窗口的上限；那么发送端暂停发送，等待新的接收窗口的通告。</p>\n<p><img data-src=\"image-20221014235639055.png\" alt=\"image-20221014235639055\" /></p>\n<p>如图，在这组数据中，从第 526323 号包开始，出现了 [TCP Window Full] 表明发送数据达到上限了，同时还有另一个 [TCP Spurious Retransmission] 表明了虚假重传，但可惜的是接收端后续都没有响应，最终导致在发送 RST 报文后，关闭 TCP 连接。</p>\n<p><strong>12、TCP Window Update</strong></p>\n<p>TCP 协议允许随时改变窗口的大小，并且通过发送标识有 WindowUpdate 的报文通知对端；或者当接收端的应用程序消耗完了已经从 RX 缓冲区接收到的数据时，也会发生 WindowUpdate，以指示缓冲区中现在有更多可用空间；以上这些数据包将被标志 [TCP Window Update]。[TCP Window Update] 是 TCP 通信中的一个状态，它可以发生的原因还有有很多，通常在 TCP ZeroWindow 条件发生后看到。</p>\n<p><img data-src=\"image-20221014234941548.png\" alt=\"image-20221014234941548\" /></p>\n<p><strong>13、TCP ZeroWindow</strong></p>\n<p>如图，当接收窗口值大小为零（Win = 0）且非 SYN、FIN 或 RST 数据时设置。</p>\n<p><img data-src=\"image-20221014223515008.png\" alt=\"image-20221014223515008\" /></p>\n<p>在每个 TCP 报头中的窗口字段表明着接收端可以接受的数据量大小；如果接收端不能接受任何数据，它将把窗口值设置为零，这告诉发送端暂停其传输。在某些特定情况下，这是正常的，例如，打印机可能会在加载或翻转一张纸时使用零窗口暂停打印作业的传输；然而，在大多数情况下，这表明接收端存在性能或容量问题。恢复暂停的连接可能需要很长时间 (有时需要几分钟)，即使导致零窗口的底层条件很快就会清除。</p>\n<p><strong>14、TCP ZeroWindowProbe</strong></p>\n<p>当通信的一方接收到 TCP ZeroWindow 报文后，会定时发送 TCP ZeroWindowProbe 报文进行探测；探测报文是需要发送下一字节数据，然后通过接收端的响应，由此来判断接收端窗口值是否仍然为 0，如果接收方回复窗口大小仍然为零，则发送端继续探测。ZeroWindowProbe 它有助于证明发送端已经确认到接收端其 TCP 窗口大小为零，但仍试图让数据继续交互而非关闭通讯。</p>\n<p><img data-src=\"windows-3.png\" alt=\"img\" /></p>\n<p><strong>15、TCP ZeroWindowProbeAck</strong></p>\n<p>作为 [TCP ZeroWindowProbe] 的 ACK 应答，结合 TCP ZeroWindowProbe 理解。ZeroWindowProbeAck 数据包的存在也表明网络正在传递数据包并且设备没有关闭。</p>\n<h2 id=\"g-交互\"><a class=\"anchor\" href=\"#g-交互\">#</a> G、交互</h2>\n<p><strong>16、TCP Conversation Completeness</strong></p>\n<ul>\n<li>SYN</li>\n<li>SYN-ACK</li>\n<li>ACK</li>\n<li>DATA</li>\n<li>FIN</li>\n<li>RST</li>\n</ul>\n<p><img data-src=\"0.jpg\" alt=\"img\" /></p>\n<h1 id=\"常见表达式\"><a class=\"anchor\" href=\"#常见表达式\">#</a> 常见表达式</h1>\n<p><strong>1、运算符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">英文写法</th>\n<th style=\"text-align:center\">别名</th>\n<th style=\"text-align:center\">C-like</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">eq</td>\n<td style=\"text-align:center\">any_eq</td>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">相等（如果超过一个）</td>\n<td style=\"text-align:center\"><code>ip.src == 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ne</td>\n<td style=\"text-align:center\">all_ne</td>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不相等（如果多于一个，则全部）</td>\n<td style=\"text-align:center\"><code>ip.src != 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">all_eq</td>\n<td style=\"text-align:center\">===</td>\n<td style=\"text-align:center\">相等（如果多于一个，则全部）</td>\n<td style=\"text-align:center\"><code>ip.src === 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">any_ne</td>\n<td style=\"text-align:center\">!==</td>\n<td style=\"text-align:center\">不相等（如果多于一个，则任意）</td>\n<td style=\"text-align:center\"><code>ip.src !== 10.0.0.5</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">gt</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于</td>\n<td style=\"text-align:center\"><code>frame.len &gt; 10</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">lt</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于</td>\n<td style=\"text-align:center\"><code>frame.len &lt; 128</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ge</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于或等于</td>\n<td style=\"text-align:center\"><code>frame.len ge 0x100</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">le</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于或等于</td>\n<td style=\"text-align:center\"><code>frame.len &lt;= 0x20</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>2、逻辑符</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">英文写法</th>\n<th style=\"text-align:center\">C-like</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">例子</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">and</td>\n<td style=\"text-align:center\">&amp;&amp;</td>\n<td style=\"text-align:center\">逻辑与</td>\n<td style=\"text-align:center\"><code>ip.src==10.0.0.5 and tcp.flags.fin</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">or</td>\n<td style=\"text-align:center\" rowspan=\"2\">||</td>\n<td style=\"text-align:center\">逻辑或</td>\n<td style=\"text-align:center\"><code>ip.src==10.0.0.5 or ip.src==192.1.1.1</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">xor</td>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:center\"><code>tr.dst[0:3] == 0.6.29 xor tr.src[0:3] == 0.6.29</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">not</td>\n<td style=\"text-align:center\">!</td>\n<td style=\"text-align:center\">逻辑非</td>\n<td style=\"text-align:center\"><code>not llc</code></td>\n</tr>\n</tbody>\n</table>\n<p><strong>3、协议过滤</strong></p>\n<pre><code>ip.proto == xxx\n\nnote: xxx表示为对应的协议，如 TCP：ip.proto == TCP\n</code></pre>\n<ul>\n<li><strong>TCP：</strong> 只显示 TCP 协议的数据流</li>\n<li><strong>UDP：</strong> 只显示 UDP 协议的数据流</li>\n<li><strong>HTTP：</strong> 只显示 HTTP 协议的数据流</li>\n<li><strong>ICMP：</strong> 只显示 ICMP 协议的数据流</li>\n<li><strong>ARP：</strong> 只显示 ARP 协议的数据流</li>\n<li><strong>DNS：</strong> 只显示 DNS 协议的数据流</li>\n</ul>\n<p><strong>4、IP 过滤</strong></p>\n<ul>\n<li><code>ip.addr == 192.168.116.138</code>  ，只显示 <strong>IP 地址</strong>为  <code>192.168.116.138</code>  有关的数据流</li>\n<li><code>ip.src == 192.168.116.138</code>  ，只显示<strong>源 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li>\n<li><code>ip.dst == 192.168.116.138</code>  ，只显示<strong>目标 IP 地址</strong>为  <code>192.168.116.138</code>  的数据流</li>\n</ul>\n<p><strong>5、端口过滤</strong></p>\n<ul>\n<li><code>tcp.port == 80</code>  ，只显示 80 端口 TCP 数据流</li>\n<li><code>udp.prot == 67</code>  ，只显示 67 端口 UDP 数据流</li>\n<li><code>tcp.srcport == 80</code>  , 只显示源地址的 80 端口数据流</li>\n<li><code>tcp.dstport == 80</code>  ，只显示目的地址 80 端口数据流</li>\n</ul>\n<p><strong>6、过滤 HTTP 协议</strong></p>\n<ul>\n<li><code>http.request.method == &quot;GET&quot;</code>  ，显示 GET 请求</li>\n<li><code>http.request.method == &quot;POST&quot;</code>  ，显示 POST 请求</li>\n<li><code>http.request.code == 404</code>  ，显示状态码为 404</li>\n</ul>\n<p>参看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cud2lyZXNoYXJrLm9yZy9kb2NzL3dzdWdfaHRtbF9jaHVua2VkL0NoV29ya0J1aWxkRGlzcGxheUZpbHRlclNlY3Rpb24uaHRtbA==\">https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html</span></p>\n<h1 id=\"列信息增删\"><a class=\"anchor\" href=\"#列信息增删\">#</a> 列信息增删</h1>\n<p><strong>1、增加列信息</strong></p>\n<p>在报文的信息栏，选着想要显示的信息，右键点击添加：</p>\n<p><img data-src=\"image-20221006221325561.png\" alt=\"image-20221006221325561\" /></p>\n<p><strong>2、删除列信息</strong></p>\n<p>在监控报文栏，选择不需要的列，右键选中：</p>\n<p><img data-src=\"image-20221006221434994.png\" alt=\"image-20221006221434994\" /></p>\n<p><strong>3、隐藏列信息</strong></p>\n<p>同样在监控报文栏操作，随便选择一列，右键选中，然后把想要隐藏的列去掉勾选，这里就不放图了。</p>\n",
            "tags": [
                "history",
                "工具"
            ]
        }
    ]
}