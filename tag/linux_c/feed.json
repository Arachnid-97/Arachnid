{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"linux_c\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/linux_c-exit-and-return/",
            "url": "https://arachnid.cc/linux_c-exit-and-return/",
            "title": "Linux c _exit()、exit(0)、exit(1) 与 return 区别详解",
            "date_published": "2024-07-07T09:14:39.000Z",
            "content_html": "<h1 id=\"功能\"><a class=\"anchor\" href=\"#功能\">#</a> 功能：</h1>\n<ul>\n<li>_exit () ：退出程序。</li>\n<li>exit（0）：运行正常退出程序；</li>\n<li>exit（1）：运行异常退出程序；</li>\n<li>return（）：返回函数，若在主函数中，则会退出函数并返回值。</li>\n</ul>\n<h1 id=\"_exit-和-exit-区别\"><a class=\"anchor\" href=\"#_exit-和-exit-区别\">#</a> _exit () 和 exit () 区别：</h1>\n<ul>\n<li>\n<p>exit () 会将缓冲区的数据写完再结束进程到内核中去（退出进程会清理 I/O 缓冲区）。</p>\n</li>\n<li>\n<p>_exit () 直接结束进程进入到内核中。</p>\n</li>\n<li>\n<p>exit () 函数定义在 stdlib.h 中，_exit () 定义在 unistd.h 中。</p>\n</li>\n<li>\n<p>图示：</p>\n<p><img data-src=\"/linux_c-exit-and-return/91748e224d81a92ab21cf272b5244e21.png\" alt=\"img\"></p>\n</li>\n</ul>\n<p>示例：</p>\n<p><strong>_exit()</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hello</pre></td></tr></table></figure><p><strong>exit()</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hello</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>OK</pre></td></tr></table></figure><p><strong>原因：</strong></p>\n<p>printf 函数使用的是缓冲 I/O 的方式，该函数在遇到  <code>\\n</code>  换行符时自动的从缓冲区中将记录读出。</p>\n<p>exit () 将缓冲区的数据写完后才能退出来，所以调用 exit () 函数后程序并不会马上退出，会把 OK 也输出出来。</p>\n<p>_exit () 是直接退出进入到内核中了。</p>\n<h1 id=\"exit0-和-exit1-区别\"><a class=\"anchor\" href=\"#exit0-和-exit1-区别\">#</a> exit (0) 和 exit (1) 区别：</h1>\n<ul>\n<li>exit (0)：运行正常退出程序。</li>\n<li>exit (1)：运行异常退出程序，返回值 1 是返回给操作系统的。</li>\n</ul>\n<h1 id=\"return-和-exit-区别\"><a class=\"anchor\" href=\"#return-和-exit-区别\">#</a> return 和 exit () 区别：</h1>\n<ul>\n<li>return 是关键字；exit () 是函数。</li>\n<li>return 是语言级别的，表示调用堆栈的返回；而 exit () 是系统调用级别的，表示进程的结束。</li>\n<li>return 是退出（返回）函数，将控制权移交给递归的前一级；exit () 是直接退出进程。</li>\n<li>在最初调用的 main 函数中调用 return 和 exit 的现象很模糊，非主函数中调用 return 和 exit 效果很明显。</li>\n</ul>\n",
            "tags": [
                "Linux",
                "linux_c"
            ]
        },
        {
            "id": "https://arachnid.cc/linux_c-time-configuration/",
            "url": "https://arachnid.cc/linux_c-time-configuration/",
            "title": "Linux c 时间时区配置",
            "date_published": "2023-06-21T15:54:38.000Z",
            "content_html": "<h1 id=\"时间与日期\"><a class=\"anchor\" href=\"#时间与日期\">#</a> 时间与日期</h1>\n<p><strong>GMT 和 UTC</strong></p>\n<p>GMT，即格林尼治标准时间，也就是世界时。GMT 的正午是指当太阳横穿格林尼治子午线（本初子午线）时的时间。但由于地球自转不均匀不规则，导致 GMT 不精确，现在已经不再作为世界标准时间使用。</p>\n<p>UTC，即协调世界时。UTC 是以原子时秒长为基础，在时刻上尽量接近于 GMT 的一种时间计量系统。为确保 UTC 与 GMT 相差不会超过 0.9 秒，在有需要的情况下会在 UTC 内加上正或负闰秒。UTC 现在作为世界标准时间使用。</p>\n<p>所以，UTC 与 GMT 基本上等同，误差不超过 0.9 秒。</p>\n<p><strong>时区</strong></p>\n<p>地球自西向东旋转，东边比西边先看到太阳，东边的时间也比西边的早。为了统一世界的时间，1884 年的国际经度会议规规定将全球划分为 24 个时区（东、西各 12 个时区）。规定英国（格林尼治天文台旧址）为零时区（GMT+00），东 1-12 区，西 1-12 区，中国北京处于东 8 区（GMT+08）。</p>\n<p>若中国当前时间为 8 点整，则英国时间为 0 点整。</p>\n<p><strong>UTC 时间与本地时间</strong></p>\n<p>UTC + 时区差 = 本地时间</p>\n<p>时区差东为正，西为负。在此，把东八区时区差记为  <code>+08</code></p>\n<p>UTC + (+08) = 本地（北京）时间</p>\n<p><strong>UNIX 时间戳</strong></p>\n<p>由 Unix 内核提供的基本时间服务是自国际标准时间公元 1970 年 1 月 1 日 00:00:00 以来的秒数。</p>\n<h1 id=\"时间及时区查看命令\"><a class=\"anchor\" href=\"#时间及时区查看命令\">#</a> 时间及时区查看命令</h1>\n<ul>\n<li>获取 UTC 世界时间</li>\n</ul>\n<p><code>date -u</code></p>\n<ul>\n<li>获取当地时间</li>\n</ul>\n<p><code>date</code></p>\n<ul>\n<li>获取当地时间及时差</li>\n</ul>\n<p><code>date -R</code></p>\n<h1 id=\"时区设置命令\"><a class=\"anchor\" href=\"#时区设置命令\">#</a> 时区设置命令</h1>\n<p><strong>1、对于完整的 Linux 系统</strong></p>\n<ol>\n<li>命令跟描述对不上号的  <code>tzselect</code></li>\n</ol>\n<p>看起来很像一个时区选择的工具，但并非如此。事实上 tzselect 仅仅是一个查看时区表示方式的『向导』程序而已。通过依次询问大洲→国家→城市，最后告诉你如何 TZ 变量的写法，比如北京时间是： <code>Asia/Shanghai</code></p>\n<ol start=\"2\">\n<li>TZ 变量</li>\n</ol>\n<p>根据上面的指导，可以获知通过修改 TZ 变量，直接修改时区信息，例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-R</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command></td><td><pre> Tue, <span class=\"token number\">17</span> Jan <span class=\"token number\">2017</span> <span class=\"token number\">13</span>:57:06 +0000</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">export</span>  <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span><span class=\"token string\">'Asia/Shanghai'</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-R</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command></td><td><pre> Tue, <span class=\"token number\">17</span> Jan <span class=\"token number\">2017</span> <span class=\"token number\">19</span>:57:18 +0600</pre></td></tr></table></figure><p>但如果不写在环境变量文件配置里的话，一般是会话级的操作，取消重新打开便会失效；因此对于在 shell 中实现更改 TZ 变量，只能做到临时变更时区信息。</p>\n<p>正确做法是到  <code>/etc/profile</code>  里（或用户的  <code>~/.profile</code>  或  <code>~/.bashrc</code>  文件等），直接  <code>export TZ='xxx'</code>  更改时区（时区的名字可以用  <code>tzselect</code>  向导来确定）</p>\n<ol start=\"3\">\n<li><code>/etc/localtime</code>  文件</li>\n</ol>\n<p>默认情况下情况下，TZ 属性是空，这时候是靠  <code>/etc/localtime</code>  文件来确定的时区。而此文件通常又是一个到  <code>/usr/share/zoneinfo/</code>  下各种时区文件的软连接。通过修改  <code>/etc/localtime</code>  指向的软连接，进而修改系统的时区。比如下面的方法，将 localtime 文件设置为了北京时间：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</pre></td></tr></table></figure><p><strong>2、对于裁剪的 Linux 系统，如：arm linux</strong></p>\n<ol>\n<li><code>tzselect</code>  命令</li>\n</ol>\n<p>正常情况下，裁剪过的是不支持该命令的，因此相对于上面的 2、3 两点并不适用于此。</p>\n<ol start=\"2\">\n<li>TZ 变量</li>\n</ol>\n<p>与上面一样可通过修改 TZ 变量，直接修改时区信息，但与此不同的是，并不能通过  <code>TZ='Asia/Shanghai'</code>  去修改，只能通过时区偏移量来修改，例如我们中国的北京时间相对于  <code>UTC-0</code>  的偏移量是  <code>UTC+8</code>  ；那么则修改为：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-R</span></pre></td></tr><tr><td data-num=\"2\"></td><td data-command></td><td><pre> Tue, <span class=\"token number\">17</span> Jan <span class=\"token number\">2017</span> <span class=\"token number\">13</span>:57:06 +0000</pre></td></tr><tr><td data-num=\"3\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token builtin class-name\">export</span>  <span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span><span class=\"token string\">'CST-8'</span></pre></td></tr><tr><td data-num=\"4\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">date</span> <span class=\"token parameter variable\">-R</span></pre></td></tr><tr><td data-num=\"5\"></td><td data-command></td><td><pre> Tue, <span class=\"token number\">17</span> Jan <span class=\"token number\">2017</span> <span class=\"token number\">19</span>:57:18 +0600</pre></td></tr></table></figure><p>注意，在这里，UTC+、- 是相反的，UTC-8 代表的是相对于 UTC 加八个小时，反之减八个小时......；而 CST 则是对应为北京时区缩写。</p>\n<p>时区表信息可看：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cudGltZWFuZGRhdGUuY29tL3RpbWUvem9uZXMv\">https://www.timeanddate.com/time/zones/</span></p>\n<ol start=\"3\">\n<li><code>/etc/localtime</code>  文件</li>\n</ol>\n<p>由于裁剪问题，系统中是没有  <code>/usr/share/zoneinfo/</code>  文件夹的，如有需要，将 PC 端的  <code>/usr/share/zoneinfo</code>  整个  <code>zoneinfo</code>  文件夹复制到 rootfs 的  <code>/usr/share</code>  下，这样嵌入式系统中就有了  <code>timezone</code>  。</p>\n<p>最后同样执行：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td data-command=\"[root@localhost] $\"></td><td><pre><span class=\"token function\">ln</span> <span class=\"token parameter variable\">-sf</span> /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</pre></td></tr></table></figure><p>note：时区信息保存在  <code>/etc/localtime</code>  文件里，如果没有该文件则系统是零时区，有该文件时系统会去读取该文件。具体该文件的内容可以不同关心，在  <code>/usr/share/zoneinfo/</code>  目录下有各个时区对应的文件，只需要拷贝过去就可以。比如我们常用的东八区时间就是对应  <code>/usr/share/zoneinfo/Asia/Shanghai</code>  文件，只需要将该文件指向或拷贝到  <code>/etc/localtime</code>  就将系统时间改为东八区。</p>\n<h1 id=\"常用-api\"><a class=\"anchor\" href=\"#常用-api\">#</a> 常用 API</h1>\n<h2 id=\"时间结构体\"><a class=\"anchor\" href=\"#时间结构体\">#</a> 时间结构体</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_sec<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Seconds (0-60) */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_min<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Minutes (0-59) */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_hour<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Hours (0-23) */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_mday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Day of the month (1-31) */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_mon<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Month (0-11) */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_year<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Year - 1900 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_wday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Day of the week (0-6, Sunday = 0) */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_yday<span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* Day in the year (0-365, 1 Jan = 0) */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">int</span> tm_isdst<span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* Daylight saving time */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">time_t</span>      tv_sec<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* seconds (秒) */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">suseconds_t</span> tv_usec<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* microseconds (微秒) */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timezone</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> tz_minuteswest<span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* minutes west of Greenwich */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">int</span> tz_dsttime<span class=\"token punctuation\">;</span>         <span class=\"token comment\">/* type of DST correction */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"时间函数归类\"><a class=\"anchor\" href=\"#时间函数归类\">#</a> 时间函数归类</h2>\n<p><strong>1、C99 标准库函数</strong></p>\n<p>需  <code>#include &lt;time.h&gt;</code></p>\n<ul>\n<li>获取时间戳：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* time () 函数，返回一个从 1970 年 1 月 1 日 00:00:00 到现在的 time_t 类型 UTC 时间，当参数为 NULL 时直接返回秒数，当然也会将该值写入 t 指针指向的地址。 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* mktime () 会把本地时间转换为 UTC 时间 */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//note：两者区别在于传入的参数结构体不同，mktime 存在时区转换；time (t) 等价于 mktime (localtime (time (t)))。</span></pre></td></tr></table></figure><ul>\n<li>获取  <code>struct tm</code>  类型的时间：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* gmtime () 是零时区，把 UTC 时间转换成北京时间的话，需要在年数上加 1900，月份上加 1，小时数加上 8。 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span><span class=\"token function\">gmtime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span><span class=\"token function\">gmtime_r</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* localtime () 将得到本地时间，该函数与 gmtime () 唯一区别是，在转换成北京时间的小时数不需要加上 8。 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span><span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span><span class=\"token function\">localtime_r</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//note：localtime 是将时区考虑在内了，转出的是当前时区的时间。但是注意，有些嵌入式设备上被裁减过的系统，时区没有被设置好，导致二者转出来的时间都是零时区的。在多线程应用里面，应该用后缀不带 `_r` 的函数，如： localtime_r 函数替代 localtime 函数，因为 localtime_r 是线程安全的，例子看第五大点。</span></pre></td></tr></table></figure><ul>\n<li>时间日期格式化：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 将 tm 结构中的时间信息转换为相应时间的字符串 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">asctime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">asctime_r</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>tm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 将日历时间参数 timep 转换为一个表示本地当前时间的字符串，函数已经由时区转换成当地时间 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ctime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token function\">ctime_r</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token class-name\">time_t</span> <span class=\"token operator\">*</span>timep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//note：两者区别在于传入的参数结构体不同，但转换出来的信息格式显示是一样的；asctime 是直接把时间格式化，而 ctime 是经过时区转换后再格式化输出；ctime (t) 等价于 asctime (localtime (t))。</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 常用时间格式化参数看下方描述 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token class-name\">size_t</span> <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> max<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>format<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>tm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在使用  <code>strftime</code>  时间格式化函数所涉及的相关参数的含义如下：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>%F</td>\n<td>将时间格式化为年 - 月 - 日</td>\n</tr>\n<tr>\n<td>%T</td>\n<td>将时间格式化为显示时分秒: hh:mm:ss</td>\n</tr>\n<tr>\n<td>%Y</td>\n<td>将时间格式化为带世纪部分的十制年份</td>\n</tr>\n<tr>\n<td>%m</td>\n<td>将时间格式化为十进制表示的月份</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>将时间格式化为十进制的每月中的第几天</td>\n</tr>\n<tr>\n<td>%H</td>\n<td>将时间格式化为 24 小时制的小时</td>\n</tr>\n<tr>\n<td>%M</td>\n<td>将时间格式化为十进制表示的分钟数</td>\n</tr>\n<tr>\n<td>%S</td>\n<td>将时间格式化为十进制表示的秒数</td>\n</tr>\n</tbody>\n</table>\n<p>更多参数请阅：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jcHJvZ3JhbW1pbmcvYy1mdW5jdGlvbi1zdHJmdGltZS5odG1s\">https://www.runoob.com/cprogramming/c-function-strftime.html</span></p>\n<ul>\n<li>获取时间差：</li>\n</ul>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">double</span> <span class=\"token function\">difftime</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">time_t</span> time1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">time_t</span> time0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>2、Uinx 系统函数</strong></p>\n<p>需  <code>#include &lt;sys/time.h&gt;</code></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/time.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>获取 <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> 类型的时间：</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/* 相对于 time () 和 mktime () ，gettimeofday () 能获取更精准的微秒级别，及相应的时区信息，需要注意的是 tz 是依赖于系统，不同的系统可能存在获取不到的可能，因此通常设置为 NULL */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>tv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timezone</span> <span class=\"token operator\">*</span>tz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 成功则返回 0，失败返回 －1，错误代码存于 errno</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// EFAULT：指针 tv 或 tz 所指的内存空间无效。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>设置 <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> 类型的时间：</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">settimeofday</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> <span class=\"token operator\">*</span>tv<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timezone</span> <span class=\"token operator\">*</span>tz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 成功则返回 0，失败返回 －1，错误代码存于 errno</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// EPERM：调用进程没有足够权限调用 settimeofday ()，即权限不够。</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// EINVAL：时区或其它内容无效，无法正确设置时间。</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//note：settimeofday 的修改时间需要在 root 权限下才能配置成功。</span></pre></td></tr></table></figure><p><strong>3、总结</strong></p>\n<p><code>time</code> 、 <code>gmtime</code> 、 <code>asctime</code>  所表示的时间都是 UTC 时间，只是数据类型不一样，<br>\n而  <code>mktime</code> 、 <code>localtime</code> 、 <code>ctime</code>  的时间都存在时区之间变换。</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>传参类型</th>\n<th>返回类型</th>\n<th>时区转换</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>time()</td>\n<td>time_t</td>\n<td>time_t</td>\n<td>UTC+0</td>\n<td>用于获取 UTC 零时区的时间戳格式</td>\n</tr>\n<tr>\n<td>mktime()</td>\n<td>struct tm</td>\n<td>time_t</td>\n<td>UTC-t</td>\n<td>用于获取 UTC 零时区的时间戳格式，但会经过时区转换，把本地时间内部换成 UTC+0</td>\n</tr>\n<tr>\n<td>gmtime()</td>\n<td>time_t</td>\n<td>struct tm</td>\n<td>UTC+0</td>\n<td>用于获取 UTC 零时区的</td>\n</tr>\n<tr>\n<td>localtime()</td>\n<td>time_t</td>\n<td>struct tm</td>\n<td>UTC+t</td>\n<td></td>\n</tr>\n<tr>\n<td>asctime()</td>\n<td>struct tm</td>\n<td>string</td>\n<td>UTC+0</td>\n<td></td>\n</tr>\n<tr>\n<td>ctime()</td>\n<td>time_t</td>\n<td>string</td>\n<td>UTC+t</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"函数应用\"><a class=\"anchor\" href=\"#函数应用\">#</a> 函数应用</h2>\n<p>1、获取当前时区的时间戳偏移量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">get_localtime_interval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">time_t</span> timep_utc<span class=\"token punctuation\">,</span> timep_local<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> tm_utc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timep_utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">gmtime_r</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timep_utc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tm_utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\ttimep_local <span class=\"token operator\">=</span> <span class=\"token function\">mktime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tm_utc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>timep_utc <span class=\"token operator\">-</span> timep_local<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>2、获取当前时区的时间戳（带时区的本地时间）</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">get_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">time_t</span> timep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\ttimep <span class=\"token operator\">+=</span> <span class=\"token function\">get_localtime_interval</span><span class=\"token punctuation\">(</span>timep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">return</span> timep<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>3、获取时区偏移量</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">time_t</span> <span class=\"token function\">get_time_stamp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token class-name\">time_t</span> timep_zone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    timep_zone <span class=\"token operator\">=</span> <span class=\"token function\">get_localtime_interval</span><span class=\"token punctuation\">(</span>timep<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">return</span> timep_zone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>4、时区设置函数</p>\n<p>时间函数除了 gmttime ()、asctime () 不受环境变量 TZ 的影响外，大部分函数都受到环境变量 TZ 的影响，这几个函数是： localtime、mktime、ctime 和 strftime。如果定义了 TZ，则这些函数将使用其值以代替系统默认时区。</p>\n<p>在 Unix 环境下可以通过改变系统文件修改环境变量，也可以通过函数 setenv () 修改。</p>\n<p>TZ 指定了当前的系统时区。这个时区会影响我们所做的时间转换。例如假设当前的系统时间是 8:00AM，如果我们把当前的时区设置成东八区，则标准时间就是（即 UTC+0）的时间就是 8-8=0:00AM，如果是看成是东六区的话，则标准时间就变成了 8-6=2:00AM。</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span>  </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span>  </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span>    </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">setenv</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TZ\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CST-8\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 北京东八区</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//setenv (\"TZ\", \"UTC+0\", 1);   // 将当前时区设置成标准区</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">timeval</span> tv<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span><span class=\"token operator\">*</span> tm_time<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">gettimeofday</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    tm_time <span class=\"token operator\">=</span> <span class=\"token function\">gmtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%a %b %m %H:%M:%S %Z %Y\"</span><span class=\"token punctuation\">,</span> tm_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GMT time: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    tm_time <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tv<span class=\"token punctuation\">.</span>tv_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">strftime</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%a %b %m %H:%M:%S %Z %Y\"</span><span class=\"token punctuation\">,</span> tm_time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local time: %s\\n\"</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"localtime-和-localtime_r-区别\"><a class=\"anchor\" href=\"#localtime-和-localtime_r-区别\">#</a> localtime 和 localtime_r 区别</h1>\n<p>示例来源（下方为原文备份记录）：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rlc3QxMjgwL2FydGljbGUvZGV0YWlscy84MDkxNzk2Mg==\">https://blog.csdn.net/test1280/article/details/80917962</span></p>\n<p><code>localtime</code>  和  <code>localtime_r</code>  的函数功能： converts the calendar time timep to broken-time representation</p>\n<p>在调用  <code>localtime</code>  和  <code>localtime_t</code>  函数时，需特别注意：</p>\n<ul>\n<li>\n<p><code>localtime</code>  是不可重入函数，非线程安全</p>\n</li>\n<li>\n<p><code>localtime_r</code>  是可重入函数，线程安全</p>\n</li>\n</ul>\n<p>1、使用  <code>localtime</code>  时不可重入示范：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">time_t</span> curTime <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">time_t</span> aftTime <span class=\"token operator\">=</span> curTime <span class=\"token operator\">+</span> <span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>pTm1 <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> <span class=\"token operator\">*</span>pTm2 <span class=\"token operator\">=</span> <span class=\"token function\">localtime</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aftTime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%04d%02d%02d%02d%02d%02d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_year <span class=\"token operator\">+</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_mon <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            pTm1<span class=\"token operator\">-></span>tm_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%04d%02d%02d%02d%02d%02d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_year <span class=\"token operator\">+</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_mon <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_mday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_hour<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_min<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            pTm2<span class=\"token operator\">-></span>tm_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译 &amp; 运行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gcc <span class=\"token parameter variable\">-o</span> main main.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ ./main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">20180704225205</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">20180704225205</span></pre></td></tr></table></figure><p>调用  <code>localtime</code>  函数并获取其返回值（一个指向  <code>struct tm</code>  结构类型数据的指针）后，我们并未对返回值进行<strong>显式地释放</strong>。</p>\n<p><strong>这并没有什么问题（不会导致内存泄漏）</strong>。</p>\n<p>因为  <code>localtime</code>  函数返回值是一个指针，指向一个静态变量，这个静态变量是库中的一个  <code>static struct tm</code>  类型数据。</p>\n<p>man localtime：</p>\n<p>The return value points to a <strong>statically allocated struct</strong> which might <strong>be overwritten</strong> by <strong>subsequent calls</strong> to any of the date and time functions.</p>\n<p>这将引出新的问题，<strong>同一进程</strong>多个线程中同时调用（极短时间内连续调用）  <code>localtime</code>  函数，返回值  <code>tm</code>  可能被覆盖。</p>\n<p>举个栗子：</p>\n<p>两个线程 A 和 B 同时调用  <code>localtime</code>  函数：</p>\n<p>时刻 1：线程 A 调用  <code>localtime</code>  函数，得到一个指针，指向  <code>static struct tm</code>  类型变量；（tm 中存储的值更新为 value-a）</p>\n<p>时刻 2：线程 B 调用  <code>localtime</code>  函数，得到一个指针，指向  <code>static struct tm</code>  类型变量；（tm 中存储的值更新为 value-b）</p>\n<p>时刻 3：线程 A 对  <code>localtime</code>  返回的指针进行相关引用操作（例如 printf 输出某字段），此时  <code>static struct tm</code>  中的值实际是 value-b，并非预期的 value-a。</p>\n<p>时刻 4：线程 B 对  <code>localtime</code>  返回的指针进行相关引用操作，此时  <code>static struct tm</code>  中的值实际是 value-b。</p>\n<p>上面的示范代码虽然是在同一线程中，但是已经可以简单模拟这样的多线程执行调用流程。</p>\n<p><strong>如何解决？</strong></p>\n<p><code>localtime_r</code>  是  <code>localtime</code>  的可重入版本（线程安全版本）。</p>\n<p><code>localtime</code>  不可重入是由于  <code>static struct tm</code>  是库中的一个静态变量，如果我们在调用  <code>localtime</code>  时传入一个  <code>struct tm</code>  类型变量（指针）用于存放结果，岂不是实现<strong>可重入</strong>？</p>\n<p>Bingo！</p>\n<p><code>struct tm *localtime(const time_t *timep);</code></p>\n<p><code>struct tm *localtime_r(const time_t *timep, struct tm *result);</code></p>\n<p>调用  <code>localtime</code>  只需要传入指向  <code>time_t</code>  的一个常量指针；</p>\n<p>调用  <code>localtime_t</code>  不仅需要传入指向  <code>time_t</code>  的一个常量指针，还需要传入指向  <code>struct tm</code>  的一个指针，结果将存储在  <code>result</code>  指向的  <code>struct tm</code>  对象中；</p>\n<p>The return value points to a statically allocated struct which might be overwritten by subsequent calls to any of the date and time functions.</p>\n<p>The localtime_r() function does the same, <strong>but stores the data in a user-supplied struct</strong>.</p>\n<p>2、使用  <code>localtime_r</code>  时可重入示范：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;time.h></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">time_t</span> curTime <span class=\"token operator\">=</span> <span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">time_t</span> aftTime <span class=\"token operator\">=</span> curTime <span class=\"token operator\">+</span> <span class=\"token number\">3600</span><span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> tm1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">tm</span> tm2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">localtime_r</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>curTime<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tm1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">localtime_r</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>aftTime<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>tm2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%04d%02d%02d%02d%02d%02d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_year <span class=\"token operator\">+</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_mon <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_mday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_hour<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_min<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            tm1<span class=\"token punctuation\">.</span>tm_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"%04d%02d%02d%02d%02d%02d\\n\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_year <span class=\"token operator\">+</span> <span class=\"token number\">1900</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_mon <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_mday<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_hour<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_min<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            tm2<span class=\"token punctuation\">.</span>tm_sec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>编译 &amp; 运行：</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ gcc <span class=\"token parameter variable\">-o</span> main main.c</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$ ./main</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">20180704200531</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">20180704230531</span></pre></td></tr></table></figure><h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vc3VuLWZyZWRlcmljay9wLzQ3NzI1MzUuaHRtbA==\">https://www.cnblogs.com/sun-frederick/p/4772535.html</span><br>\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3Rlc3QxMjgwL2FydGljbGUvZGV0YWlscy84MDkxNzk2Mg==\">https://blog.csdn.net/test1280/article/details/80917962</span></p>\n",
            "tags": [
                "Linux",
                "linux_c"
            ]
        }
    ]
}