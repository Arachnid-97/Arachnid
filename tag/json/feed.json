{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"json\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/cjson-api-next-part/",
            "url": "https://arachnid.cc/cjson-api-next-part/",
            "title": "cJSON库 API解析（下）",
            "date_published": "2021-01-31T14:43:39.000Z",
            "content_html": "<blockquote>\n<p>继上一篇 <a href=\"https://arachnid.cc/cjson-api-first-part/\">cJSON 库 API 解析（上）</a>，本篇为下篇，以解析 JSON 数据包为主</p>\n</blockquote>\n<h1 id=\"json数据解析\"><a class=\"anchor\" href=\"#json数据解析\">#</a> JSON 数据解析</h1>\n<p>在 cJSON 里，解析 JSON 数据包，其实就是通过搜寻对应的配对关键符号或者关键字，然后一个一个剥离成为链表节点 (键值对) 的过程。</p>\n<p>其所支持的解析函数有以下几个：</p>\n<ul>\n<li>\n<p><code>CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value);</code></p>\n</li>\n<li>\n<p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithLength(const char *value, size_t buffer_length);</code></p>\n</li>\n<li>\n<p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated);</code></p>\n</li>\n<li>\n<p><code>CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated);</code></p>\n</li>\n</ul>\n<p>但一般来说，平常我们只需要用到 cJSON_Parse (); 函数来解析。同样的，在调用了 parse 函数后，使用完毕需要调用 cJSON_Delete (); 及时释放；</p>\n<p>整个解析过程，其核心操作函数为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Parser core - when encountering text, process appropriately. */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">static</span> cJSON_bool <span class=\"token function\">parse_value</span><span class=\"token punctuation\">(</span>cJSON <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> item<span class=\"token punctuation\">,</span> parse_buffer <span class=\"token operator\">*</span> <span class=\"token keyword\">const</span> input_buffer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>input_buffer <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>input_buffer<span class=\"token operator\">-></span>content <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* no input */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">/* parse the different types of values */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* null */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_read</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"null\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        item<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> cJSON_NULL<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        input_buffer<span class=\"token operator\">-></span>offset <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/* false */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_read</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"false\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        item<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> cJSON_False<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        input_buffer<span class=\"token operator\">-></span>offset <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/* true */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_read</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strncmp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        item<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> cJSON_True<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        item<span class=\"token operator\">-></span>valueint <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        input_buffer<span class=\"token operator\">-></span>offset <span class=\"token operator\">+=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">return</span> true<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/* string */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_access_at_index</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'\\\"'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">parse_string</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token comment\">/* number */</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_access_at_index</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">parse_number</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/* array */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_access_at_index</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'['</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">parse_array</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token comment\">/* object */</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">can_access_at_index</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token function\">buffer_at_offset</span><span class=\"token punctuation\">(</span>input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token char\">'&#123;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">parse_object</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> input_buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token keyword\">return</span> false<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>就像前面说的，通过搜寻对应的配对关键符号或者关键字去调用不同的处理函数，然后配对校验，并把相应的数据插入到根结点，形成一个个相连的子节点链表。</p>\n<h1 id=\"json数据获取\"><a class=\"anchor\" href=\"#json数据获取\">#</a> JSON 数据获取</h1>\n<p>当调用完上面的解析函数后，返回的是根结点指针，通过这个 cJSON 的结构指针，我们就可以利用其解析后每个节点所对应的类型，快速寻找同类型的数据，再根据提供的键（名称）来获取数据。</p>\n<p>下面就来认识一下常用的 API 函数：</p>\n<p><strong>1、类型校验：</strong></p>\n<ul>\n<li>\n<p>False： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsFalse(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>True： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsTrue(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>布尔值： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsBool(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>null： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsNull(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>数值： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsNumber(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>字符串： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>数组： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsArray(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>对象： <code>CJSON_PUBLIC(cJSON_bool) cJSON_IsObject(const cJSON * const item);</code></p>\n</li>\n</ul>\n<p>不难发现，这些函数都是用于判断参数的类型的，因此返回值只有 true（真）和 false（假）；用的比较多的是 cJSON_IsFalse (); 和 cJSON_IsTrue ();，直接判断 JSON 数据包里的布尔变量。</p>\n<p><strong>2、信息提取：</strong></p>\n<ul>\n<li>\n<p>数组： <code>CJSON_PUBLIC(cJSON *) cJSON_GetArrayItem(const cJSON *array, int index);</code></p>\n</li>\n<li>\n<p>对象： <code>CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string);</code></p>\n</li>\n<li>\n<p>对象（名称区分大小写）： <code>CJSON_PUBLIC(cJSON *) cJSON_GetObjectItemCaseSensitive(const cJSON * const object, const char * const string);</code></p>\n</li>\n</ul>\n<p><strong>3、校验类型并返回值：</strong></p>\n<ul>\n<li>\n<p>字符串： <code>CJSON_PUBLIC(char *) cJSON_GetStringValue(const cJSON * const item);</code></p>\n</li>\n<li>\n<p>数值： <code>CJSON_PUBLIC(double) cJSON_GetNumberValue(const cJSON * const item);</code></p>\n</li>\n</ul>\n<p><strong>4、获取项目数：</strong></p>\n<ul>\n<li><code>CJSON_PUBLIC(int) cJSON_GetArraySize(const cJSON *array);</code></li>\n</ul>\n<p><strong>5、错误分析：</strong></p>\n<ul>\n<li><code>CJSON_PUBLIC(const char *) cJSON_GetErrorPtr(void);</code></li>\n</ul>\n<h1 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h1>\n<p>以上篇打印的封装的数据信息为例；</p>\n<p>原封装的 JSON 数据包：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cJSON\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"v1.7.14\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"file\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cJSON.c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">75.8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KB\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"released\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"Sep\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token property\">\"latest\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>随后解析打印出来的信息：</p>\n<figure class=\"highlight tex\"><figcaption data-lang=\"TeX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>name:cJSON</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>version:v1.7.14</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>file:cJSON.c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>size:75.800000</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>unit:KB</pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>released date:2020 Sep 3</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Is it necessary to update?</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>not update</pre></td></tr></table></figure><p>代码执行（沿用上篇的封装代码）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cJSON.h\"</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jtest <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jfile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jissue <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jyear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jmonth <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jday <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/* 创建一个 JSON 格式的主对象 (主链表头结点) */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    jtest <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/* 追加字符串类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cJSON\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1.7.14\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token comment\">/* 追加一个对象到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    jfile <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_AddObjectToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">/* 往追加的对象添加对应的值 */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cJSON.c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">cJSON_AddNumberToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"size\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token comment\">/* 创建一个 JSON 格式的数组 (另一个链表头结点) */</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    jissue <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token comment\">/* 创建相应的值并把这些值添加到数组里 */</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    jyear <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jyear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    jmonth <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jmonth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    jday <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token comment\">/* 把已经填好的数据的数组插入到主对象中 */</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"released\"</span><span class=\"token punctuation\">,</span> jissue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token comment\">/* 追加一个值为 True 的布尔类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token function\">cJSON_AddTrueToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">/* 打印 JSON 对象 (整条链表) 的所有数据 */</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_Print</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token comment\">/* 释放整条链表的内存数据 */</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token function\">cJSON_Delete</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token comment\">/* ------------------------- 以上为上篇的封装代码 ------------------------- */</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre><span class=\"token comment\">/* ------------------------- 数据保留并初始化变量 ------------------------- */</span>    </pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    jtest <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    jfile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    jissue <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    jyear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    jmonth <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    jday <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jtemp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"65\"></td><td><pre><span class=\"token comment\">/* ------------------------- 以下为本篇的解析代码 ------------------------- */</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    <span class=\"token comment\">/* 解析整段 JSON 数据 */</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    jtest <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_Parse</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jtest <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parse fail.\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token comment\">/* 依次根据名称提取 JSON 数据（键值对） */</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:%s\\n\"</span><span class=\"token punctuation\">,</span> jtemp<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"version:%s\\n\\n\"</span><span class=\"token punctuation\">,</span> jtemp<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    <span class=\"token comment\">/* 解析嵌套的 JSON 对象 */</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    jfile <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"file:%s\\n\"</span><span class=\"token punctuation\">,</span> jtemp<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"size\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"size:%f\\n\"</span><span class=\"token punctuation\">,</span> jtemp<span class=\"token operator\">-></span>valuedouble<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unit:%s\\n\\n\"</span><span class=\"token punctuation\">,</span> jtemp<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>    <span class=\"token comment\">/* 解析嵌套的 JSON 数组 */</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>    jissue <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"released\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>    jyear <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetArrayItem</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>    jmonth <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetArrayItem</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>    jday <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetArrayItem</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"released date:%d \"</span><span class=\"token punctuation\">,</span> jyear<span class=\"token operator\">-></span>valueint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s \"</span><span class=\"token punctuation\">,</span> jmonth<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\\n\"</span><span class=\"token punctuation\">,</span> jday<span class=\"token operator\">-></span>valueint<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"98\"></td><td><pre></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    <span class=\"token comment\">/* 解析布尔型数据 */</span></pre></td></tr><tr><td data-num=\"100\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Is it necessary to update?\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre>    jtemp <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_GetObjectItem</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>    <span class=\"token function\">cJSON_IsTrue</span><span class=\"token punctuation\">(</span>jtemp<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not update\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>    <span class=\"token comment\">/* 等同于 cJSON_IsFalse (jtemp) ? printf (\"update\") : printf (\"not update\"); */</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\\r\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>    <span class=\"token function\">cJSON_Delete</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"108\"></td><td><pre>    <span class=\"token function\">cJSON_free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"109\"></td><td><pre></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实例：</p>\n<p><img src=\"image-20210131224342050.png\" alt=\"image-20210131224342050\" /></p>\n<h1 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h1>\n<p><strong>1、cJSON_Delete (); 函数</strong></p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* Delete a cJSON structure. */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CJSON_PUBLIC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cJSON_Delete</span><span class=\"token punctuation\">(</span>cJSON <span class=\"token operator\">*</span>item<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>next <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>item <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        next <span class=\"token operator\">=</span> item<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">&amp;</span> cJSON_IsReference<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>child <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">cJSON_Delete</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">&amp;</span> cJSON_IsReference<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>valuestring <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            global_hooks<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>valuestring<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>type <span class=\"token operator\">&amp;</span> cJSON_StringIsConst<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>string <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            global_hooks<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>item<span class=\"token operator\">-></span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        global_hooks<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        item <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过上面的代码可以了解到，当调用 cJSON_Delete (); 函数后，会通过 while 循环一直从当前节点删除释放其后面的节点，直至到尾部结点 null 节点为止；因此，在应用中，一般都是传入主链表的头结点来释放整个 JSON 数据包。</p>\n<p><strong>2、cJSON_Hooks 里的钩子函数</strong></p>\n<p>在 cJSON 项目里面，是留有 cJSON_InitHooks (); 外部引用内存管理函数的 API 接口的，其原型：</p>\n<p><code>CJSON_PUBLIC(void) cJSON_InitHooks(cJSON_Hooks* hooks);</code></p>\n<p>通过结构体 struct cJSON_Hooks 跟内部调用的内存分配挂钩，其 Hooks 原型：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cJSON_Hooks</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token comment\">/* malloc/free are CDECL on Windows regardless of the default calling convention of the compiler, so ensure the hooks allow passing those functions directly. */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>CJSON_CDECL <span class=\"token operator\">*</span>malloc_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> sz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span>CJSON_CDECL <span class=\"token operator\">*</span>free_fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span> cJSON_Hooks<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般情况是默认不调用 cJSON_InitHooks (); 函数的，因此，其内存分配管理处于默认状态，使用的是以下标准内存分配函数：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">if</span> <span class=\"token expression\"><span class=\"token function\">defined</span><span class=\"token punctuation\">(</span>_MSC_VER<span class=\"token punctuation\">)</span></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* work around MSVC error C2322: '...' address of dllimport '...' is not static */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> CJSON_CDECL <span class=\"token function\">internal_malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> CJSON_CDECL <span class=\"token function\">internal_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span> CJSON_CDECL <span class=\"token function\">internal_realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pointer<span class=\"token punctuation\">,</span> <span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>pointer<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">internal_malloc</span> <span class=\"token expression\">malloc</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">internal_free</span> <span class=\"token expression\">free</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">internal_realloc</span> <span class=\"token expression\">realloc</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></pre></td></tr></table></figure><p>如此一来，假设我们在系统上跑了 FreeRTOS（或者其他 RTOS），那么，在默认情况下，如果使用其标准内存分配函数，这样，对于多线程来讲是不安全的，所以，可以利用该函数重新把内存分配函数定义调用；例如在 FreeRTOS 中：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cJSON_Hooks cJSON_mem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>cJSON_mem<span class=\"token punctuation\">.</span>malloc_fn <span class=\"token operator\">=</span> pvPortMalloc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>cJSON_mem<span class=\"token punctuation\">.</span>free_fn <span class=\"token operator\">=</span> vPortFree<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">cJSON_InitHooks</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>cJSON_mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>通过该钩子函数，把 cJSON 内部调用的内存分配处理，更换为线程安全的 pvPortMalloc (); 和 vPortFree (); 函数。</p>\n<p><strong>3、cJSON_malloc (); 和 cJSON_free ();</strong></p>\n<p>其原型分别为：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">CJSON_PUBLIC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cJSON_malloc</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">size_t</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">CJSON_PUBLIC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token function\">cJSON_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>一般来说，cJSON_malloc (); 很少用，因为 cJSON 的数据处理 API 函数都默认会自动分配内存；而 cJSON_free (); 则更多的是用来 free cJSON 格式化出来的数据（即调用 print 类的 API 接口）。</p>\n",
            "tags": [
                "history",
                "JSON"
            ]
        },
        {
            "id": "https://arachnid.cc/cjson-api-first-part/",
            "url": "https://arachnid.cc/cjson-api-first-part/",
            "title": "cJSON库 API解析（上）",
            "date_published": "2021-01-29T15:54:23.000Z",
            "content_html": "<blockquote>\n<p>cJSON 项目可以说是一个很适合学习及应用 C 语言中的链表的项目，刨析它的源码，你会惊叹它设计之巧妙，其代码为之简洁；同时，在嵌入式应用场景中也经常发现它的身影。</p>\n<p>本系列分为上下两篇，其中上篇以应用分析其 JSON 数据封装为主。</p>\n</blockquote>\n<h1 id=\"介绍\"><a class=\"anchor\" href=\"#介绍\">#</a> 介绍</h1>\n<p>在认识 cJSON 之前，先来认识一下 JSON：</p>\n<p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation，JavaScript 对象表示法，读作 /ˈdʒeɪsən/）是一种由道格拉斯・克罗克福特构想和设计、轻量级的资料交换语言，该语言以易于让人阅读的文字为基础，用来传输由属性值或者序列性的值组成的数据对象。JSON 采用完全独立于语言的文本格式，但是也使用了类似于 C 语言家族的习惯（包括 C, C++, C#, Java, JavaScript, Perl, Python 等）。 这些特性使 JSON 成为理想的数据交换语言。</p>\n<p>其官网：<a href=\"https://www.json.org/json-en.html\">https://www.json.org/json-en.html</a></p>\n<p>而 cJSON，顾名思义就是一个使用 C 语言编写的 JSON 数据解析器，目前 cJSON 项目托管在 Github 上，仓库地址如下：<a href=\"https://github.com/DaveGamble/cJSON%EF%BC%9B%E4%BB%A5%E5%89%8D%E7%9A%84%E6%97%A7%E7%89%88%E6%9C%AC%E5%88%99%E6%98%AF%E5%AD%98%E6%94%BE%E5%9C%A8%EF%BC%9Ahttps://sourceforge.net/projects/cjson/files/%E4%B8%8A%E9%9D%A2%EF%BC%8C%E4%BD%86%E7%8E%B0%E5%B7%B2%E5%81%9C%E6%AD%A2%E6%9B%B4%E6%96%B0%EF%BC%8C%E7%BB%A7%E8%80%8C%E8%BD%AC%E5%88%B0\">https://github.com/DaveGamble/cJSON；以前的旧版本则是存放在：https://sourceforge.net/projects/cjson/files/ 上面，但现已停止更新，继而转到</a> Github 上了。</p>\n<h1 id=\"json语法\"><a class=\"anchor\" href=\"#json语法\">#</a> JSON 语法</h1>\n<p>JSON 的基本数据类型：</p>\n<ol>\n<li>\n<p>对象（<em>object</em>）：若干无序的 “键值对” (key-value pairs)，其中键是数值或字符串，以花括号  <code>&#123;</code>  开始，并以  <code>&#125;</code>  结束。</p>\n</li>\n<li>\n<p>数组 / 值的有序列表（array）：有序的零个或者多个值，使用方括号  <code>[ ]</code>  括起来。</p>\n</li>\n<li>\n<p>字符串（<em>string</em>）：以双引号  <code>&quot; &quot;</code>  括起来的零个或多个 Unicode 码位。支持反斜杠开始的转义字符序列。</p>\n</li>\n<li>\n<p>数值（<em>number</em>）：不区分整数与浮点数。JavaScript 用双精度浮点数 double 表示所有数值。</p>\n</li>\n<li>\n<p>布尔值（<em>boolean</em>）：表示为  <code>true</code>  或者  <code>false</code>  。</p>\n</li>\n<li>\n<p>null 类型：值写为  <code>null</code></p>\n</li>\n</ol>\n<p>1、JSON 对象是一个若干无序的 &quot;名称 / 值&quot; 键值对的集合：</p>\n<ul>\n<li>以 &quot; <code>&#123;</code> &quot;开始，以&quot; <code>&#125;</code> &quot; 结束，允许嵌套使用；</li>\n<li>每个名称和值成对出现，名称和值之间使用 &quot; <code>:</code> &quot; 分隔；</li>\n<li>键值对之间用 &quot; <code>,</code> &quot; 分隔</li>\n<li>在这些字符前后允许存在无意义的空白符；</li>\n</ul>\n<p>2、JSON 数组是一个有序的零个或者多个值的序列表：</p>\n<ul>\n<li>以 &quot; <code>[</code> &quot;开始，以&quot; <code>]</code> &quot; 结束，允许嵌套使用；</li>\n<li>每个值可以为任意类型，可以是双引号括起来的字符串（<em>string</em>）、数值（<em>number</em>）、 <code>true</code> 、 <code>false</code> 、  <code>null</code> 、对象（<em>object</em>）或者数组（<em>array</em>）；</li>\n<li>元素之间用 &quot; <code>,</code> &quot; 分隔</li>\n<li>在这些元素前后允许存在无意义的空白符；</li>\n</ul>\n<h1 id=\"cjson结构\"><a class=\"anchor\" href=\"#cjson结构\">#</a> cJSON 结构</h1>\n<p>在下载的 cJSON 源码中，实际用到的文件只有两个（cJSON.c 和 cJSON.h），因此 cJSON 具有超轻便，可移植，单文件的特点。</p>\n<p>对于 cJSON 文件，整个的数据结构就主要用到以下结构体：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* The cJSON structure: */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cJSON</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/* next/prev allow you to walk array/object chains. Alternatively, use GetArraySize/GetArrayItem/GetObjectItem */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cJSON</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cJSON</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/* An array or object item will have a child pointer pointing to a chain of the items in the array/object. */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cJSON</span> <span class=\"token operator\">*</span>child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/* The type of the item, as above. */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">/* The item's string, if type==cJSON_String  and type == cJSON_Raw */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>valuestring<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* writing to valueint is DEPRECATED, use cJSON_SetNumberValue instead */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">int</span> valueint<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/* The item's number, if type==cJSON_Number */</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">double</span> valuedouble<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">/* The item's name string, if this item is the child of, or is in the list of subitems of an object. */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>string<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span> cJSON<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>从上面的代码可以看出，cJSON 的设计思想是 --- 链表。</p>\n<p>然后我们分析一下各部分的成员信息：</p>\n<ul>\n<li><code>type</code> ：用于表示该键值对中值的类型；</li>\n<li><code>valuestring</code> ：如果键值类型 (type) 是字符串，则将该指针指向键值；</li>\n<li><code>valueint</code> ：如果键值类型 (type) 是整数，则将该指针指向键值；</li>\n<li><code>valuedouble</code> ：如果键值类型 (type) 是浮点数，则将该指针指向键值；</li>\n<li><code>String</code> ：用于表示当前键值对的名称；</li>\n</ul>\n<p>还有两个 cJSON 格式的结构体指针：</p>\n<ul>\n<li><code>next</code> ：指向下一个键值对</li>\n<li><code>prev</code> ：指向上一个键值对</li>\n</ul>\n<p>最后一个 cJSON 格式的结构体指针：</p>\n<ul>\n<li><code>child</code> ：该子指针指向当前数组 / 对象中的节点</li>\n</ul>\n<p>如果是想要分析 cJSON 它的代码设计，除开那两个承接上下节点的  <code>next</code>  和  <code>prev</code>  结构体指针，那么你还要重点关注上面说到  <code>type</code>  成员，它支持以下定义：</p>\n<blockquote>\n<p>The type can be one of the following:</p>\n<ul>\n<li><code>cJSON_Invalid</code>  (check with  <code>cJSON_IsInvalid</code> ): Represents an invalid item that doesn't contain any value. You automatically have this type if you set the item to all zero bytes.</li>\n<li><code>cJSON_False</code>  (check with  <code>cJSON_IsFalse</code> ): Represents a  <code>false</code>  boolean value. You can also check for boolean values in general with  <code>cJSON_IsBool</code> .</li>\n<li><code>cJSON_True</code>  (check with  <code>cJSON_IsTrue</code> ): Represents a  <code>true</code>  boolean value. You can also check for boolean values in general with  <code>cJSON_IsBool</code> .</li>\n<li><code>cJSON_NULL</code>  (check with  <code>cJSON_IsNull</code> ): Represents a  <code>null</code>  value.</li>\n<li><code>cJSON_Number</code>  (check with  <code>cJSON_IsNumber</code> ): Represents a number value. The value is stored as a double in  <code>valuedouble</code>  and also in  <code>valueint</code> . If the number is outside of the range of an integer,  <code>INT_MAX</code>  or  <code>INT_MIN</code>  are used for  <code>valueint</code> .</li>\n<li><code>cJSON_String</code>  (check with  <code>cJSON_IsString</code> ): Represents a string value. It is stored in the form of a zero terminated string in  <code>valuestring</code> .</li>\n<li><code>cJSON_Array</code>  (check with  <code>cJSON_IsArray</code> ): Represent an array value. This is implemented by pointing  <code>child</code>  to a linked list of  <code>cJSON</code>  items that represent the values in the array. The elements are linked together using  <code>next</code>  and  <code>prev</code> , where the first element has  <code>prev.next == NULL</code>  and the last element  <code>next == NULL</code> .</li>\n<li><code>cJSON_Object</code>  (check with  <code>cJSON_IsObject</code> ): Represents an object value. Objects are stored same way as an array, the only difference is that the items in the object store their keys in  <code>string</code> .</li>\n<li><code>cJSON_Raw</code>  (check with  <code>cJSON_IsRaw</code> ): Represents any kind of JSON that is stored as a zero terminated array of characters in  <code>valuestring</code> . This can be used, for example, to avoid printing the same static JSON over and over again to save performance. cJSON will never create this type when parsing. Also note that cJSON doesn't check if it is valid JSON.</li>\n</ul>\n<p>Additionally there are the following two flags:</p>\n<ul>\n<li><code>cJSON_IsReference</code> : Specifies that the item that  <code>child</code>  points to and/or  <code>valuestring</code>  is not owned by this item, it is only a reference. So  <code>cJSON_Delete</code>  and other functions will only deallocate this item, not its  <code>child</code> / <code>valuestring</code> .</li>\n<li><code>cJSON_StringIsConst</code> : This means that  <code>string</code>  points to a constant string. This means that  <code>cJSON_Delete</code>  and other functions will not try to deallocate  <code>string</code> .</li>\n</ul>\n</blockquote>\n<p>&lt;br/&gt;</p>\n<h1 id=\"json数据封装\"><a class=\"anchor\" href=\"#json数据封装\">#</a> JSON 数据封装</h1>\n<p>封装一个 JSON 格式的数据包，其实就是创建链表和向链表中添加节点的过程。</p>\n<p>在 cJSON 源码里面是存放着很多 API 接口的，但是，一般来说我们并不是全部用到，而且有些函数是辅助函数，例如：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>cJSON <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Info <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>Info<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nationality\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 等价于 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>cJSON <span class=\"token operator\">*</span>Info<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>jtext<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Info <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>jtext <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"China\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">cJSON_AddItemToObject</span><span class=\"token punctuation\">(</span>Info<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Nationality\"</span><span class=\"token punctuation\">,</span> jtext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>然后下面就分析一些常用的 API 函数：</p>\n<p><strong>1、创建原始框架：</strong></p>\n<ul>\n<li>数组（等于创建了一个空的  <code>[ ]</code> ）： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateArray(void);</code></li>\n<li>对象（等于创建了一个空的  <code>&#123; &#125;</code> ）： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void);</code></li>\n</ul>\n<p><strong>2、追加类型值：</strong></p>\n<ul>\n<li>\n<p>数组： <code>CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToArray(cJSON *array, cJSON *item);</code></p>\n</li>\n<li>\n<p>对象： <code>CJSON_PUBLIC(cJSON_bool) cJSON_AddItemToObject(cJSON *object, const char *string, cJSON *item);</code></p>\n</li>\n</ul>\n<p><strong>3、追加对应的值到对象中：</strong></p>\n<ul>\n<li>null： <code>CJSON_PUBLIC(cJSON*) cJSON_AddNullToObject(cJSON * const object, const char * const name);</code></li>\n<li>True： <code>CJSON_PUBLIC(cJSON*) cJSON_AddTrueToObject(cJSON * const object, const char * const name);</code></li>\n<li>False： <code>CJSON_PUBLIC(cJSON*) cJSON_AddFalseToObject(cJSON * const object, const char * const name);</code></li>\n<li>布尔值（实际为 True 和 False 合并）： <code>CJSON_PUBLIC(cJSON*) cJSON_AddBoolToObject(cJSON * const object, const char * const name, const cJSON_bool boolean);</code></li>\n<li>数值： <code>CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, const double number);</code></li>\n<li>字符串： <code>CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string);</code></li>\n<li>对象： <code>CJSON_PUBLIC(cJSON*) cJSON_AddObjectToObject(cJSON * const object, const char * const name);</code></li>\n<li>数组： <code>CJSON_PUBLIC(cJSON*) cJSON_AddArrayToObject(cJSON * const object, const char * const name);</code></li>\n</ul>\n<p><strong>4、创建同一类型的值到数组中：</strong></p>\n<ul>\n<li>整形： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateIntArray(const int *numbers, int count);</code></li>\n<li>单精度： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateFloatArray(const float *numbers, int count);</code></li>\n<li>双精度： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateDoubleArray(const double *numbers, int count);</code></li>\n<li>字符串： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateStringArray(const char *const *strings, int count);</code></li>\n</ul>\n<p><strong>5、创建对应类型的值</strong></p>\n<ul>\n<li>null： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateNull(void);</code></li>\n<li>True： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateTrue(void);</code></li>\n<li>False： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateFalse(void);</code></li>\n<li>布尔值： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateBool(cJSON_bool boolean);</code></li>\n<li>数值： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num);</code></li>\n<li>字符串： <code>CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string);</code></li>\n</ul>\n<h1 id=\"示例\"><a class=\"anchor\" href=\"#示例\">#</a> 示例</h1>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cJSON\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"v1.7.14\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token property\">\"file\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"cJSON.c\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">\"size\"</span><span class=\"token operator\">:</span> <span class=\"token number\">75.8</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">\"unit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"KB\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token property\">\"released\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">2020</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token string\">\"Sep\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token property\">\"latest\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以打印输出上面为例，建立以下代码：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdlib.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"cJSON.h\"</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jtest <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jfile <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jissue <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jyear <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jmonth <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    cJSON <span class=\"token operator\">*</span>jday <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> str <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">/* 创建一个 JSON 格式的主对象 (主链表头结点) */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    jtest <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">/* 追加字符串类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cJSON\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"version\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"v1.7.14\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">/* 追加一个对象到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    jfile <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_AddObjectToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">/* 往追加的对象添加对应的值 */</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cJSON.c\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">cJSON_AddNumberToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"size\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75.8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token function\">cJSON_AddStringToObject</span><span class=\"token punctuation\">(</span>jfile<span class=\"token punctuation\">,</span> <span class=\"token string\">\"unit\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"KB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token comment\">/* 创建一个 JSON 格式的数组 (另一个链表头结点) */</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    jissue <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">/* 创建相应的值并把这些值添加到数组里 */</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    jyear <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">2020</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jyear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    jmonth <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jmonth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    jday <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_CreateNumber</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToArray</span><span class=\"token punctuation\">(</span>jissue<span class=\"token punctuation\">,</span> jday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">/* 把已经填好的数据的数组插入到主对象中 */</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token function\">cJSON_AddItemToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"released\"</span><span class=\"token punctuation\">,</span> jissue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token comment\">/* 追加一个值为 True 的布尔类型的 JSON 数据到主对象中 (添加一个链表节点) */</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    <span class=\"token function\">cJSON_AddTrueToObject</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">,</span> <span class=\"token string\">\"latest\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token comment\">/* 打印 JSON 对象 (整条链表) 的所有数据 */</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    str <span class=\"token operator\">=</span> <span class=\"token function\">cJSON_Print</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token function\">cJSON_free</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token function\">cJSON_Delete</span><span class=\"token punctuation\">(</span>jtest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实例：</p>\n<p><img src=\"image-20210130174615600.png\" alt=\"image-20210130174615600\" /></p>\n<h1 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h1>\n<p>1、在调用了 create 接口的数据，并且用完一个完整的 JSON 格式包后，必须要使用 cJSON_Delete (); 释放内存，且不说不释放会造成泄露数据，在嵌入式中，内存容量可是很少的，很容易就耗完内存。</p>\n<p>2、cJSON_Delete (); 函数，并不是每调用一个 create 接口，等用完都要一一对应释放，而是要释放主链表，简单的来说要处理的是头一个创建的数据类型，对于后期往其追加的数据，cJSON_Delete (); 函数会自动把插入进来的节点删除掉，这个在下篇再详细分析。</p>\n<p>3、cJSON 里面的 Print 接口格式化出来返回的数据，需要调用 cJSON_free (); 释放。cJSON 的内存申请涉及到初始化钩子函数 cJSON_InitHooks (); 那里，这个也是下篇分析。</p>\n",
            "tags": [
                "history",
                "JSON"
            ]
        }
    ]
}