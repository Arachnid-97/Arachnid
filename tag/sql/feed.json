{
    "version": "https://jsonfeed.org/version/1",
    "title": "命运转轮 • All posts by \"sql\" tag",
    "description": "不曾亏欠, 不曾辜负, 如此足矣",
    "home_page_url": "https://arachnid.cc",
    "items": [
        {
            "id": "https://arachnid.cc/sqlite-summarize/",
            "url": "https://arachnid.cc/sqlite-summarize/",
            "title": "SQLite 知识整理",
            "date_published": "2023-02-03T12:44:39.504Z",
            "content_html": "<h1 id=\"sqlite-类型\"><a class=\"anchor\" href=\"#sqlite-类型\">#</a> SQLite 类型</h1>\n<p><strong>1、存储类</strong></p>\n<p>SQLite 存储类属性划分为以下几种类型：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NULL</td>\n<td>表示该值为 NULL 值。</td>\n</tr>\n<tr>\n<td>INTEGER</td>\n<td>无符号整型值，根据值的大小存储在 1、2、3、4、6 或 8 字节中。</td>\n</tr>\n<tr>\n<td>REAL</td>\n<td>浮点值，存储为 8 字节的 IEEE 浮点数字。</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>文本字符串，使用 UTF-8、UTF-16BE 或 UTF-16LE 编码方式存储。</td>\n</tr>\n<tr>\n<td>BLOB</td>\n<td>存储 Blob 数据，该类型数据和输入数据完全相同。</td>\n</tr>\n</tbody>\n</table>\n<p><strong>2、数据类型</strong></p>\n<ul>\n<li>\n<p>布尔数据类型：<br>\nSQLite 并没有提供专门的布尔存储类型，取而代之的是存储整型 1 表示 true，0 表示 false。</p>\n</li>\n<li>\n<p>日期和时间数据类型：<br>\n和布尔类型一样，SQLite 也同样没有提供专门的日期时间存储类型，而是以 TEXT、REAL 和 INTEGER 类型分别不同的格式表示该类型，如：<br>\n<strong>TEXT</strong> : &quot;YYYY-MM-DD HH:MM:SS.SSS&quot;。<br>\n<strong>REAL</strong> ：以 Julian 日期格式存储。<br>\n<strong>INTEGER</strong> ：以 Unix 时间形式保存数据值，即从 1970-01-01 00:00:00 到当前时间所流经的秒数。</p>\n</li>\n</ul>\n<p><strong>3、类型亲缘性（Type Affinity）</strong></p>\n<p>为了最大限度地提高 SQLite 和其他数据库引擎之间的兼容性，SQLite 支持 “类型亲缘性” 的概念。使其它 SQL 数据库引擎能在 SQLite 上运行；在表字段被声明之后，SQLite 都会根据该字段声明时的类型为其选择一种亲缘类型，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式，除非亲缘类型不匹配或无法转换当前数据到该亲缘类型，这样 SQLite 才会考虑其它更适合该值的类型存储该值。</p>\n<p>SQLite 3 数据库中支持分配的类型关联：</p>\n<ul>\n<li>TEXT</li>\n<li>NUMERIC</li>\n<li>INTEGER</li>\n<li>REAL</li>\n<li>BLOB</li>\n</ul>\n<p>决定规则：</p>\n<ol>\n<li>如果声明的类型包含字符串 “INT”，则它分配为  <code>INTEGER</code>  。</li>\n<li>如果声明的类型包含任意字符串 “CHAR”、“CLOB” 或 “TEXT” 的关键字，则被分配为  <code>TEXT</code>  。请注意，VARCHAR 类型包含字符串 “CHAR”，因此被分配为  <code>TEXT</code>  。</li>\n<li>如果声明的类型包含字符串 “BLOB”，或者如果未指定类型，则被分配为  <code>BLOB</code>  。</li>\n<li>如果声明的类型包含任意字符串 “REAL”、“FLOA” 或 “DOUB” 的关键字，则被分配为  <code>REAL</code>  。</li>\n<li>其余情况下，归类为  <code>NUMERIC</code>  。</li>\n</ol>\n<p>note：请注意，确定类型亲缘性的规则顺序很重要。声明类型为 “CHARINT” 的字段将同时匹配规则 1 和 2，但第一条规则采用优先权，所以会被分配为  <code>INTEGER</code>  。</p>\n<p>示例：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">声明的类型</th>\n<th style=\"text-align:left\">类型亲缘性</th>\n<th>规则优先级</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">INT &lt;br/&gt;INTEGER &lt;br/&gt;TINYINT &lt;br/&gt;SMALLINT &lt;br/&gt;MEDIUMINT &lt;br/&gt;BIGINT &lt;br/&gt;UNSIGNED &lt;br/&gt;BIG &lt;br/&gt;INT &lt;br/&gt;INT2 &lt;br/&gt;INT8</td>\n<td style=\"text-align:left\">INTEGER</td>\n<td>1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CHARACTER(20) &lt;br/&gt;VARCHAR(255) &lt;br/&gt;VARYING &lt;br/&gt;CHARACTER(255) &lt;br/&gt;NCHAR(55) &lt;br/&gt;NATIVE &lt;br/&gt;CHARACTER(70) &lt;br/&gt;NVARCHAR(100) &lt;br/&gt;TEXT &lt;br/&gt;CLOB</td>\n<td style=\"text-align:left\">TEXT</td>\n<td>2</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BLOB &lt;br/&gt;<em>no datatype specified</em></td>\n<td style=\"text-align:left\">BLOB</td>\n<td>3</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">REAL &lt;br/&gt;DOUBLE &lt;br/&gt;DOUBLE &lt;br/&gt;PRECISION &lt;br/&gt;FLOAT</td>\n<td style=\"text-align:left\">REAL</td>\n<td>4</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NUMERIC &lt;br/&gt;DECIMAL(10,5) &lt;br/&gt;BOOLEAN &lt;br/&gt;DATE &lt;br/&gt;DATETIME</td>\n<td style=\"text-align:left\">NUMERIC</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"数据表查询\"><a class=\"anchor\" href=\"#数据表查询\">#</a> 数据表查询</h1>\n<p><strong>1、查看所有表名</strong></p>\n<p><code>SELECT * FROM sqlite_master WHERE type='table' ORDER BY name;</code></p>\n<p>sqlite_master 是一个特殊表，属于系统表；存放在根页中，每一个数据库的  <code>.db</code>  文件都有一个 sqlite_master 表。该表存放了  <code>.db</code>  中所有表的相关信息，并只有只读权限，写操作由系统自动执行，使用者没有写的执行权限；其结构如下：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>CREATE TABLE <span class=\"token function\">sqlite_master</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    type TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目的类型，如：表 (table), 索引 (index), 视图 (view), 触发器 (trigger)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目的名称，如表名、索引名等</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    tbl_name TEXT<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录所从属的表名，如索引所在的表名。对于表来说，该列就是表名本身</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    rootpage INTEGER<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 记录项目在数据库页中存储的编号。对于视图和触发器，该列值为 0 或者 NULL</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    sql TEXT <span class=\"token comment\">// 记录创建该项目的 SQL 语句</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>2、查看表的字段</strong></p>\n<p><code>PRAGMA table_info(table_name);</code></p>\n<p>其中 [table_name] 为待查数据表名。</p>\n<p><strong>3、查看整表数据</strong></p>\n<p><code>SELECT * FROM table_name;</code></p>\n<p>其中 [table_name] 为待查数据表名。</p>\n<p>note：参数传入，字符串用单引号包括。</p>\n<h1 id=\"c-c-接口函数\"><a class=\"anchor\" href=\"#c-c-接口函数\">#</a> C / C++ 接口函数</h1>\n<h2 id=\"errors-码\"><a class=\"anchor\" href=\"#errors-码\">#</a> Errors 码</h2>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_OK</span>           <span class=\"token expression\"><span class=\"token number\">0</span>   </span><span class=\"token comment\">/* 成功 */</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* 错误码 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ERROR</span>        <span class=\"token expression\"><span class=\"token number\">1</span>   </span><span class=\"token comment\">/* sql 错误或丢失的数据库，SQL error or missing database */</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_INTERNAL</span>     <span class=\"token expression\"><span class=\"token number\">2</span>   </span><span class=\"token comment\">/* sqlite 内部逻辑错误，Internal logic error in SQLite */</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_PERM</span>         <span class=\"token expression\"><span class=\"token number\">3</span>   </span><span class=\"token comment\">/* 拒绝访问，Access permission denied */</span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ABORT</span>        <span class=\"token expression\"><span class=\"token number\">4</span>   </span><span class=\"token comment\">/* 回调函数请求取消操作，Callback routine requested an abort */</span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_BUSY</span>         <span class=\"token expression\"><span class=\"token number\">5</span>   </span><span class=\"token comment\">/* 数据库文件被锁定，The database file is locked */</span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_LOCKED</span>       <span class=\"token expression\"><span class=\"token number\">6</span>   </span><span class=\"token comment\">/* 数据库的一个表被锁定，A table in the database is locked */</span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOMEM</span>        <span class=\"token expression\"><span class=\"token number\">7</span>   </span><span class=\"token comment\">/* 某次 malloc 函数调用失败，A malloc () failed */</span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_READONLY</span>     <span class=\"token expression\"><span class=\"token number\">8</span>   </span><span class=\"token comment\">/* 尝试写入一个只读数据库，Attempt to write a readonly database */</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_INTERRUPT</span>    <span class=\"token expression\"><span class=\"token number\">9</span>   </span><span class=\"token comment\">/* 操作 sqlite3_interrupt 函数被中断，Operation terminated by sqlite3_interrupt ()*/</span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_IOERR</span>       <span class=\"token expression\"><span class=\"token number\">10</span>   </span><span class=\"token comment\">/* 发生磁盘 I/O 错误，Some kind of disk I/O error occurred */</span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CORRUPT</span>     <span class=\"token expression\"><span class=\"token number\">11</span>   </span><span class=\"token comment\">/* 数据库磁盘映像不正确，The database disk image is malformed */</span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTFOUND</span>    <span class=\"token expression\"><span class=\"token number\">12</span>   </span><span class=\"token comment\">/* 找不到表或记录，NOT USED. Table or record not found */</span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_FULL</span>        <span class=\"token expression\"><span class=\"token number\">13</span>   </span><span class=\"token comment\">/* 数据库满而插入失败，Insertion failed because database is full */</span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CANTOPEN</span>    <span class=\"token expression\"><span class=\"token number\">14</span>   </span><span class=\"token comment\">/* 无法打开数据库，Unable to open the database file */</span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_PROTOCOL</span>    <span class=\"token expression\"><span class=\"token number\">15</span>   </span><span class=\"token comment\">/* 数据库锁定协议错误，NOT USED. Database lock protocol error */</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_EMPTY</span>       <span class=\"token expression\"><span class=\"token number\">16</span>   </span><span class=\"token comment\">/* 数据库为空，Database is empty */</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_SCHEMA</span>      <span class=\"token expression\"><span class=\"token number\">17</span>   </span><span class=\"token comment\">/* 数据库结构发生改变，The database schema changed */</span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_TOOBIG</span>      <span class=\"token expression\"><span class=\"token number\">18</span>   </span><span class=\"token comment\">/* 数据大小超限，String or BLOB exceeds size limit */</span></span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_CONSTRAINT</span>  <span class=\"token expression\"><span class=\"token number\">19</span>   </span><span class=\"token comment\">/* 约束违反，Abort due to constraint violation */</span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_MISMATCH</span>    <span class=\"token expression\"><span class=\"token number\">20</span>   </span><span class=\"token comment\">/* 数据类型不匹配，Data type mismatch */</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_MISUSE</span>      <span class=\"token expression\"><span class=\"token number\">21</span>   </span><span class=\"token comment\">/* 库使用不正确，Library used incorrectly */</span></span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOLFS</span>       <span class=\"token expression\"><span class=\"token number\">22</span>   </span><span class=\"token comment\">/* 使用了操作系统不支持的功能，Uses OS features not supported on host */</span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_AUTH</span>        <span class=\"token expression\"><span class=\"token number\">23</span>   </span><span class=\"token comment\">/* 授权失败，Authorization denied */</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_FORMAT</span>      <span class=\"token expression\"><span class=\"token number\">24</span>   </span><span class=\"token comment\">/* 附加数据库格式错误，Auxiliary database format error */</span></span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_RANGE</span>       <span class=\"token expression\"><span class=\"token number\">25</span>   </span><span class=\"token comment\">/* sqlite3_bind 的第 2 给参数超出范围，2nd parameter to sqlite3_bind out of range */</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTADB</span>      <span class=\"token expression\"><span class=\"token number\">26</span>   </span><span class=\"token comment\">/* 不是数据库文件，File opened that is not a database file */</span></span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_NOTICE</span>      <span class=\"token expression\"><span class=\"token number\">27</span>   </span><span class=\"token comment\">/* Notifications from sqlite3_log() */</span></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_WARNING</span>     <span class=\"token expression\"><span class=\"token number\">28</span>   </span><span class=\"token comment\">/* Warnings from sqlite3_log() */</span></span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_ROW</span>         <span class=\"token expression\"><span class=\"token number\">100</span>  </span><span class=\"token comment\">/* sqlite3_step 产生一个就绪行，sqlite3_step () has another row ready */</span></span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SQLITE_DONE</span>        <span class=\"token expression\"><span class=\"token number\">101</span>  </span><span class=\"token comment\">/* sqlite3_step 执行完成，sqlite3_step () has finished executing */</span></span></pre></td></tr></table></figure><h2 id=\"api-函数\"><a class=\"anchor\" href=\"#api-函数\">#</a> API 函数</h2>\n<p>以下只列举嵌入式环境下常用的 API：</p>\n<h3 id=\"sqlite3_open\"><a class=\"anchor\" href=\"#sqlite3_open\">#</a> sqlite3_open</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_open</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename<span class=\"token punctuation\">,</span>   <span class=\"token comment\">/* Database filename (UTF-8) */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppDb          <span class=\"token comment\">/* OUT: SQLite db handle */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数用于打开由  <code>filename</code>  参数指定的 SQLite 数据库文件，并返回一个  <code>*ppDb</code>  数据库连接句柄，即使发生错误； <code>filename</code>  为 UTF-8 编码，如果 SQLite 无法分配内存来保存 sqlite3 对象，则会在  <code>*ppDb</code>  中写入一个 NULL，而不是指向 sqlite3 对象的指针。如果数据库成功打开，则返回 SQLITE_OK。否则返回错误代码。sqlite3_errmsg () 可用于获取任何 sqlite3_open () 执行失败后错误的英文描述。</p>\n<p>如果  <code>filename</code>  参数是  <code>':memory:'</code>  ，那么 sqlite3_open () 将会在 RAM 中创建一个内存数据库，这只会在数据库连接关闭前持续。</p>\n<p>如果  <code>filename</code>  参数是  <code>''</code>  （空字符串），则将创建一个专用的临时磁盘数据库；一旦数据库连接关闭，此专用数据库将被自动删除。</p>\n<h3 id=\"sqlite3_close\"><a class=\"anchor\" href=\"#sqlite3_close\">#</a> sqlite3_close</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>sqlite3<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数与 sqlite3_open 函数相对应，用于关闭之前调用 sqlite3_open () 打开的数据库连接，此时所有与连接相关的语句都应在连接关闭之前完成。</p>\n<p>如果还有查询没有完成，sqlite3_close () 将返回 SQLITE_BUSY 禁止关闭的错误消息；当成功执行，将销毁 sqlite3 对象并释放所有关联资源时返回 SQLITE_OK。</p>\n<h3 id=\"sqlite3_exec\"><a class=\"anchor\" href=\"#sqlite3_exec\">#</a> sqlite3_exec</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_exec</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>                                  <span class=\"token comment\">/* An open database */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sql<span class=\"token punctuation\">,</span>                           <span class=\"token comment\">/* SQL to be evaluated */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* Callback function */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span>                                    <span class=\"token comment\">/* 1st argument to callback */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>errmsg                              <span class=\"token comment\">/* Error msg written here */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>sqlite3_exec () 提供了一个执行 SQL 命令的快捷方式，SQL 命令由  <code>*sql</code>  参数提供；它是 sqlite3_prepare_v2 () 、sqlite3_step () 和 sqlite3_finalize () 的包装函数，允许应用程序运行多个 SQL 语句，而无需编写大量 C 代码。</p>\n<p>sqlite3_exec () 程序解析并执行由  <code>*sql</code>  参数所给的每个命令，直到字符串结束或者遇到错误为止。此参数等同于使用 shell 实现所有的 sqlite 功能命令，所以这个  <code>*sql</code>  就是对应 sqlite 功能命令的 “字符串”。</p>\n<p><code>callback</code>  是执行  <code>*sql</code>  对应的功能命令后，所调取的函数，即回调函数；用于将执行结果进行分析处理。其原型如下：</p>\n<p><code>typedef int (*sqlite3_callback)(void *data, int argc, char **argv, char **azColName);</code></p>\n<p><strong>sqlite3_callback</strong> 参数：</p>\n<ul>\n<li>data：由 sqlite3_exec 传入的参数  <code>void*</code>  ，或者说是指针参数。</li>\n<li>argc：查询到的这一条记录由多少个字段（多少列）。</li>\n<li>argv：该参数是双指针，查询出来的数据都保存在这里，它是一个一维数组，每一个元素都是一个  <code>char*</code>   , 是一个字段内容，所以这个参数就可以不是单字节，而是可以为字符串等不定长度的数值，用字符串表示，以  <code>'\\0'</code>  结尾。</li>\n<li>azColName：该参数是双指针，与  <code>argv</code>  是对应的，表示这个字段的字段名称。</li>\n</ul>\n<p>note：除  <code>data</code>  传入参数外，回调函数的其它参数一定是 SQL 命令执行结果的进一步处理；此外，需要特别注意的是：回调函数多数时候不是执行 1 次，而是会循环执行 n 次，例如当我们执行 SELECT 命令时，往往输出的结果会是多行，假设有 n 行，那么就会执行 n 次回调函数。</p>\n<p>实例：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sqlite3.h></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">callback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>NotUsed<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>azColName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>argc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s = %s\\n\"</span><span class=\"token punctuation\">,</span> azColName<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">?</span> argv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"NULL\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zErrMsg <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token keyword\">int</span> rc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> argc<span class=\"token operator\">!=</span><span class=\"token number\">3</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Usage: %s DATABASE SQL-STATEMENT\\n\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  rc <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_open</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rc <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Can't open database: %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">sqlite3_errmsg</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  rc <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_exec</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> rc<span class=\"token operator\">!=</span>SQLITE_OK <span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SQL error: %s\\n\"</span><span class=\"token punctuation\">,</span> zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token function\">sqlite3_free</span><span class=\"token punctuation\">(</span>zErrMsg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  <span class=\"token function\">sqlite3_close</span><span class=\"token punctuation\">(</span>db<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"sqlite3_get_table\"><a class=\"anchor\" href=\"#sqlite3_get_table\">#</a> sqlite3_get_table</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_get_table</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>          <span class=\"token comment\">/* An open database */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zSql<span class=\"token punctuation\">,</span>     <span class=\"token comment\">/* SQL to be evaluated */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>pazResult<span class=\"token punctuation\">,</span>    <span class=\"token comment\">/* Results of the query */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pnRow<span class=\"token punctuation\">,</span>           <span class=\"token comment\">/* Number of result rows written here */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>pnColumn<span class=\"token punctuation\">,</span>        <span class=\"token comment\">/* Number of result columns written here */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pzErrmsg       <span class=\"token comment\">/* Error msg written here */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在最新的文档中，表明这该函数是一个传统的 API，保留该 API 是为了向后兼容；因此，不建议使用此接口。</p>\n<p>输入参数：</p>\n<ul>\n<li>\n<p>db：打开数据库文件后返回的句柄。</p>\n</li>\n<li>\n<p>zSql：需要执行的 SQL 命令字符串。</p>\n</li>\n<li>\n<p>pazResult：对字符串数组的引用。使用此引用传回查询结果。传回的值必须通过调用  <code>sqlite3_free_table()</code>  。</p>\n</li>\n<li>\n<p>pnRow：查询返回的行数，不包括列名。</p>\n</li>\n<li>\n<p>pnColumn：查询返回的列数。</p>\n</li>\n<li>\n<p>pzErrmsg：对字符串的可选引用。如果发生错误，引用将被设置为一条错误消息。该应用程序负责 释放的消息  <code>sqlite3_free()</code>  。如果没有错误发生，引用将被设置为 NULL。引用可能为 NULL。</p>\n</li>\n</ul>\n<p>和 sqlite3_exec () 这种使用回调函数的方式不同，sqlite3_get_table () 的功能要显得更加简便。它通过控制语句的传入，直接将参数赋值给指针传出。</p>\n<p>note：虽然 sqlite3_get_table () 的使用较于 sqlite3_exec () 更为简便，但官方不推荐使用的，在实际当中它更趋于用作测试 API，并且根据官方建议，推荐使用 sqlite3_prepare_v2 ()、sqlite3_column_xxx () 这些 API 组合。</p>\n<h3 id=\"sqlite3_free_table\"><a class=\"anchor\" href=\"#sqlite3_free_table\">#</a> sqlite3_free_table</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">void</span> <span class=\"token function\">sqlite3_free_table</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>该函数与 sqlite3_get_table 函数相对应，在应用程序完成 sqlite3_get_table 的结果使用后，它必须将查询结果的指针  <code>pazResult</code>  传递给 sqlite3_free_table () 以释放分配的内存。</p>\n<h3 id=\"sqlite3_prepare_v2\"><a class=\"anchor\" href=\"#sqlite3_prepare_v2\">#</a> sqlite3_prepare_v2</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_prepare_v2</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  sqlite3 <span class=\"token operator\">*</span>db<span class=\"token punctuation\">,</span>            <span class=\"token comment\">/* Database handle */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zSql<span class=\"token punctuation\">,</span>       <span class=\"token comment\">/* SQL statement, UTF-8 encoded */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">int</span> nByte<span class=\"token punctuation\">,</span>              <span class=\"token comment\">/* Maximum length of zSql in bytes. */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  sqlite3_stmt <span class=\"token operator\">*</span><span class=\"token operator\">*</span>ppStmt<span class=\"token punctuation\">,</span>  <span class=\"token comment\">/* OUT: Statement handle */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pzTail     <span class=\"token comment\">/* OUT: Pointer to unused portion of zSql */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输入参数：</p>\n<ul>\n<li>db：从先前成功调用 sqlite3_open（）、sqlite3_open v2（）或 sqlite3_open16（）获得的 SQLite 数据库。</li>\n<li>zSql：要执行的 SQL 语句（可以包含未赋值的变量）</li>\n<li>nByte：如果  <code>nByte</code>  参数为负，则  <code>zSql</code>  被读取到第一个空结束终止符。如果  <code>nByte</code>  为正，则它是从  <code>zSql</code>  读取的字节数。</li>\n<li>ppStmt：解析编译出的 SQL 语句实例。</li>\n<li>pzTail：如果  <code>pzTail</code>  不为空，那么  <code>*pzTail</code>  将指向  <code>zSql</code>  中第一个 SQL 语句结束后的第一个字节。</li>\n</ul>\n<h3 id=\"sqlite3_bind_xxx\"><a class=\"anchor\" href=\"#sqlite3_bind_xxx\">#</a> sqlite3_bind_xxx</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_blob</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_blob64</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> sqlite3_uint64 bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_double</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span>               val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_int</span><span class=\"token punctuation\">(</span>       sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>                  val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_int64</span><span class=\"token punctuation\">(</span>     sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> sqlite3_int64        val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_null</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text</span><span class=\"token punctuation\">(</span>      sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text16</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_text64</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span>          val<span class=\"token punctuation\">,</span> sqlite3_uint64 bytes<span class=\"token punctuation\">,</span> mem_callback<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_value</span><span class=\"token punctuation\">(</span>     sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sqlite3_value<span class=\"token operator\">*</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// SQLITE_API int sqlite3_bind_pointer(   sqlite3_stmt*, int, void*, const char*,void(*)(void*));</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_zeroblob</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span>                           <span class=\"token keyword\">int</span>            bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_bind_zeroblob64</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pidx<span class=\"token punctuation\">,</span>                           sqlite3_uint64 bytes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">void</span> <span class=\"token function\">mem_callback</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> ptr <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于绑定任何参数值。</p>\n<ul>\n<li>stmt：指向一个被 sqlite3_prepare_v2 () 等接口编译的语句句柄，它可被 sqlite3_step () 执行。最后用 sqlite3_finalize () 来释放它。</li>\n<li>pidx：SQL 参数（每列元素）的索引值，参数索引值从 1 开始。</li>\n<li>val：要绑定的数据值。</li>\n<li>bytes：数据值的大小，以字节（不是字符）为单位。通常，长度不包括任何空结束符。如果  <code>val</code>  是一个以空结束的字符串，把该值设为为负值（-1），则会自动计算长度。</li>\n<li>mem_callback：一个指向内存释放函数的函数指针。此函数用于在 SQLite 处理完 BLOB 或 string 之后对其进行处理，主要用来释放  <code>val</code>  的内存缓冲区；如果缓冲区是用 sqlite3_malloc () 分配的，则可以直接传递对 sqlite3_free () 的引用。也可以使用特殊标志  <code>SQLITE_STATIC</code>  和  <code>SQLITE_TRANSIENT</code>  ； <code>SQLITE_STATIC</code>  说明数据值为常量，位于静态的非托管空间中，不需要释放，而  <code>SQLITE_TRANSIENT</code>  会使得对   <code>val</code>  数据做一份拷贝。</li>\n</ul>\n<h3 id=\"sqlite3_step\"><a class=\"anchor\" href=\"#sqlite3_step\">#</a> sqlite3_step</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_step</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>在调用 sqlite3_prepare_v2 () 等接口编译的语句句柄后，必须调用此函数一次或多次以计算语句。</p>\n<p>返回值：</p>\n<ul>\n<li>\n<p>SQLITE_BUSY：忙碌，数据库引擎无法锁定数据去完成其工作。可以重试该语句。</p>\n</li>\n<li>\n<p>SQLITE_DONE：意味着 SQL 语句执行完成且成功。一旦执行成功后，sqlite3_step () 就不应该被再次调用执行，除非我们使用 sqlite3_reset () 重置  <code>sqlite3_stmt</code>  数据。</p>\n</li>\n<li>\n<p>SQLITE_ROW：当返回的行数据较多时会出现，代表获得了一条有效数据行，此时可以通过 sqlite3_column_xxx 函数来取得数据；再次调用 sqlite3_step () 可取得下一条查询结果，直至返回  <code>SQLITE_DONE</code>  。</p>\n</li>\n<li>\n<p>SQLITE_ERROR：表示发生了运行时错误（例如约束冲突），此时可以通过 sqlite3_errmmsg () 取得相关的错误信息，并且不应再次调用 sqlite3_step () 。</p>\n</li>\n<li>\n<p>SQLITE_MISUSE：意味着这个例程被不适当地调用。可能是在已完成的准备好的语句上调用的，也可能是在以前返回  <code>SQLITE_ERROR</code>  或  <code>SQLITE_DONE</code>  的语句上调用的。或者可能是同一数据库连接同时被两个或多个线程使用。</p>\n</li>\n</ul>\n<h3 id=\"sqlite3_column_xxx\"><a class=\"anchor\" href=\"#sqlite3_column_xxx\">#</a> sqlite3_column_xxx</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          <span class=\"token function\">sqlite3_column_blob</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>SQLITE_API <span class=\"token keyword\">double</span>               <span class=\"token function\">sqlite3_column_double</span><span class=\"token punctuation\">(</span> sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_int</span><span class=\"token punctuation\">(</span>    sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>SQLITE_API sqlite3_int64        <span class=\"token function\">sqlite3_column_int64</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> <span class=\"token function\">sqlite3_column_text</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>SQLITE_API <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span><span class=\"token operator\">*</span>          <span class=\"token function\">sqlite3_column_text16</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>SQLITE_API sqlite3_value<span class=\"token operator\">*</span>       <span class=\"token function\">sqlite3_column_value</span><span class=\"token punctuation\">(</span> sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_bytes</span><span class=\"token punctuation\">(</span>  sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_bytes16</span><span class=\"token punctuation\">(</span>sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span>                  <span class=\"token function\">sqlite3_column_type</span><span class=\"token punctuation\">(</span>   sqlite3_stmt<span class=\"token operator\">*</span> stmt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> cidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于从当前结果行中提取列值。</p>\n<ul>\n<li>stmt：指向一个被 sqlite3_prepare_v2 () 等接口编译的语句句柄，它可被 sqlite3_step () 执行。最后用 sqlite3_finalize () 来释放它。</li>\n<li>cidx：SQL 参数（每列元素）的索引值，参数索引值从 0 开始。</li>\n</ul>\n<p>返回结果：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">API 函数</th>\n<th style=\"text-align:center\"></th>\n<th style=\"text-align:left\">结果值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_blob</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">BLOB</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_double</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">REAL</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_int</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">32 位 INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_int64</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">64 位 INTEGER</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_text</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-8 TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_text16</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-16 TEXT</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_value</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">作为 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9jM3JlZi92YWx1ZS5odG1s\">未受保护的 sqlite3_value</span> 对象</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_bytes</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">BLOB 或 UTF-8 TEXT 的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_bytes16</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">UTF-16 TEXT 的字节大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><strong>sqlite3_column_type</strong></td>\n<td style=\"text-align:center\">→</td>\n<td style=\"text-align:left\">默认数据的类型</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"sqlite3_reset\"><a class=\"anchor\" href=\"#sqlite3_reset\">#</a> sqlite3_reset</h3>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>SQLITE_API <span class=\"token keyword\">int</span> <span class=\"token function\">sqlite3_reset</span><span class=\"token punctuation\">(</span>sqlite3_stmt <span class=\"token operator\">*</span>pStmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>用于重置  <code>sqlite3_stmt</code>  数据，然后准备被重新执行。任何使用 sqlite3_bind_xxx 函数将值绑定到它们的 SQL 语句变量都将保留它们的值。使用 sqlite3_clear_bindings () 重置绑定。</p>\n<p>返回值：</p>\n<ul>\n<li>SQLITE_BUSY</li>\n<li>SQLITE_DONE</li>\n<li>SQLITE_ROW</li>\n</ul>\n<h2 id=\"操作流程\"><a class=\"anchor\" href=\"#操作流程\">#</a> 操作流程</h2>\n<p>使用 SQLite 数据库，最典型的函数操作流程（伪代码）：</p>\n<figure class=\"highlight c\"><figcaption data-lang=\"c\"><span>伪代码</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* create a statement from an SQL string */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sqlite3_stmt <span class=\"token operator\">*</span>stmt <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sqlite3_prepare_v2</span><span class=\"token punctuation\">(</span> db<span class=\"token punctuation\">,</span> sql_str<span class=\"token punctuation\">,</span> sql_str_len<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>stmt<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SQLITE_OK <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/* use the statement as many times as required */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token comment\">/* bind any parameter values */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">sqlite3_bind_xxx</span><span class=\"token punctuation\">(</span> stmt<span class=\"token punctuation\">,</span> param_idx<span class=\"token punctuation\">,</span> param_value<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">/* execute statement and step over each row of the result set */</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">sqlite3_step</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> SQLITE_ROW <span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token comment\">/* extract column values from the current result row */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            col_val <span class=\"token operator\">=</span> <span class=\"token function\">sqlite3_column_xxx</span><span class=\"token punctuation\">(</span> stmt<span class=\"token punctuation\">,</span> col_index <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">/* reset the statement so it may be used again */</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">sqlite3_reset</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">sqlite3_clear_bindings</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">/* optional */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">/* destroy and release the statement */</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token function\">sqlite3_finalize</span><span class=\"token punctuation\">(</span> stmt <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>a、sqlite3_prepare 创建一个预处理对象。</p>\n<p>b、sqlite3_bind_xxx 绑定参数。</p>\n<p>c、循环执行 sqlite3_step 获取数据。</p>\n<p>d、sqlite3_column 从数据中取出每一段。</p>\n<p>e、释放 sqlite3_finalize 。</p>\n<p><strong>1、插入</strong></p>\n<p>sqlite3_open -&gt; sqlite3_prepare_v2 -&gt; sqlite3_bind_xxx -&gt; sqlite3_step -&gt; sqlite3_reset -&gt; sqlite3_finalize -&gt; sqlite3_close</p>\n<p><strong>2、查询</strong></p>\n<p>sqlite3_open -&gt; sqlite3_prepare_v2 -&gt; sqlite3_step -&gt; sqlite3_column_xxx -&gt; sqlite3_finalize -&gt; sqlite3_close</p>\n<p><strong>3、例子</strong></p>\n<p>略略略</p>\n<h1 id=\"常用命令\"><a class=\"anchor\" href=\"#常用命令\">#</a> 常用命令</h1>\n<p>If you use an auto-increment field, you can easily write this to delete the oldest 100 records:</p>\n<pre><code>DELETE FROM mytable WHERE id IN (SELECT id FROM mytable ORDER BY id ASC LIMIT 100)\n</code></pre>\n<p>Or, if no such field is present, use  <code>ROWID</code>  :</p>\n<pre><code>DELETE FROM mytable WHERE ROWID IN (SELECT ROWID FROM mytable ORDER BY ROWID ASC LIMIT 100)\n</code></pre>\n<p>Or, to leave only the latest 1000 records:</p>\n<pre><code>DELETE FROM mytable WHERE ROWID IN (SELECT ROWID FROM mytable ORDER BY ROWID DESC LIMIT -1 OFFSET 1000)\n</code></pre>\n<h1 id=\"参考\"><a class=\"anchor\" href=\"#参考\">#</a> 参考</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL2NpbnRyby5odG1s\">An Introduction To The SQLite C/C++ Interface</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL2NhcGkzcmVmLmh0bWw=\">C-language Interface Specification for SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3FsaXRlLm9yZy9kYXRhdHlwZTMuaHRtbA==\">Datatypes In SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L3VzaW5nLXNxbGl0ZS85NzgxNDQ5Mzk0NTkyL3JlMjI5Lmh0bWw=\">Using sqlite3_bind_xxx()</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cub3JlaWxseS5jb20vbGlicmFyeS92aWV3L3VzaW5nLXNxbGl0ZS85NzgxNDQ5Mzk0NTkyL3JlMjQ0Lmh0bWw=\">Using sqlite3_column_xxx()</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWxpdGUub3JnL3F1aWNrc3RhcnQuaHRtbA==\">Write Programs That Use SQLite</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTEyNjk5NjEzODEyMDk3MDMxI2hlYWRpbmctMjE=\">SQLite 常用 API (C)</span></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzY2NzA4NS9kZWxldGUtb2xkZXN0LXJlY29yZHMtZnJvbS1kYXRhYmFzZQ==\">Delete oldest records from database</span></p>\n",
            "tags": [
                "SQL"
            ]
        }
    ]
}